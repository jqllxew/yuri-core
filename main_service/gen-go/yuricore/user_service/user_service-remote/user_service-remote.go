// Code generated by Thrift Compiler (0.14.1). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/jqllxew/YuriCore/main_service/gen-go/yuricore/user_service"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
)

var _ = user_service.GoUnusedProtection__

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  LoginResponse Login(LoginRequest req)")
	fmt.Fprintln(os.Stderr, "  RegisterResponse Register(RegisterRequest req)")
	fmt.Fprintln(os.Stderr, "  GetUserInfoResponse GetUserInfo(GetUserInfoRequest req)")
	fmt.Fprintln(os.Stderr, "  UserDownResponse UserDown(UserDownRequest req)")
	fmt.Fprintln(os.Stderr, "  GetUserFriendsResponse GetUserFriends(GetUserFriendsRequest req)")
	fmt.Fprintln(os.Stderr, "  AddUserPointsResponse AddUserPoints(AddUserPointsRequest req)")
	fmt.Fprintln(os.Stderr, "  AddUserCashResponse AddUserCash(AddUserCashRequest req)")
	fmt.Fprintln(os.Stderr, "  UserPlayedGameResponse UserPlayedGame(UserPlayedGameRequest req)")
	fmt.Fprintln(os.Stderr, "  UserPayPointsResponse UserPayPoints(UserPayPointsRequest req)")
	fmt.Fprintln(os.Stderr, "  UserPayCashResponse UserPayCash(UserPayCashRequest req)")
	fmt.Fprintln(os.Stderr, "  UserAddItemResponse UserAddItem(UserAddItemRequest req)")
	fmt.Fprintln(os.Stderr, "  UserAddFriendResponse UserAddFriend(UserAddFriendRequest req)")
	fmt.Fprintln(os.Stderr, "  UpdateBagResponse UpdateBag(UpdateBagRequest req)")
	fmt.Fprintln(os.Stderr, "  UpdateBuymenuResponse UpdateBuymenu(UpdateBuymenuRequest req)")
	fmt.Fprintln(os.Stderr, "  UpdateCosmeticsResponse UpdateCosmetics(UpdateCosmeticsRequest req)")
	fmt.Fprintln(os.Stderr, "  UpdateCampaignResponse UpdateCampaign(UpdateCampaignRequest req)")
	fmt.Fprintln(os.Stderr, "  UpdateOptionsResponse UpdateOptions(UpdateOptionsRequest req)")
	fmt.Fprintln(os.Stderr, "  UpdateNickNameResponse UpdateNickName(UpdateNickNameRequest req)")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
	var m map[string]string = h
	return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
	parts := strings.Split(value, ": ")
	if len(parts) != 2 {
		return fmt.Errorf("header should be of format 'Key: Value'")
	}
	h[parts[0]] = parts[1]
	return nil
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	headers := make(httpHeaders)
	var parsedUrl *url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
	flag.Parse()

	if len(urlString) > 0 {
		var err error
		parsedUrl, err = url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
		if len(headers) > 0 {
			httptrans := trans.(*thrift.THttpClient)
			for key, value := range headers {
				httptrans.SetHeader(key, value)
			}
		}
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	iprot := protocolFactory.GetProtocol(trans)
	oprot := protocolFactory.GetProtocol(trans)
	client := user_service.NewUserServiceClient(thrift.NewTStandardClient(iprot, oprot))
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "Login":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Login requires 1 args")
			flag.Usage()
		}
		arg98 := flag.Arg(1)
		mbTrans99 := thrift.NewTMemoryBufferLen(len(arg98))
		defer mbTrans99.Close()
		_, err100 := mbTrans99.WriteString(arg98)
		if err100 != nil {
			Usage()
			return
		}
		factory101 := thrift.NewTJSONProtocolFactory()
		jsProt102 := factory101.GetProtocol(mbTrans99)
		argvalue0 := user_service.NewLoginRequest()
		err103 := argvalue0.Read(context.Background(), jsProt102)
		if err103 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Login(context.Background(), value0))
		fmt.Print("\n")
		break
	case "Register":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Register requires 1 args")
			flag.Usage()
		}
		arg104 := flag.Arg(1)
		mbTrans105 := thrift.NewTMemoryBufferLen(len(arg104))
		defer mbTrans105.Close()
		_, err106 := mbTrans105.WriteString(arg104)
		if err106 != nil {
			Usage()
			return
		}
		factory107 := thrift.NewTJSONProtocolFactory()
		jsProt108 := factory107.GetProtocol(mbTrans105)
		argvalue0 := user_service.NewRegisterRequest()
		err109 := argvalue0.Read(context.Background(), jsProt108)
		if err109 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Register(context.Background(), value0))
		fmt.Print("\n")
		break
	case "GetUserInfo":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetUserInfo requires 1 args")
			flag.Usage()
		}
		arg110 := flag.Arg(1)
		mbTrans111 := thrift.NewTMemoryBufferLen(len(arg110))
		defer mbTrans111.Close()
		_, err112 := mbTrans111.WriteString(arg110)
		if err112 != nil {
			Usage()
			return
		}
		factory113 := thrift.NewTJSONProtocolFactory()
		jsProt114 := factory113.GetProtocol(mbTrans111)
		argvalue0 := user_service.NewGetUserInfoRequest()
		err115 := argvalue0.Read(context.Background(), jsProt114)
		if err115 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetUserInfo(context.Background(), value0))
		fmt.Print("\n")
		break
	case "UserDown":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "UserDown requires 1 args")
			flag.Usage()
		}
		arg116 := flag.Arg(1)
		mbTrans117 := thrift.NewTMemoryBufferLen(len(arg116))
		defer mbTrans117.Close()
		_, err118 := mbTrans117.WriteString(arg116)
		if err118 != nil {
			Usage()
			return
		}
		factory119 := thrift.NewTJSONProtocolFactory()
		jsProt120 := factory119.GetProtocol(mbTrans117)
		argvalue0 := user_service.NewUserDownRequest()
		err121 := argvalue0.Read(context.Background(), jsProt120)
		if err121 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.UserDown(context.Background(), value0))
		fmt.Print("\n")
		break
	case "GetUserFriends":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetUserFriends requires 1 args")
			flag.Usage()
		}
		arg122 := flag.Arg(1)
		mbTrans123 := thrift.NewTMemoryBufferLen(len(arg122))
		defer mbTrans123.Close()
		_, err124 := mbTrans123.WriteString(arg122)
		if err124 != nil {
			Usage()
			return
		}
		factory125 := thrift.NewTJSONProtocolFactory()
		jsProt126 := factory125.GetProtocol(mbTrans123)
		argvalue0 := user_service.NewGetUserFriendsRequest()
		err127 := argvalue0.Read(context.Background(), jsProt126)
		if err127 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetUserFriends(context.Background(), value0))
		fmt.Print("\n")
		break
	case "AddUserPoints":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddUserPoints requires 1 args")
			flag.Usage()
		}
		arg128 := flag.Arg(1)
		mbTrans129 := thrift.NewTMemoryBufferLen(len(arg128))
		defer mbTrans129.Close()
		_, err130 := mbTrans129.WriteString(arg128)
		if err130 != nil {
			Usage()
			return
		}
		factory131 := thrift.NewTJSONProtocolFactory()
		jsProt132 := factory131.GetProtocol(mbTrans129)
		argvalue0 := user_service.NewAddUserPointsRequest()
		err133 := argvalue0.Read(context.Background(), jsProt132)
		if err133 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddUserPoints(context.Background(), value0))
		fmt.Print("\n")
		break
	case "AddUserCash":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddUserCash requires 1 args")
			flag.Usage()
		}
		arg134 := flag.Arg(1)
		mbTrans135 := thrift.NewTMemoryBufferLen(len(arg134))
		defer mbTrans135.Close()
		_, err136 := mbTrans135.WriteString(arg134)
		if err136 != nil {
			Usage()
			return
		}
		factory137 := thrift.NewTJSONProtocolFactory()
		jsProt138 := factory137.GetProtocol(mbTrans135)
		argvalue0 := user_service.NewAddUserCashRequest()
		err139 := argvalue0.Read(context.Background(), jsProt138)
		if err139 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddUserCash(context.Background(), value0))
		fmt.Print("\n")
		break
	case "UserPlayedGame":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "UserPlayedGame requires 1 args")
			flag.Usage()
		}
		arg140 := flag.Arg(1)
		mbTrans141 := thrift.NewTMemoryBufferLen(len(arg140))
		defer mbTrans141.Close()
		_, err142 := mbTrans141.WriteString(arg140)
		if err142 != nil {
			Usage()
			return
		}
		factory143 := thrift.NewTJSONProtocolFactory()
		jsProt144 := factory143.GetProtocol(mbTrans141)
		argvalue0 := user_service.NewUserPlayedGameRequest()
		err145 := argvalue0.Read(context.Background(), jsProt144)
		if err145 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.UserPlayedGame(context.Background(), value0))
		fmt.Print("\n")
		break
	case "UserPayPoints":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "UserPayPoints requires 1 args")
			flag.Usage()
		}
		arg146 := flag.Arg(1)
		mbTrans147 := thrift.NewTMemoryBufferLen(len(arg146))
		defer mbTrans147.Close()
		_, err148 := mbTrans147.WriteString(arg146)
		if err148 != nil {
			Usage()
			return
		}
		factory149 := thrift.NewTJSONProtocolFactory()
		jsProt150 := factory149.GetProtocol(mbTrans147)
		argvalue0 := user_service.NewUserPayPointsRequest()
		err151 := argvalue0.Read(context.Background(), jsProt150)
		if err151 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.UserPayPoints(context.Background(), value0))
		fmt.Print("\n")
		break
	case "UserPayCash":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "UserPayCash requires 1 args")
			flag.Usage()
		}
		arg152 := flag.Arg(1)
		mbTrans153 := thrift.NewTMemoryBufferLen(len(arg152))
		defer mbTrans153.Close()
		_, err154 := mbTrans153.WriteString(arg152)
		if err154 != nil {
			Usage()
			return
		}
		factory155 := thrift.NewTJSONProtocolFactory()
		jsProt156 := factory155.GetProtocol(mbTrans153)
		argvalue0 := user_service.NewUserPayCashRequest()
		err157 := argvalue0.Read(context.Background(), jsProt156)
		if err157 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.UserPayCash(context.Background(), value0))
		fmt.Print("\n")
		break
	case "UserAddItem":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "UserAddItem requires 1 args")
			flag.Usage()
		}
		arg158 := flag.Arg(1)
		mbTrans159 := thrift.NewTMemoryBufferLen(len(arg158))
		defer mbTrans159.Close()
		_, err160 := mbTrans159.WriteString(arg158)
		if err160 != nil {
			Usage()
			return
		}
		factory161 := thrift.NewTJSONProtocolFactory()
		jsProt162 := factory161.GetProtocol(mbTrans159)
		argvalue0 := user_service.NewUserAddItemRequest()
		err163 := argvalue0.Read(context.Background(), jsProt162)
		if err163 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.UserAddItem(context.Background(), value0))
		fmt.Print("\n")
		break
	case "UserAddFriend":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "UserAddFriend requires 1 args")
			flag.Usage()
		}
		arg164 := flag.Arg(1)
		mbTrans165 := thrift.NewTMemoryBufferLen(len(arg164))
		defer mbTrans165.Close()
		_, err166 := mbTrans165.WriteString(arg164)
		if err166 != nil {
			Usage()
			return
		}
		factory167 := thrift.NewTJSONProtocolFactory()
		jsProt168 := factory167.GetProtocol(mbTrans165)
		argvalue0 := user_service.NewUserAddFriendRequest()
		err169 := argvalue0.Read(context.Background(), jsProt168)
		if err169 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.UserAddFriend(context.Background(), value0))
		fmt.Print("\n")
		break
	case "UpdateBag":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "UpdateBag requires 1 args")
			flag.Usage()
		}
		arg170 := flag.Arg(1)
		mbTrans171 := thrift.NewTMemoryBufferLen(len(arg170))
		defer mbTrans171.Close()
		_, err172 := mbTrans171.WriteString(arg170)
		if err172 != nil {
			Usage()
			return
		}
		factory173 := thrift.NewTJSONProtocolFactory()
		jsProt174 := factory173.GetProtocol(mbTrans171)
		argvalue0 := user_service.NewUpdateBagRequest()
		err175 := argvalue0.Read(context.Background(), jsProt174)
		if err175 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.UpdateBag(context.Background(), value0))
		fmt.Print("\n")
		break
	case "UpdateBuymenu":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "UpdateBuymenu requires 1 args")
			flag.Usage()
		}
		arg176 := flag.Arg(1)
		mbTrans177 := thrift.NewTMemoryBufferLen(len(arg176))
		defer mbTrans177.Close()
		_, err178 := mbTrans177.WriteString(arg176)
		if err178 != nil {
			Usage()
			return
		}
		factory179 := thrift.NewTJSONProtocolFactory()
		jsProt180 := factory179.GetProtocol(mbTrans177)
		argvalue0 := user_service.NewUpdateBuymenuRequest()
		err181 := argvalue0.Read(context.Background(), jsProt180)
		if err181 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.UpdateBuymenu(context.Background(), value0))
		fmt.Print("\n")
		break
	case "UpdateCosmetics":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "UpdateCosmetics requires 1 args")
			flag.Usage()
		}
		arg182 := flag.Arg(1)
		mbTrans183 := thrift.NewTMemoryBufferLen(len(arg182))
		defer mbTrans183.Close()
		_, err184 := mbTrans183.WriteString(arg182)
		if err184 != nil {
			Usage()
			return
		}
		factory185 := thrift.NewTJSONProtocolFactory()
		jsProt186 := factory185.GetProtocol(mbTrans183)
		argvalue0 := user_service.NewUpdateCosmeticsRequest()
		err187 := argvalue0.Read(context.Background(), jsProt186)
		if err187 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.UpdateCosmetics(context.Background(), value0))
		fmt.Print("\n")
		break
	case "UpdateCampaign":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "UpdateCampaign requires 1 args")
			flag.Usage()
		}
		arg188 := flag.Arg(1)
		mbTrans189 := thrift.NewTMemoryBufferLen(len(arg188))
		defer mbTrans189.Close()
		_, err190 := mbTrans189.WriteString(arg188)
		if err190 != nil {
			Usage()
			return
		}
		factory191 := thrift.NewTJSONProtocolFactory()
		jsProt192 := factory191.GetProtocol(mbTrans189)
		argvalue0 := user_service.NewUpdateCampaignRequest()
		err193 := argvalue0.Read(context.Background(), jsProt192)
		if err193 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.UpdateCampaign(context.Background(), value0))
		fmt.Print("\n")
		break
	case "UpdateOptions":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "UpdateOptions requires 1 args")
			flag.Usage()
		}
		arg194 := flag.Arg(1)
		mbTrans195 := thrift.NewTMemoryBufferLen(len(arg194))
		defer mbTrans195.Close()
		_, err196 := mbTrans195.WriteString(arg194)
		if err196 != nil {
			Usage()
			return
		}
		factory197 := thrift.NewTJSONProtocolFactory()
		jsProt198 := factory197.GetProtocol(mbTrans195)
		argvalue0 := user_service.NewUpdateOptionsRequest()
		err199 := argvalue0.Read(context.Background(), jsProt198)
		if err199 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.UpdateOptions(context.Background(), value0))
		fmt.Print("\n")
		break
	case "UpdateNickName":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "UpdateNickName requires 1 args")
			flag.Usage()
		}
		arg200 := flag.Arg(1)
		mbTrans201 := thrift.NewTMemoryBufferLen(len(arg200))
		defer mbTrans201.Close()
		_, err202 := mbTrans201.WriteString(arg200)
		if err202 != nil {
			Usage()
			return
		}
		factory203 := thrift.NewTJSONProtocolFactory()
		jsProt204 := factory203.GetProtocol(mbTrans201)
		argvalue0 := user_service.NewUpdateNickNameRequest()
		err205 := argvalue0.Read(context.Background(), jsProt204)
		if err205 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.UpdateNickName(context.Background(), value0))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
