// Code generated by Thrift Compiler (0.14.1). DO NOT EDIT.

package user_service

import (
	"bytes"
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"time"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

// Attributes:
//  - MainWeapon
//  - SecondWeapon
//  - Knife
//  - Grenade
type UserLoadout struct {
	MainWeapon   int16 `thrift:"MainWeapon,1,required" db:"MainWeapon" json:"MainWeapon"`
	SecondWeapon int16 `thrift:"SecondWeapon,2,required" db:"SecondWeapon" json:"SecondWeapon"`
	Knife        int16 `thrift:"Knife,3,required" db:"Knife" json:"Knife"`
	Grenade      int16 `thrift:"Grenade,4,required" db:"Grenade" json:"Grenade"`
}

func NewUserLoadout() *UserLoadout {
	return &UserLoadout{}
}

func (p *UserLoadout) GetMainWeapon() int16 {
	return p.MainWeapon
}

func (p *UserLoadout) GetSecondWeapon() int16 {
	return p.SecondWeapon
}

func (p *UserLoadout) GetKnife() int16 {
	return p.Knife
}

func (p *UserLoadout) GetGrenade() int16 {
	return p.Grenade
}
func (p *UserLoadout) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMainWeapon bool = false
	var issetSecondWeapon bool = false
	var issetKnife bool = false
	var issetGrenade bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetMainWeapon = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetSecondWeapon = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
				issetKnife = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
				issetGrenade = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMainWeapon {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MainWeapon is not set"))
	}
	if !issetSecondWeapon {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SecondWeapon is not set"))
	}
	if !issetKnife {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Knife is not set"))
	}
	if !issetGrenade {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Grenade is not set"))
	}
	return nil
}

func (p *UserLoadout) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MainWeapon = v
	}
	return nil
}

func (p *UserLoadout) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SecondWeapon = v
	}
	return nil
}

func (p *UserLoadout) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Knife = v
	}
	return nil
}

func (p *UserLoadout) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Grenade = v
	}
	return nil
}

func (p *UserLoadout) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UserLoadout"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserLoadout) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "MainWeapon", thrift.I16, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:MainWeapon: ", p), err)
	}
	if err := oprot.WriteI16(ctx, int16(p.MainWeapon)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.MainWeapon (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:MainWeapon: ", p), err)
	}
	return err
}

func (p *UserLoadout) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "SecondWeapon", thrift.I16, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:SecondWeapon: ", p), err)
	}
	if err := oprot.WriteI16(ctx, int16(p.SecondWeapon)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SecondWeapon (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:SecondWeapon: ", p), err)
	}
	return err
}

func (p *UserLoadout) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Knife", thrift.I16, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Knife: ", p), err)
	}
	if err := oprot.WriteI16(ctx, int16(p.Knife)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Knife (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Knife: ", p), err)
	}
	return err
}

func (p *UserLoadout) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Grenade", thrift.I16, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Grenade: ", p), err)
	}
	if err := oprot.WriteI16(ctx, int16(p.Grenade)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Grenade (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Grenade: ", p), err)
	}
	return err
}

func (p *UserLoadout) Equals(other *UserLoadout) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.MainWeapon != other.MainWeapon {
		return false
	}
	if p.SecondWeapon != other.SecondWeapon {
		return false
	}
	if p.Knife != other.Knife {
		return false
	}
	if p.Grenade != other.Grenade {
		return false
	}
	return true
}

func (p *UserLoadout) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserLoadout(%+v)", *p)
}

// Attributes:
//  - CosmeticsName
//  - MainWeapon
//  - MainBullet
//  - SecondWeapon
//  - SecondBullet
//  - FlashbangNum
//  - GrenadeID
//  - SmokeNum
//  - DefuserNum
//  - TelescopeNum
//  - BulletproofNum
//  - KnifeID
type UserCosmetics struct {
	CosmeticsName  string `thrift:"CosmeticsName,1,required" db:"CosmeticsName" json:"CosmeticsName"`
	MainWeapon     int16  `thrift:"MainWeapon,2,required" db:"MainWeapon" json:"MainWeapon"`
	MainBullet     int16  `thrift:"MainBullet,3,required" db:"MainBullet" json:"MainBullet"`
	SecondWeapon   int16  `thrift:"SecondWeapon,4,required" db:"SecondWeapon" json:"SecondWeapon"`
	SecondBullet   int16  `thrift:"SecondBullet,5,required" db:"SecondBullet" json:"SecondBullet"`
	FlashbangNum   int16  `thrift:"FlashbangNum,6,required" db:"FlashbangNum" json:"FlashbangNum"`
	GrenadeID      int16  `thrift:"GrenadeID,7,required" db:"GrenadeID" json:"GrenadeID"`
	SmokeNum       int16  `thrift:"SmokeNum,8,required" db:"SmokeNum" json:"SmokeNum"`
	DefuserNum     int16  `thrift:"DefuserNum,9,required" db:"DefuserNum" json:"DefuserNum"`
	TelescopeNum   int16  `thrift:"TelescopeNum,10,required" db:"TelescopeNum" json:"TelescopeNum"`
	BulletproofNum int16  `thrift:"BulletproofNum,11,required" db:"BulletproofNum" json:"BulletproofNum"`
	KnifeID        int16  `thrift:"KnifeID,12,required" db:"KnifeID" json:"KnifeID"`
}

func NewUserCosmetics() *UserCosmetics {
	return &UserCosmetics{}
}

func (p *UserCosmetics) GetCosmeticsName() string {
	return p.CosmeticsName
}

func (p *UserCosmetics) GetMainWeapon() int16 {
	return p.MainWeapon
}

func (p *UserCosmetics) GetMainBullet() int16 {
	return p.MainBullet
}

func (p *UserCosmetics) GetSecondWeapon() int16 {
	return p.SecondWeapon
}

func (p *UserCosmetics) GetSecondBullet() int16 {
	return p.SecondBullet
}

func (p *UserCosmetics) GetFlashbangNum() int16 {
	return p.FlashbangNum
}

func (p *UserCosmetics) GetGrenadeID() int16 {
	return p.GrenadeID
}

func (p *UserCosmetics) GetSmokeNum() int16 {
	return p.SmokeNum
}

func (p *UserCosmetics) GetDefuserNum() int16 {
	return p.DefuserNum
}

func (p *UserCosmetics) GetTelescopeNum() int16 {
	return p.TelescopeNum
}

func (p *UserCosmetics) GetBulletproofNum() int16 {
	return p.BulletproofNum
}

func (p *UserCosmetics) GetKnifeID() int16 {
	return p.KnifeID
}
func (p *UserCosmetics) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetCosmeticsName bool = false
	var issetMainWeapon bool = false
	var issetMainBullet bool = false
	var issetSecondWeapon bool = false
	var issetSecondBullet bool = false
	var issetFlashbangNum bool = false
	var issetGrenadeID bool = false
	var issetSmokeNum bool = false
	var issetDefuserNum bool = false
	var issetTelescopeNum bool = false
	var issetBulletproofNum bool = false
	var issetKnifeID bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetCosmeticsName = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetMainWeapon = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
				issetMainBullet = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
				issetSecondWeapon = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
				issetSecondBullet = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
				issetFlashbangNum = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
				issetGrenadeID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField8(ctx, iprot); err != nil {
					return err
				}
				issetSmokeNum = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField9(ctx, iprot); err != nil {
					return err
				}
				issetDefuserNum = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField10(ctx, iprot); err != nil {
					return err
				}
				issetTelescopeNum = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField11(ctx, iprot); err != nil {
					return err
				}
				issetBulletproofNum = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField12(ctx, iprot); err != nil {
					return err
				}
				issetKnifeID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetCosmeticsName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CosmeticsName is not set"))
	}
	if !issetMainWeapon {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MainWeapon is not set"))
	}
	if !issetMainBullet {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MainBullet is not set"))
	}
	if !issetSecondWeapon {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SecondWeapon is not set"))
	}
	if !issetSecondBullet {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SecondBullet is not set"))
	}
	if !issetFlashbangNum {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field FlashbangNum is not set"))
	}
	if !issetGrenadeID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GrenadeID is not set"))
	}
	if !issetSmokeNum {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SmokeNum is not set"))
	}
	if !issetDefuserNum {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DefuserNum is not set"))
	}
	if !issetTelescopeNum {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TelescopeNum is not set"))
	}
	if !issetBulletproofNum {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BulletproofNum is not set"))
	}
	if !issetKnifeID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field KnifeID is not set"))
	}
	return nil
}

func (p *UserCosmetics) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.CosmeticsName = v
	}
	return nil
}

func (p *UserCosmetics) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MainWeapon = v
	}
	return nil
}

func (p *UserCosmetics) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.MainBullet = v
	}
	return nil
}

func (p *UserCosmetics) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.SecondWeapon = v
	}
	return nil
}

func (p *UserCosmetics) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.SecondBullet = v
	}
	return nil
}

func (p *UserCosmetics) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.FlashbangNum = v
	}
	return nil
}

func (p *UserCosmetics) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.GrenadeID = v
	}
	return nil
}

func (p *UserCosmetics) ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.SmokeNum = v
	}
	return nil
}

func (p *UserCosmetics) ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.DefuserNum = v
	}
	return nil
}

func (p *UserCosmetics) ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.TelescopeNum = v
	}
	return nil
}

func (p *UserCosmetics) ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.BulletproofNum = v
	}
	return nil
}

func (p *UserCosmetics) ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.KnifeID = v
	}
	return nil
}

func (p *UserCosmetics) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UserCosmetics"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField7(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField8(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField9(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField10(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField11(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField12(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserCosmetics) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "CosmeticsName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:CosmeticsName: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.CosmeticsName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.CosmeticsName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:CosmeticsName: ", p), err)
	}
	return err
}

func (p *UserCosmetics) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "MainWeapon", thrift.I16, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:MainWeapon: ", p), err)
	}
	if err := oprot.WriteI16(ctx, int16(p.MainWeapon)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.MainWeapon (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:MainWeapon: ", p), err)
	}
	return err
}

func (p *UserCosmetics) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "MainBullet", thrift.I16, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:MainBullet: ", p), err)
	}
	if err := oprot.WriteI16(ctx, int16(p.MainBullet)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.MainBullet (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:MainBullet: ", p), err)
	}
	return err
}

func (p *UserCosmetics) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "SecondWeapon", thrift.I16, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:SecondWeapon: ", p), err)
	}
	if err := oprot.WriteI16(ctx, int16(p.SecondWeapon)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SecondWeapon (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:SecondWeapon: ", p), err)
	}
	return err
}

func (p *UserCosmetics) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "SecondBullet", thrift.I16, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:SecondBullet: ", p), err)
	}
	if err := oprot.WriteI16(ctx, int16(p.SecondBullet)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SecondBullet (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:SecondBullet: ", p), err)
	}
	return err
}

func (p *UserCosmetics) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "FlashbangNum", thrift.I16, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:FlashbangNum: ", p), err)
	}
	if err := oprot.WriteI16(ctx, int16(p.FlashbangNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.FlashbangNum (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:FlashbangNum: ", p), err)
	}
	return err
}

func (p *UserCosmetics) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "GrenadeID", thrift.I16, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:GrenadeID: ", p), err)
	}
	if err := oprot.WriteI16(ctx, int16(p.GrenadeID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.GrenadeID (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:GrenadeID: ", p), err)
	}
	return err
}

func (p *UserCosmetics) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "SmokeNum", thrift.I16, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:SmokeNum: ", p), err)
	}
	if err := oprot.WriteI16(ctx, int16(p.SmokeNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SmokeNum (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:SmokeNum: ", p), err)
	}
	return err
}

func (p *UserCosmetics) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "DefuserNum", thrift.I16, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:DefuserNum: ", p), err)
	}
	if err := oprot.WriteI16(ctx, int16(p.DefuserNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.DefuserNum (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:DefuserNum: ", p), err)
	}
	return err
}

func (p *UserCosmetics) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "TelescopeNum", thrift.I16, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:TelescopeNum: ", p), err)
	}
	if err := oprot.WriteI16(ctx, int16(p.TelescopeNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.TelescopeNum (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:TelescopeNum: ", p), err)
	}
	return err
}

func (p *UserCosmetics) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "BulletproofNum", thrift.I16, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:BulletproofNum: ", p), err)
	}
	if err := oprot.WriteI16(ctx, int16(p.BulletproofNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.BulletproofNum (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:BulletproofNum: ", p), err)
	}
	return err
}

func (p *UserCosmetics) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "KnifeID", thrift.I16, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:KnifeID: ", p), err)
	}
	if err := oprot.WriteI16(ctx, int16(p.KnifeID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.KnifeID (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:KnifeID: ", p), err)
	}
	return err
}

func (p *UserCosmetics) Equals(other *UserCosmetics) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.CosmeticsName != other.CosmeticsName {
		return false
	}
	if p.MainWeapon != other.MainWeapon {
		return false
	}
	if p.MainBullet != other.MainBullet {
		return false
	}
	if p.SecondWeapon != other.SecondWeapon {
		return false
	}
	if p.SecondBullet != other.SecondBullet {
		return false
	}
	if p.FlashbangNum != other.FlashbangNum {
		return false
	}
	if p.GrenadeID != other.GrenadeID {
		return false
	}
	if p.SmokeNum != other.SmokeNum {
		return false
	}
	if p.DefuserNum != other.DefuserNum {
		return false
	}
	if p.TelescopeNum != other.TelescopeNum {
		return false
	}
	if p.BulletproofNum != other.BulletproofNum {
		return false
	}
	if p.KnifeID != other.KnifeID {
		return false
	}
	return true
}

func (p *UserCosmetics) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserCosmetics(%+v)", *p)
}

// Attributes:
//  - PistolsTR
//  - ShotgunsTR
//  - SmgsTR
//  - RiflesTR
//  - ClassesTR
//  - MachinegunsTR
//  - MeleesTR
//  - EquipmentTR
//  - PistolsCT
//  - ShotgunsCT
//  - SmgsCT
//  - RiflesCT
//  - ClassesCT
//  - MachinegunsCT
//  - MeleesCT
//  - EquipmentCT
type UserBuyMenu struct {
	PistolsTR     []int16 `thrift:"PistolsTR,1,required" db:"PistolsTR" json:"PistolsTR"`
	ShotgunsTR    []int16 `thrift:"ShotgunsTR,2,required" db:"ShotgunsTR" json:"ShotgunsTR"`
	SmgsTR        []int16 `thrift:"SmgsTR,3,required" db:"SmgsTR" json:"SmgsTR"`
	RiflesTR      []int16 `thrift:"RiflesTR,4,required" db:"RiflesTR" json:"RiflesTR"`
	ClassesTR     []int16 `thrift:"ClassesTR,5,required" db:"ClassesTR" json:"ClassesTR"`
	MachinegunsTR []int16 `thrift:"MachinegunsTR,6,required" db:"MachinegunsTR" json:"MachinegunsTR"`
	MeleesTR      []int16 `thrift:"MeleesTR,7,required" db:"MeleesTR" json:"MeleesTR"`
	EquipmentTR   []int16 `thrift:"EquipmentTR,8,required" db:"EquipmentTR" json:"EquipmentTR"`
	PistolsCT     []int16 `thrift:"PistolsCT,9,required" db:"PistolsCT" json:"PistolsCT"`
	ShotgunsCT    []int16 `thrift:"ShotgunsCT,10,required" db:"ShotgunsCT" json:"ShotgunsCT"`
	SmgsCT        []int16 `thrift:"SmgsCT,11,required" db:"SmgsCT" json:"SmgsCT"`
	RiflesCT      []int16 `thrift:"RiflesCT,12,required" db:"RiflesCT" json:"RiflesCT"`
	ClassesCT     []int16 `thrift:"ClassesCT,13,required" db:"ClassesCT" json:"ClassesCT"`
	MachinegunsCT []int16 `thrift:"MachinegunsCT,14,required" db:"MachinegunsCT" json:"MachinegunsCT"`
	MeleesCT      []int16 `thrift:"MeleesCT,15,required" db:"MeleesCT" json:"MeleesCT"`
	EquipmentCT   []int16 `thrift:"EquipmentCT,16,required" db:"EquipmentCT" json:"EquipmentCT"`
}

func NewUserBuyMenu() *UserBuyMenu {
	return &UserBuyMenu{}
}

func (p *UserBuyMenu) GetPistolsTR() []int16 {
	return p.PistolsTR
}

func (p *UserBuyMenu) GetShotgunsTR() []int16 {
	return p.ShotgunsTR
}

func (p *UserBuyMenu) GetSmgsTR() []int16 {
	return p.SmgsTR
}

func (p *UserBuyMenu) GetRiflesTR() []int16 {
	return p.RiflesTR
}

func (p *UserBuyMenu) GetClassesTR() []int16 {
	return p.ClassesTR
}

func (p *UserBuyMenu) GetMachinegunsTR() []int16 {
	return p.MachinegunsTR
}

func (p *UserBuyMenu) GetMeleesTR() []int16 {
	return p.MeleesTR
}

func (p *UserBuyMenu) GetEquipmentTR() []int16 {
	return p.EquipmentTR
}

func (p *UserBuyMenu) GetPistolsCT() []int16 {
	return p.PistolsCT
}

func (p *UserBuyMenu) GetShotgunsCT() []int16 {
	return p.ShotgunsCT
}

func (p *UserBuyMenu) GetSmgsCT() []int16 {
	return p.SmgsCT
}

func (p *UserBuyMenu) GetRiflesCT() []int16 {
	return p.RiflesCT
}

func (p *UserBuyMenu) GetClassesCT() []int16 {
	return p.ClassesCT
}

func (p *UserBuyMenu) GetMachinegunsCT() []int16 {
	return p.MachinegunsCT
}

func (p *UserBuyMenu) GetMeleesCT() []int16 {
	return p.MeleesCT
}

func (p *UserBuyMenu) GetEquipmentCT() []int16 {
	return p.EquipmentCT
}
func (p *UserBuyMenu) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetPistolsTR bool = false
	var issetShotgunsTR bool = false
	var issetSmgsTR bool = false
	var issetRiflesTR bool = false
	var issetClassesTR bool = false
	var issetMachinegunsTR bool = false
	var issetMeleesTR bool = false
	var issetEquipmentTR bool = false
	var issetPistolsCT bool = false
	var issetShotgunsCT bool = false
	var issetSmgsCT bool = false
	var issetRiflesCT bool = false
	var issetClassesCT bool = false
	var issetMachinegunsCT bool = false
	var issetMeleesCT bool = false
	var issetEquipmentCT bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetPistolsTR = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetShotgunsTR = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
				issetSmgsTR = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
				issetRiflesTR = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
				issetClassesTR = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
				issetMachinegunsTR = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
				issetMeleesTR = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField8(ctx, iprot); err != nil {
					return err
				}
				issetEquipmentTR = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField9(ctx, iprot); err != nil {
					return err
				}
				issetPistolsCT = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField10(ctx, iprot); err != nil {
					return err
				}
				issetShotgunsCT = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField11(ctx, iprot); err != nil {
					return err
				}
				issetSmgsCT = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField12(ctx, iprot); err != nil {
					return err
				}
				issetRiflesCT = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 13:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField13(ctx, iprot); err != nil {
					return err
				}
				issetClassesCT = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 14:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField14(ctx, iprot); err != nil {
					return err
				}
				issetMachinegunsCT = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 15:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField15(ctx, iprot); err != nil {
					return err
				}
				issetMeleesCT = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 16:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField16(ctx, iprot); err != nil {
					return err
				}
				issetEquipmentCT = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetPistolsTR {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PistolsTR is not set"))
	}
	if !issetShotgunsTR {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ShotgunsTR is not set"))
	}
	if !issetSmgsTR {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SmgsTR is not set"))
	}
	if !issetRiflesTR {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RiflesTR is not set"))
	}
	if !issetClassesTR {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ClassesTR is not set"))
	}
	if !issetMachinegunsTR {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MachinegunsTR is not set"))
	}
	if !issetMeleesTR {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MeleesTR is not set"))
	}
	if !issetEquipmentTR {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field EquipmentTR is not set"))
	}
	if !issetPistolsCT {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PistolsCT is not set"))
	}
	if !issetShotgunsCT {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ShotgunsCT is not set"))
	}
	if !issetSmgsCT {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SmgsCT is not set"))
	}
	if !issetRiflesCT {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RiflesCT is not set"))
	}
	if !issetClassesCT {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ClassesCT is not set"))
	}
	if !issetMachinegunsCT {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MachinegunsCT is not set"))
	}
	if !issetMeleesCT {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MeleesCT is not set"))
	}
	if !issetEquipmentCT {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field EquipmentCT is not set"))
	}
	return nil
}

func (p *UserBuyMenu) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int16, 0, size)
	p.PistolsTR = tSlice
	for i := 0; i < size; i++ {
		var _elem0 int16
		if v, err := iprot.ReadI16(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem0 = v
		}
		p.PistolsTR = append(p.PistolsTR, _elem0)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UserBuyMenu) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int16, 0, size)
	p.ShotgunsTR = tSlice
	for i := 0; i < size; i++ {
		var _elem1 int16
		if v, err := iprot.ReadI16(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem1 = v
		}
		p.ShotgunsTR = append(p.ShotgunsTR, _elem1)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UserBuyMenu) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int16, 0, size)
	p.SmgsTR = tSlice
	for i := 0; i < size; i++ {
		var _elem2 int16
		if v, err := iprot.ReadI16(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem2 = v
		}
		p.SmgsTR = append(p.SmgsTR, _elem2)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UserBuyMenu) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int16, 0, size)
	p.RiflesTR = tSlice
	for i := 0; i < size; i++ {
		var _elem3 int16
		if v, err := iprot.ReadI16(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem3 = v
		}
		p.RiflesTR = append(p.RiflesTR, _elem3)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UserBuyMenu) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int16, 0, size)
	p.ClassesTR = tSlice
	for i := 0; i < size; i++ {
		var _elem4 int16
		if v, err := iprot.ReadI16(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem4 = v
		}
		p.ClassesTR = append(p.ClassesTR, _elem4)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UserBuyMenu) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int16, 0, size)
	p.MachinegunsTR = tSlice
	for i := 0; i < size; i++ {
		var _elem5 int16
		if v, err := iprot.ReadI16(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem5 = v
		}
		p.MachinegunsTR = append(p.MachinegunsTR, _elem5)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UserBuyMenu) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int16, 0, size)
	p.MeleesTR = tSlice
	for i := 0; i < size; i++ {
		var _elem6 int16
		if v, err := iprot.ReadI16(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem6 = v
		}
		p.MeleesTR = append(p.MeleesTR, _elem6)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UserBuyMenu) ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int16, 0, size)
	p.EquipmentTR = tSlice
	for i := 0; i < size; i++ {
		var _elem7 int16
		if v, err := iprot.ReadI16(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem7 = v
		}
		p.EquipmentTR = append(p.EquipmentTR, _elem7)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UserBuyMenu) ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int16, 0, size)
	p.PistolsCT = tSlice
	for i := 0; i < size; i++ {
		var _elem8 int16
		if v, err := iprot.ReadI16(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem8 = v
		}
		p.PistolsCT = append(p.PistolsCT, _elem8)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UserBuyMenu) ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int16, 0, size)
	p.ShotgunsCT = tSlice
	for i := 0; i < size; i++ {
		var _elem9 int16
		if v, err := iprot.ReadI16(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem9 = v
		}
		p.ShotgunsCT = append(p.ShotgunsCT, _elem9)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UserBuyMenu) ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int16, 0, size)
	p.SmgsCT = tSlice
	for i := 0; i < size; i++ {
		var _elem10 int16
		if v, err := iprot.ReadI16(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem10 = v
		}
		p.SmgsCT = append(p.SmgsCT, _elem10)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UserBuyMenu) ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int16, 0, size)
	p.RiflesCT = tSlice
	for i := 0; i < size; i++ {
		var _elem11 int16
		if v, err := iprot.ReadI16(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem11 = v
		}
		p.RiflesCT = append(p.RiflesCT, _elem11)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UserBuyMenu) ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int16, 0, size)
	p.ClassesCT = tSlice
	for i := 0; i < size; i++ {
		var _elem12 int16
		if v, err := iprot.ReadI16(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem12 = v
		}
		p.ClassesCT = append(p.ClassesCT, _elem12)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UserBuyMenu) ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int16, 0, size)
	p.MachinegunsCT = tSlice
	for i := 0; i < size; i++ {
		var _elem13 int16
		if v, err := iprot.ReadI16(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem13 = v
		}
		p.MachinegunsCT = append(p.MachinegunsCT, _elem13)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UserBuyMenu) ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int16, 0, size)
	p.MeleesCT = tSlice
	for i := 0; i < size; i++ {
		var _elem14 int16
		if v, err := iprot.ReadI16(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem14 = v
		}
		p.MeleesCT = append(p.MeleesCT, _elem14)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UserBuyMenu) ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int16, 0, size)
	p.EquipmentCT = tSlice
	for i := 0; i < size; i++ {
		var _elem15 int16
		if v, err := iprot.ReadI16(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem15 = v
		}
		p.EquipmentCT = append(p.EquipmentCT, _elem15)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UserBuyMenu) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UserBuyMenu"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField7(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField8(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField9(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField10(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField11(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField12(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField13(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField14(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField15(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField16(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserBuyMenu) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "PistolsTR", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:PistolsTR: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.I16, len(p.PistolsTR)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.PistolsTR {
		if err := oprot.WriteI16(ctx, int16(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:PistolsTR: ", p), err)
	}
	return err
}

func (p *UserBuyMenu) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ShotgunsTR", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ShotgunsTR: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.I16, len(p.ShotgunsTR)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ShotgunsTR {
		if err := oprot.WriteI16(ctx, int16(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ShotgunsTR: ", p), err)
	}
	return err
}

func (p *UserBuyMenu) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "SmgsTR", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:SmgsTR: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.I16, len(p.SmgsTR)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.SmgsTR {
		if err := oprot.WriteI16(ctx, int16(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:SmgsTR: ", p), err)
	}
	return err
}

func (p *UserBuyMenu) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "RiflesTR", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:RiflesTR: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.I16, len(p.RiflesTR)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.RiflesTR {
		if err := oprot.WriteI16(ctx, int16(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:RiflesTR: ", p), err)
	}
	return err
}

func (p *UserBuyMenu) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ClassesTR", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ClassesTR: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.I16, len(p.ClassesTR)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ClassesTR {
		if err := oprot.WriteI16(ctx, int16(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ClassesTR: ", p), err)
	}
	return err
}

func (p *UserBuyMenu) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "MachinegunsTR", thrift.LIST, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:MachinegunsTR: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.I16, len(p.MachinegunsTR)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.MachinegunsTR {
		if err := oprot.WriteI16(ctx, int16(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:MachinegunsTR: ", p), err)
	}
	return err
}

func (p *UserBuyMenu) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "MeleesTR", thrift.LIST, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:MeleesTR: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.I16, len(p.MeleesTR)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.MeleesTR {
		if err := oprot.WriteI16(ctx, int16(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:MeleesTR: ", p), err)
	}
	return err
}

func (p *UserBuyMenu) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "EquipmentTR", thrift.LIST, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:EquipmentTR: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.I16, len(p.EquipmentTR)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.EquipmentTR {
		if err := oprot.WriteI16(ctx, int16(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:EquipmentTR: ", p), err)
	}
	return err
}

func (p *UserBuyMenu) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "PistolsCT", thrift.LIST, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:PistolsCT: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.I16, len(p.PistolsCT)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.PistolsCT {
		if err := oprot.WriteI16(ctx, int16(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:PistolsCT: ", p), err)
	}
	return err
}

func (p *UserBuyMenu) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ShotgunsCT", thrift.LIST, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:ShotgunsCT: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.I16, len(p.ShotgunsCT)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ShotgunsCT {
		if err := oprot.WriteI16(ctx, int16(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:ShotgunsCT: ", p), err)
	}
	return err
}

func (p *UserBuyMenu) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "SmgsCT", thrift.LIST, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:SmgsCT: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.I16, len(p.SmgsCT)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.SmgsCT {
		if err := oprot.WriteI16(ctx, int16(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:SmgsCT: ", p), err)
	}
	return err
}

func (p *UserBuyMenu) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "RiflesCT", thrift.LIST, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:RiflesCT: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.I16, len(p.RiflesCT)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.RiflesCT {
		if err := oprot.WriteI16(ctx, int16(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:RiflesCT: ", p), err)
	}
	return err
}

func (p *UserBuyMenu) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ClassesCT", thrift.LIST, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:ClassesCT: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.I16, len(p.ClassesCT)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ClassesCT {
		if err := oprot.WriteI16(ctx, int16(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:ClassesCT: ", p), err)
	}
	return err
}

func (p *UserBuyMenu) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "MachinegunsCT", thrift.LIST, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:MachinegunsCT: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.I16, len(p.MachinegunsCT)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.MachinegunsCT {
		if err := oprot.WriteI16(ctx, int16(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:MachinegunsCT: ", p), err)
	}
	return err
}

func (p *UserBuyMenu) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "MeleesCT", thrift.LIST, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:MeleesCT: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.I16, len(p.MeleesCT)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.MeleesCT {
		if err := oprot.WriteI16(ctx, int16(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:MeleesCT: ", p), err)
	}
	return err
}

func (p *UserBuyMenu) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "EquipmentCT", thrift.LIST, 16); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:EquipmentCT: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.I16, len(p.EquipmentCT)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.EquipmentCT {
		if err := oprot.WriteI16(ctx, int16(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 16:EquipmentCT: ", p), err)
	}
	return err
}

func (p *UserBuyMenu) Equals(other *UserBuyMenu) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.PistolsTR) != len(other.PistolsTR) {
		return false
	}
	for i, _tgt := range p.PistolsTR {
		_src16 := other.PistolsTR[i]
		if _tgt != _src16 {
			return false
		}
	}
	if len(p.ShotgunsTR) != len(other.ShotgunsTR) {
		return false
	}
	for i, _tgt := range p.ShotgunsTR {
		_src17 := other.ShotgunsTR[i]
		if _tgt != _src17 {
			return false
		}
	}
	if len(p.SmgsTR) != len(other.SmgsTR) {
		return false
	}
	for i, _tgt := range p.SmgsTR {
		_src18 := other.SmgsTR[i]
		if _tgt != _src18 {
			return false
		}
	}
	if len(p.RiflesTR) != len(other.RiflesTR) {
		return false
	}
	for i, _tgt := range p.RiflesTR {
		_src19 := other.RiflesTR[i]
		if _tgt != _src19 {
			return false
		}
	}
	if len(p.ClassesTR) != len(other.ClassesTR) {
		return false
	}
	for i, _tgt := range p.ClassesTR {
		_src20 := other.ClassesTR[i]
		if _tgt != _src20 {
			return false
		}
	}
	if len(p.MachinegunsTR) != len(other.MachinegunsTR) {
		return false
	}
	for i, _tgt := range p.MachinegunsTR {
		_src21 := other.MachinegunsTR[i]
		if _tgt != _src21 {
			return false
		}
	}
	if len(p.MeleesTR) != len(other.MeleesTR) {
		return false
	}
	for i, _tgt := range p.MeleesTR {
		_src22 := other.MeleesTR[i]
		if _tgt != _src22 {
			return false
		}
	}
	if len(p.EquipmentTR) != len(other.EquipmentTR) {
		return false
	}
	for i, _tgt := range p.EquipmentTR {
		_src23 := other.EquipmentTR[i]
		if _tgt != _src23 {
			return false
		}
	}
	if len(p.PistolsCT) != len(other.PistolsCT) {
		return false
	}
	for i, _tgt := range p.PistolsCT {
		_src24 := other.PistolsCT[i]
		if _tgt != _src24 {
			return false
		}
	}
	if len(p.ShotgunsCT) != len(other.ShotgunsCT) {
		return false
	}
	for i, _tgt := range p.ShotgunsCT {
		_src25 := other.ShotgunsCT[i]
		if _tgt != _src25 {
			return false
		}
	}
	if len(p.SmgsCT) != len(other.SmgsCT) {
		return false
	}
	for i, _tgt := range p.SmgsCT {
		_src26 := other.SmgsCT[i]
		if _tgt != _src26 {
			return false
		}
	}
	if len(p.RiflesCT) != len(other.RiflesCT) {
		return false
	}
	for i, _tgt := range p.RiflesCT {
		_src27 := other.RiflesCT[i]
		if _tgt != _src27 {
			return false
		}
	}
	if len(p.ClassesCT) != len(other.ClassesCT) {
		return false
	}
	for i, _tgt := range p.ClassesCT {
		_src28 := other.ClassesCT[i]
		if _tgt != _src28 {
			return false
		}
	}
	if len(p.MachinegunsCT) != len(other.MachinegunsCT) {
		return false
	}
	for i, _tgt := range p.MachinegunsCT {
		_src29 := other.MachinegunsCT[i]
		if _tgt != _src29 {
			return false
		}
	}
	if len(p.MeleesCT) != len(other.MeleesCT) {
		return false
	}
	for i, _tgt := range p.MeleesCT {
		_src30 := other.MeleesCT[i]
		if _tgt != _src30 {
			return false
		}
	}
	if len(p.EquipmentCT) != len(other.EquipmentCT) {
		return false
	}
	for i, _tgt := range p.EquipmentCT {
		_src31 := other.EquipmentCT[i]
		if _tgt != _src31 {
			return false
		}
	}
	return true
}

func (p *UserBuyMenu) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserBuyMenu(%+v)", *p)
}

// Attributes:
//  - ID
//  - Count
//  - Existed
//  - Type
//  - Time
type UserInventoryItem struct {
	ID      int16 `thrift:"Id,1,required" db:"Id" json:"Id"`
	Count   int16 `thrift:"Count,2,required" db:"Count" json:"Count"`
	Existed int8  `thrift:"Existed,3,required" db:"Existed" json:"Existed"`
	Type    int8  `thrift:"Type,4,required" db:"Type" json:"Type"`
	Time    int32 `thrift:"Time,5,required" db:"Time" json:"Time"`
}

func NewUserInventoryItem() *UserInventoryItem {
	return &UserInventoryItem{}
}

func (p *UserInventoryItem) GetID() int16 {
	return p.ID
}

func (p *UserInventoryItem) GetCount() int16 {
	return p.Count
}

func (p *UserInventoryItem) GetExisted() int8 {
	return p.Existed
}

func (p *UserInventoryItem) GetType() int8 {
	return p.Type
}

func (p *UserInventoryItem) GetTime() int32 {
	return p.Time
}
func (p *UserInventoryItem) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false
	var issetCount bool = false
	var issetExisted bool = false
	var issetType bool = false
	var issetTime bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetCount = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
				issetExisted = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
				issetType = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
				issetTime = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	if !issetCount {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Count is not set"))
	}
	if !issetExisted {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Existed is not set"))
	}
	if !issetType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"))
	}
	if !issetTime {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Time is not set"))
	}
	return nil
}

func (p *UserInventoryItem) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *UserInventoryItem) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Count = v
	}
	return nil
}

func (p *UserInventoryItem) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := int8(v)
		p.Existed = temp
	}
	return nil
}

func (p *UserInventoryItem) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := int8(v)
		p.Type = temp
	}
	return nil
}

func (p *UserInventoryItem) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Time = v
	}
	return nil
}

func (p *UserInventoryItem) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UserInventoryItem"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInventoryItem) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Id", thrift.I16, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Id: ", p), err)
	}
	if err := oprot.WriteI16(ctx, int16(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Id: ", p), err)
	}
	return err
}

func (p *UserInventoryItem) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Count", thrift.I16, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Count: ", p), err)
	}
	if err := oprot.WriteI16(ctx, int16(p.Count)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Count (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Count: ", p), err)
	}
	return err
}

func (p *UserInventoryItem) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Existed", thrift.BYTE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Existed: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.Existed)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Existed (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Existed: ", p), err)
	}
	return err
}

func (p *UserInventoryItem) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Type", thrift.BYTE, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Type: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Type (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Type: ", p), err)
	}
	return err
}

func (p *UserInventoryItem) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Time", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Time: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Time)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Time (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Time: ", p), err)
	}
	return err
}

func (p *UserInventoryItem) Equals(other *UserInventoryItem) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.ID != other.ID {
		return false
	}
	if p.Count != other.Count {
		return false
	}
	if p.Existed != other.Existed {
		return false
	}
	if p.Type != other.Type {
		return false
	}
	if p.Time != other.Time {
		return false
	}
	return true
}

func (p *UserInventoryItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInventoryItem(%+v)", *p)
}

// Attributes:
//  - Items
//  - BuyMenu
//  - Loadouts
//  - Cosmetics
type Inventory struct {
	Items     []*UserInventoryItem `thrift:"Items,1,required" db:"Items" json:"Items"`
	BuyMenu   *UserBuyMenu         `thrift:"BuyMenu,2,required" db:"BuyMenu" json:"BuyMenu"`
	Loadouts  []*UserLoadout       `thrift:"Loadouts,3,required" db:"Loadouts" json:"Loadouts"`
	Cosmetics []*UserCosmetics     `thrift:"Cosmetics,4,required" db:"Cosmetics" json:"Cosmetics"`
}

func NewInventory() *Inventory {
	return &Inventory{}
}

func (p *Inventory) GetItems() []*UserInventoryItem {
	return p.Items
}

var Inventory_BuyMenu_DEFAULT *UserBuyMenu

func (p *Inventory) GetBuyMenu() *UserBuyMenu {
	if !p.IsSetBuyMenu() {
		return Inventory_BuyMenu_DEFAULT
	}
	return p.BuyMenu
}

func (p *Inventory) GetLoadouts() []*UserLoadout {
	return p.Loadouts
}

func (p *Inventory) GetCosmetics() []*UserCosmetics {
	return p.Cosmetics
}
func (p *Inventory) IsSetBuyMenu() bool {
	return p.BuyMenu != nil
}

func (p *Inventory) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetItems bool = false
	var issetBuyMenu bool = false
	var issetLoadouts bool = false
	var issetCosmetics bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetItems = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetBuyMenu = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
				issetLoadouts = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
				issetCosmetics = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetItems {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Items is not set"))
	}
	if !issetBuyMenu {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BuyMenu is not set"))
	}
	if !issetLoadouts {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Loadouts is not set"))
	}
	if !issetCosmetics {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Cosmetics is not set"))
	}
	return nil
}

func (p *Inventory) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*UserInventoryItem, 0, size)
	p.Items = tSlice
	for i := 0; i < size; i++ {
		_elem32 := &UserInventoryItem{}
		if err := _elem32.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem32), err)
		}
		p.Items = append(p.Items, _elem32)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Inventory) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.BuyMenu = &UserBuyMenu{}
	if err := p.BuyMenu.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BuyMenu), err)
	}
	return nil
}

func (p *Inventory) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*UserLoadout, 0, size)
	p.Loadouts = tSlice
	for i := 0; i < size; i++ {
		_elem33 := &UserLoadout{}
		if err := _elem33.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem33), err)
		}
		p.Loadouts = append(p.Loadouts, _elem33)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Inventory) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*UserCosmetics, 0, size)
	p.Cosmetics = tSlice
	for i := 0; i < size; i++ {
		_elem34 := &UserCosmetics{}
		if err := _elem34.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem34), err)
		}
		p.Cosmetics = append(p.Cosmetics, _elem34)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Inventory) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Inventory"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Inventory) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Items", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Items: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Items)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Items {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Items: ", p), err)
	}
	return err
}

func (p *Inventory) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "BuyMenu", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:BuyMenu: ", p), err)
	}
	if err := p.BuyMenu.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BuyMenu), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:BuyMenu: ", p), err)
	}
	return err
}

func (p *Inventory) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Loadouts", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Loadouts: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Loadouts)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Loadouts {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Loadouts: ", p), err)
	}
	return err
}

func (p *Inventory) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Cosmetics", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Cosmetics: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Cosmetics)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Cosmetics {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Cosmetics: ", p), err)
	}
	return err
}

func (p *Inventory) Equals(other *Inventory) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.Items) != len(other.Items) {
		return false
	}
	for i, _tgt := range p.Items {
		_src35 := other.Items[i]
		if !_tgt.Equals(_src35) {
			return false
		}
	}
	if !p.BuyMenu.Equals(other.BuyMenu) {
		return false
	}
	if len(p.Loadouts) != len(other.Loadouts) {
		return false
	}
	for i, _tgt := range p.Loadouts {
		_src36 := other.Loadouts[i]
		if !_tgt.Equals(_src36) {
			return false
		}
	}
	if len(p.Cosmetics) != len(other.Cosmetics) {
		return false
	}
	for i, _tgt := range p.Cosmetics {
		_src37 := other.Cosmetics[i]
		if !_tgt.Equals(_src37) {
			return false
		}
	}
	return true
}

func (p *Inventory) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Inventory(%+v)", *p)
}

// Attributes:
//  - ExternalIpAddress
//  - ExternalClientPort
//  - ExternalServerPort
//  - LocalIpAddress
//  - LocalClientPort
//  - LocalServerPort
type UserNetInfo struct {
	ExternalIpAddress  int32 `thrift:"ExternalIpAddress,1,required" db:"ExternalIpAddress" json:"ExternalIpAddress"`
	ExternalClientPort int16 `thrift:"ExternalClientPort,2,required" db:"ExternalClientPort" json:"ExternalClientPort"`
	ExternalServerPort int16 `thrift:"ExternalServerPort,3,required" db:"ExternalServerPort" json:"ExternalServerPort"`
	LocalIpAddress     int32 `thrift:"LocalIpAddress,4,required" db:"LocalIpAddress" json:"LocalIpAddress"`
	LocalClientPort    int16 `thrift:"LocalClientPort,5,required" db:"LocalClientPort" json:"LocalClientPort"`
	LocalServerPort    int16 `thrift:"LocalServerPort,6,required" db:"LocalServerPort" json:"LocalServerPort"`
}

func NewUserNetInfo() *UserNetInfo {
	return &UserNetInfo{}
}

func (p *UserNetInfo) GetExternalIpAddress() int32 {
	return p.ExternalIpAddress
}

func (p *UserNetInfo) GetExternalClientPort() int16 {
	return p.ExternalClientPort
}

func (p *UserNetInfo) GetExternalServerPort() int16 {
	return p.ExternalServerPort
}

func (p *UserNetInfo) GetLocalIpAddress() int32 {
	return p.LocalIpAddress
}

func (p *UserNetInfo) GetLocalClientPort() int16 {
	return p.LocalClientPort
}

func (p *UserNetInfo) GetLocalServerPort() int16 {
	return p.LocalServerPort
}
func (p *UserNetInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetExternalIpAddress bool = false
	var issetExternalClientPort bool = false
	var issetExternalServerPort bool = false
	var issetLocalIpAddress bool = false
	var issetLocalClientPort bool = false
	var issetLocalServerPort bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetExternalIpAddress = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetExternalClientPort = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
				issetExternalServerPort = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
				issetLocalIpAddress = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
				issetLocalClientPort = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
				issetLocalServerPort = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetExternalIpAddress {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ExternalIpAddress is not set"))
	}
	if !issetExternalClientPort {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ExternalClientPort is not set"))
	}
	if !issetExternalServerPort {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ExternalServerPort is not set"))
	}
	if !issetLocalIpAddress {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LocalIpAddress is not set"))
	}
	if !issetLocalClientPort {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LocalClientPort is not set"))
	}
	if !issetLocalServerPort {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LocalServerPort is not set"))
	}
	return nil
}

func (p *UserNetInfo) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ExternalIpAddress = v
	}
	return nil
}

func (p *UserNetInfo) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ExternalClientPort = v
	}
	return nil
}

func (p *UserNetInfo) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ExternalServerPort = v
	}
	return nil
}

func (p *UserNetInfo) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.LocalIpAddress = v
	}
	return nil
}

func (p *UserNetInfo) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.LocalClientPort = v
	}
	return nil
}

func (p *UserNetInfo) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.LocalServerPort = v
	}
	return nil
}

func (p *UserNetInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UserNetInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserNetInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ExternalIpAddress", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ExternalIpAddress: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.ExternalIpAddress)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ExternalIpAddress (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ExternalIpAddress: ", p), err)
	}
	return err
}

func (p *UserNetInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ExternalClientPort", thrift.I16, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ExternalClientPort: ", p), err)
	}
	if err := oprot.WriteI16(ctx, int16(p.ExternalClientPort)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ExternalClientPort (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ExternalClientPort: ", p), err)
	}
	return err
}

func (p *UserNetInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ExternalServerPort", thrift.I16, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ExternalServerPort: ", p), err)
	}
	if err := oprot.WriteI16(ctx, int16(p.ExternalServerPort)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ExternalServerPort (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ExternalServerPort: ", p), err)
	}
	return err
}

func (p *UserNetInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "LocalIpAddress", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:LocalIpAddress: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.LocalIpAddress)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.LocalIpAddress (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:LocalIpAddress: ", p), err)
	}
	return err
}

func (p *UserNetInfo) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "LocalClientPort", thrift.I16, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:LocalClientPort: ", p), err)
	}
	if err := oprot.WriteI16(ctx, int16(p.LocalClientPort)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.LocalClientPort (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:LocalClientPort: ", p), err)
	}
	return err
}

func (p *UserNetInfo) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "LocalServerPort", thrift.I16, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:LocalServerPort: ", p), err)
	}
	if err := oprot.WriteI16(ctx, int16(p.LocalServerPort)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.LocalServerPort (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:LocalServerPort: ", p), err)
	}
	return err
}

func (p *UserNetInfo) Equals(other *UserNetInfo) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.ExternalIpAddress != other.ExternalIpAddress {
		return false
	}
	if p.ExternalClientPort != other.ExternalClientPort {
		return false
	}
	if p.ExternalServerPort != other.ExternalServerPort {
		return false
	}
	if p.LocalIpAddress != other.LocalIpAddress {
		return false
	}
	if p.LocalClientPort != other.LocalClientPort {
		return false
	}
	if p.LocalServerPort != other.LocalServerPort {
		return false
	}
	return true
}

func (p *UserNetInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserNetInfo(%+v)", *p)
}

// Attributes:
//  - UserID
//  - UserName
//  - NickName
//  - Level
//  - CurrentEXP
//  - MaxEXP
//  - Points
//  - PlayedMatches
//  - Wins
//  - Kills
//  - Deaths
//  - Cash
//  - Campaign
//  - NetInfo
//  - UserInventory
//  - Friends
//  - Rank
//  - ChatTimes
//  - Options
type UserInfo struct {
	UserID        int32        `thrift:"UserID,1,required" db:"UserID" json:"UserID"`
	UserName      string       `thrift:"UserName,2,required" db:"UserName" json:"UserName"`
	NickName      string       `thrift:"NickName,3,required" db:"NickName" json:"NickName"`
	Level         int8         `thrift:"Level,4,required" db:"Level" json:"Level"`
	CurrentEXP    int64        `thrift:"CurrentEXP,5,required" db:"CurrentEXP" json:"CurrentEXP"`
	MaxEXP        int64        `thrift:"MaxEXP,6,required" db:"MaxEXP" json:"MaxEXP"`
	Points        int64        `thrift:"Points,7,required" db:"Points" json:"Points"`
	PlayedMatches int32        `thrift:"PlayedMatches,8,required" db:"PlayedMatches" json:"PlayedMatches"`
	Wins          int32        `thrift:"Wins,9,required" db:"Wins" json:"Wins"`
	Kills         int32        `thrift:"Kills,10,required" db:"Kills" json:"Kills"`
	Deaths        int32        `thrift:"Deaths,11,required" db:"Deaths" json:"Deaths"`
	Cash          int64        `thrift:"Cash,12,required" db:"Cash" json:"Cash"`
	Campaign      int8         `thrift:"Campaign,13,required" db:"Campaign" json:"Campaign"`
	NetInfo       *UserNetInfo `thrift:"NetInfo,14,required" db:"NetInfo" json:"NetInfo"`
	UserInventory *Inventory   `thrift:"UserInventory,15,required" db:"UserInventory" json:"UserInventory"`
	Friends       []string     `thrift:"Friends,16,required" db:"Friends" json:"Friends"`
	Rank          int32        `thrift:"Rank,17,required" db:"Rank" json:"Rank"`
	ChatTimes     int8         `thrift:"ChatTimes,18,required" db:"ChatTimes" json:"ChatTimes"`
	Options       []byte       `thrift:"Options,19,required" db:"Options" json:"Options"`
}

func NewUserInfo() *UserInfo {
	return &UserInfo{}
}

func (p *UserInfo) GetUserID() int32 {
	return p.UserID
}

func (p *UserInfo) GetUserName() string {
	return p.UserName
}

func (p *UserInfo) GetNickName() string {
	return p.NickName
}

func (p *UserInfo) GetLevel() int8 {
	return p.Level
}

func (p *UserInfo) GetCurrentEXP() int64 {
	return p.CurrentEXP
}

func (p *UserInfo) GetMaxEXP() int64 {
	return p.MaxEXP
}

func (p *UserInfo) GetPoints() int64 {
	return p.Points
}

func (p *UserInfo) GetPlayedMatches() int32 {
	return p.PlayedMatches
}

func (p *UserInfo) GetWins() int32 {
	return p.Wins
}

func (p *UserInfo) GetKills() int32 {
	return p.Kills
}

func (p *UserInfo) GetDeaths() int32 {
	return p.Deaths
}

func (p *UserInfo) GetCash() int64 {
	return p.Cash
}

func (p *UserInfo) GetCampaign() int8 {
	return p.Campaign
}

var UserInfo_NetInfo_DEFAULT *UserNetInfo

func (p *UserInfo) GetNetInfo() *UserNetInfo {
	if !p.IsSetNetInfo() {
		return UserInfo_NetInfo_DEFAULT
	}
	return p.NetInfo
}

var UserInfo_UserInventory_DEFAULT *Inventory

func (p *UserInfo) GetUserInventory() *Inventory {
	if !p.IsSetUserInventory() {
		return UserInfo_UserInventory_DEFAULT
	}
	return p.UserInventory
}

func (p *UserInfo) GetFriends() []string {
	return p.Friends
}

func (p *UserInfo) GetRank() int32 {
	return p.Rank
}

func (p *UserInfo) GetChatTimes() int8 {
	return p.ChatTimes
}

func (p *UserInfo) GetOptions() []byte {
	return p.Options
}
func (p *UserInfo) IsSetNetInfo() bool {
	return p.NetInfo != nil
}

func (p *UserInfo) IsSetUserInventory() bool {
	return p.UserInventory != nil
}

func (p *UserInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetUserID bool = false
	var issetUserName bool = false
	var issetNickName bool = false
	var issetLevel bool = false
	var issetCurrentEXP bool = false
	var issetMaxEXP bool = false
	var issetPoints bool = false
	var issetPlayedMatches bool = false
	var issetWins bool = false
	var issetKills bool = false
	var issetDeaths bool = false
	var issetCash bool = false
	var issetCampaign bool = false
	var issetNetInfo bool = false
	var issetUserInventory bool = false
	var issetFriends bool = false
	var issetRank bool = false
	var issetChatTimes bool = false
	var issetOptions bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetUserID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetUserName = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
				issetNickName = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
				issetLevel = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
				issetCurrentEXP = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
				issetMaxEXP = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
				issetPoints = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField8(ctx, iprot); err != nil {
					return err
				}
				issetPlayedMatches = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField9(ctx, iprot); err != nil {
					return err
				}
				issetWins = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField10(ctx, iprot); err != nil {
					return err
				}
				issetKills = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField11(ctx, iprot); err != nil {
					return err
				}
				issetDeaths = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField12(ctx, iprot); err != nil {
					return err
				}
				issetCash = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 13:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField13(ctx, iprot); err != nil {
					return err
				}
				issetCampaign = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 14:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField14(ctx, iprot); err != nil {
					return err
				}
				issetNetInfo = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 15:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField15(ctx, iprot); err != nil {
					return err
				}
				issetUserInventory = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 16:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField16(ctx, iprot); err != nil {
					return err
				}
				issetFriends = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 17:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField17(ctx, iprot); err != nil {
					return err
				}
				issetRank = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 18:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField18(ctx, iprot); err != nil {
					return err
				}
				issetChatTimes = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 19:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField19(ctx, iprot); err != nil {
					return err
				}
				issetOptions = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetUserID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserID is not set"))
	}
	if !issetUserName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserName is not set"))
	}
	if !issetNickName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NickName is not set"))
	}
	if !issetLevel {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Level is not set"))
	}
	if !issetCurrentEXP {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CurrentEXP is not set"))
	}
	if !issetMaxEXP {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MaxEXP is not set"))
	}
	if !issetPoints {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Points is not set"))
	}
	if !issetPlayedMatches {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PlayedMatches is not set"))
	}
	if !issetWins {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Wins is not set"))
	}
	if !issetKills {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Kills is not set"))
	}
	if !issetDeaths {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Deaths is not set"))
	}
	if !issetCash {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Cash is not set"))
	}
	if !issetCampaign {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Campaign is not set"))
	}
	if !issetNetInfo {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NetInfo is not set"))
	}
	if !issetUserInventory {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserInventory is not set"))
	}
	if !issetFriends {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Friends is not set"))
	}
	if !issetRank {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Rank is not set"))
	}
	if !issetChatTimes {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ChatTimes is not set"))
	}
	if !issetOptions {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Options is not set"))
	}
	return nil
}

func (p *UserInfo) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *UserInfo) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UserName = v
	}
	return nil
}

func (p *UserInfo) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.NickName = v
	}
	return nil
}

func (p *UserInfo) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := int8(v)
		p.Level = temp
	}
	return nil
}

func (p *UserInfo) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.CurrentEXP = v
	}
	return nil
}

func (p *UserInfo) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.MaxEXP = v
	}
	return nil
}

func (p *UserInfo) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Points = v
	}
	return nil
}

func (p *UserInfo) ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.PlayedMatches = v
	}
	return nil
}

func (p *UserInfo) ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Wins = v
	}
	return nil
}

func (p *UserInfo) ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Kills = v
	}
	return nil
}

func (p *UserInfo) ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.Deaths = v
	}
	return nil
}

func (p *UserInfo) ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.Cash = v
	}
	return nil
}

func (p *UserInfo) ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		temp := int8(v)
		p.Campaign = temp
	}
	return nil
}

func (p *UserInfo) ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
	p.NetInfo = &UserNetInfo{}
	if err := p.NetInfo.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NetInfo), err)
	}
	return nil
}

func (p *UserInfo) ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
	p.UserInventory = &Inventory{}
	if err := p.UserInventory.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserInventory), err)
	}
	return nil
}

func (p *UserInfo) ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Friends = tSlice
	for i := 0; i < size; i++ {
		var _elem38 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem38 = v
		}
		p.Friends = append(p.Friends, _elem38)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UserInfo) ReadField17(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.Rank = v
	}
	return nil
}

func (p *UserInfo) ReadField18(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		temp := int8(v)
		p.ChatTimes = temp
	}
	return nil
}

func (p *UserInfo) ReadField19(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 19: ", err)
	} else {
		p.Options = v
	}
	return nil
}

func (p *UserInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UserInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField7(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField8(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField9(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField10(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField11(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField12(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField13(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField14(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField15(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField16(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField17(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField18(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField19(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "UserID", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:UserID: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.UserID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:UserID: ", p), err)
	}
	return err
}

func (p *UserInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "UserName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:UserName: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.UserName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.UserName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:UserName: ", p), err)
	}
	return err
}

func (p *UserInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "NickName", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:NickName: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.NickName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.NickName (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:NickName: ", p), err)
	}
	return err
}

func (p *UserInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Level", thrift.BYTE, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Level: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.Level)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Level (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Level: ", p), err)
	}
	return err
}

func (p *UserInfo) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "CurrentEXP", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:CurrentEXP: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.CurrentEXP)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.CurrentEXP (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:CurrentEXP: ", p), err)
	}
	return err
}

func (p *UserInfo) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "MaxEXP", thrift.I64, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:MaxEXP: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.MaxEXP)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.MaxEXP (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:MaxEXP: ", p), err)
	}
	return err
}

func (p *UserInfo) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Points", thrift.I64, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:Points: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.Points)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Points (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:Points: ", p), err)
	}
	return err
}

func (p *UserInfo) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "PlayedMatches", thrift.I32, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:PlayedMatches: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.PlayedMatches)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.PlayedMatches (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:PlayedMatches: ", p), err)
	}
	return err
}

func (p *UserInfo) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Wins", thrift.I32, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:Wins: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Wins)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Wins (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:Wins: ", p), err)
	}
	return err
}

func (p *UserInfo) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Kills", thrift.I32, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:Kills: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Kills)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Kills (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:Kills: ", p), err)
	}
	return err
}

func (p *UserInfo) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Deaths", thrift.I32, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:Deaths: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Deaths)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Deaths (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:Deaths: ", p), err)
	}
	return err
}

func (p *UserInfo) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Cash", thrift.I64, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:Cash: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.Cash)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Cash (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:Cash: ", p), err)
	}
	return err
}

func (p *UserInfo) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Campaign", thrift.BYTE, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:Campaign: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.Campaign)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Campaign (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:Campaign: ", p), err)
	}
	return err
}

func (p *UserInfo) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "NetInfo", thrift.STRUCT, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:NetInfo: ", p), err)
	}
	if err := p.NetInfo.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NetInfo), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:NetInfo: ", p), err)
	}
	return err
}

func (p *UserInfo) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "UserInventory", thrift.STRUCT, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:UserInventory: ", p), err)
	}
	if err := p.UserInventory.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserInventory), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:UserInventory: ", p), err)
	}
	return err
}

func (p *UserInfo) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Friends", thrift.LIST, 16); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:Friends: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Friends)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Friends {
		if err := oprot.WriteString(ctx, string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 16:Friends: ", p), err)
	}
	return err
}

func (p *UserInfo) writeField17(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Rank", thrift.I32, 17); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:Rank: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Rank)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Rank (17) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 17:Rank: ", p), err)
	}
	return err
}

func (p *UserInfo) writeField18(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ChatTimes", thrift.BYTE, 18); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:ChatTimes: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.ChatTimes)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ChatTimes (18) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 18:ChatTimes: ", p), err)
	}
	return err
}

func (p *UserInfo) writeField19(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Options", thrift.STRING, 19); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:Options: ", p), err)
	}
	if err := oprot.WriteBinary(ctx, p.Options); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Options (19) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 19:Options: ", p), err)
	}
	return err
}

func (p *UserInfo) Equals(other *UserInfo) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.UserID != other.UserID {
		return false
	}
	if p.UserName != other.UserName {
		return false
	}
	if p.NickName != other.NickName {
		return false
	}
	if p.Level != other.Level {
		return false
	}
	if p.CurrentEXP != other.CurrentEXP {
		return false
	}
	if p.MaxEXP != other.MaxEXP {
		return false
	}
	if p.Points != other.Points {
		return false
	}
	if p.PlayedMatches != other.PlayedMatches {
		return false
	}
	if p.Wins != other.Wins {
		return false
	}
	if p.Kills != other.Kills {
		return false
	}
	if p.Deaths != other.Deaths {
		return false
	}
	if p.Cash != other.Cash {
		return false
	}
	if p.Campaign != other.Campaign {
		return false
	}
	if !p.NetInfo.Equals(other.NetInfo) {
		return false
	}
	if !p.UserInventory.Equals(other.UserInventory) {
		return false
	}
	if len(p.Friends) != len(other.Friends) {
		return false
	}
	for i, _tgt := range p.Friends {
		_src39 := other.Friends[i]
		if _tgt != _src39 {
			return false
		}
	}
	if p.Rank != other.Rank {
		return false
	}
	if p.ChatTimes != other.ChatTimes {
		return false
	}
	if bytes.Compare(p.Options, other.Options) != 0 {
		return false
	}
	return true
}

func (p *UserInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfo(%+v)", *p)
}

// Attributes:
//  - UserName
//  - PassWord
type LoginRequest struct {
	UserName string `thrift:"UserName,1,required" db:"UserName" json:"UserName"`
	PassWord string `thrift:"PassWord,2,required" db:"PassWord" json:"PassWord"`
}

func NewLoginRequest() *LoginRequest {
	return &LoginRequest{}
}

func (p *LoginRequest) GetUserName() string {
	return p.UserName
}

func (p *LoginRequest) GetPassWord() string {
	return p.PassWord
}
func (p *LoginRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetUserName bool = false
	var issetPassWord bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetUserName = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetPassWord = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetUserName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserName is not set"))
	}
	if !issetPassWord {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PassWord is not set"))
	}
	return nil
}

func (p *LoginRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserName = v
	}
	return nil
}

func (p *LoginRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.PassWord = v
	}
	return nil
}

func (p *LoginRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "LoginRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LoginRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "UserName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:UserName: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.UserName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.UserName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:UserName: ", p), err)
	}
	return err
}

func (p *LoginRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "PassWord", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:PassWord: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.PassWord)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.PassWord (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:PassWord: ", p), err)
	}
	return err
}

func (p *LoginRequest) Equals(other *LoginRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.UserName != other.UserName {
		return false
	}
	if p.PassWord != other.PassWord {
		return false
	}
	return true
}

func (p *LoginRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginRequest(%+v)", *p)
}

// Attributes:
//  - StatusCode
//  - UserInfo
type LoginResponse struct {
	StatusCode int8      `thrift:"StatusCode,1,required" db:"StatusCode" json:"StatusCode"`
	UserInfo   *UserInfo `thrift:"UserInfo,2" db:"UserInfo" json:"UserInfo,omitempty"`
}

func NewLoginResponse() *LoginResponse {
	return &LoginResponse{}
}

func (p *LoginResponse) GetStatusCode() int8 {
	return p.StatusCode
}

var LoginResponse_UserInfo_DEFAULT *UserInfo

func (p *LoginResponse) GetUserInfo() *UserInfo {
	if !p.IsSetUserInfo() {
		return LoginResponse_UserInfo_DEFAULT
	}
	return p.UserInfo
}
func (p *LoginResponse) IsSetUserInfo() bool {
	return p.UserInfo != nil
}

func (p *LoginResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatusCode bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetStatusCode = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatusCode {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StatusCode is not set"))
	}
	return nil
}

func (p *LoginResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := int8(v)
		p.StatusCode = temp
	}
	return nil
}

func (p *LoginResponse) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.UserInfo = &UserInfo{}
	if err := p.UserInfo.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserInfo), err)
	}
	return nil
}

func (p *LoginResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "LoginResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LoginResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "StatusCode", thrift.BYTE, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:StatusCode: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.StatusCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.StatusCode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:StatusCode: ", p), err)
	}
	return err
}

func (p *LoginResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetUserInfo() {
		if err := oprot.WriteFieldBegin(ctx, "UserInfo", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:UserInfo: ", p), err)
		}
		if err := p.UserInfo.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserInfo), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:UserInfo: ", p), err)
		}
	}
	return err
}

func (p *LoginResponse) Equals(other *LoginResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.StatusCode != other.StatusCode {
		return false
	}
	if !p.UserInfo.Equals(other.UserInfo) {
		return false
	}
	return true
}

func (p *LoginResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginResponse(%+v)", *p)
}

// Attributes:
//  - UserName
//  - NickName
//  - PassWord
type RegisterRequest struct {
	UserName string `thrift:"UserName,1,required" db:"UserName" json:"UserName"`
	NickName string `thrift:"NickName,2,required" db:"NickName" json:"NickName"`
	PassWord string `thrift:"PassWord,3,required" db:"PassWord" json:"PassWord"`
}

func NewRegisterRequest() *RegisterRequest {
	return &RegisterRequest{}
}

func (p *RegisterRequest) GetUserName() string {
	return p.UserName
}

func (p *RegisterRequest) GetNickName() string {
	return p.NickName
}

func (p *RegisterRequest) GetPassWord() string {
	return p.PassWord
}
func (p *RegisterRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetUserName bool = false
	var issetNickName bool = false
	var issetPassWord bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetUserName = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetNickName = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
				issetPassWord = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetUserName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserName is not set"))
	}
	if !issetNickName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NickName is not set"))
	}
	if !issetPassWord {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PassWord is not set"))
	}
	return nil
}

func (p *RegisterRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserName = v
	}
	return nil
}

func (p *RegisterRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.NickName = v
	}
	return nil
}

func (p *RegisterRequest) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.PassWord = v
	}
	return nil
}

func (p *RegisterRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "RegisterRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RegisterRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "UserName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:UserName: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.UserName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.UserName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:UserName: ", p), err)
	}
	return err
}

func (p *RegisterRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "NickName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:NickName: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.NickName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.NickName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:NickName: ", p), err)
	}
	return err
}

func (p *RegisterRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "PassWord", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:PassWord: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.PassWord)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.PassWord (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:PassWord: ", p), err)
	}
	return err
}

func (p *RegisterRequest) Equals(other *RegisterRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.UserName != other.UserName {
		return false
	}
	if p.NickName != other.NickName {
		return false
	}
	if p.PassWord != other.PassWord {
		return false
	}
	return true
}

func (p *RegisterRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterRequest(%+v)", *p)
}

// Attributes:
//  - Success
type RegisterResponse struct {
	Success bool `thrift:"Success,1,required" db:"Success" json:"Success"`
}

func NewRegisterResponse() *RegisterResponse {
	return &RegisterResponse{}
}

func (p *RegisterResponse) GetSuccess() bool {
	return p.Success
}
func (p *RegisterResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSuccess bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetSuccess = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSuccess {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Success is not set"))
	}
	return nil
}

func (p *RegisterResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *RegisterResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "RegisterResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RegisterResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Success", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Success: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.Success)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Success (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Success: ", p), err)
	}
	return err
}

func (p *RegisterResponse) Equals(other *RegisterResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Success != other.Success {
		return false
	}
	return true
}

func (p *RegisterResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterResponse(%+v)", *p)
}

// Attributes:
//  - UserID
type GetUserInfoRequest struct {
	UserID int32 `thrift:"UserID,1,required" db:"UserID" json:"UserID"`
}

func NewGetUserInfoRequest() *GetUserInfoRequest {
	return &GetUserInfoRequest{}
}

func (p *GetUserInfoRequest) GetUserID() int32 {
	return p.UserID
}
func (p *GetUserInfoRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetUserID bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetUserID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetUserID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserID is not set"))
	}
	return nil
}

func (p *GetUserInfoRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *GetUserInfoRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "GetUserInfoRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetUserInfoRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "UserID", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:UserID: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.UserID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:UserID: ", p), err)
	}
	return err
}

func (p *GetUserInfoRequest) Equals(other *GetUserInfoRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.UserID != other.UserID {
		return false
	}
	return true
}

func (p *GetUserInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserInfoRequest(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserInfo
type GetUserInfoResponse struct {
	Success  bool      `thrift:"Success,1,required" db:"Success" json:"Success"`
	UserInfo *UserInfo `thrift:"UserInfo,2" db:"UserInfo" json:"UserInfo,omitempty"`
}

func NewGetUserInfoResponse() *GetUserInfoResponse {
	return &GetUserInfoResponse{}
}

func (p *GetUserInfoResponse) GetSuccess() bool {
	return p.Success
}

var GetUserInfoResponse_UserInfo_DEFAULT *UserInfo

func (p *GetUserInfoResponse) GetUserInfo() *UserInfo {
	if !p.IsSetUserInfo() {
		return GetUserInfoResponse_UserInfo_DEFAULT
	}
	return p.UserInfo
}
func (p *GetUserInfoResponse) IsSetUserInfo() bool {
	return p.UserInfo != nil
}

func (p *GetUserInfoResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSuccess bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetSuccess = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSuccess {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Success is not set"))
	}
	return nil
}

func (p *GetUserInfoResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *GetUserInfoResponse) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.UserInfo = &UserInfo{}
	if err := p.UserInfo.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserInfo), err)
	}
	return nil
}

func (p *GetUserInfoResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "GetUserInfoResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetUserInfoResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Success", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Success: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.Success)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Success (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Success: ", p), err)
	}
	return err
}

func (p *GetUserInfoResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetUserInfo() {
		if err := oprot.WriteFieldBegin(ctx, "UserInfo", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:UserInfo: ", p), err)
		}
		if err := p.UserInfo.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserInfo), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:UserInfo: ", p), err)
		}
	}
	return err
}

func (p *GetUserInfoResponse) Equals(other *GetUserInfoResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Success != other.Success {
		return false
	}
	if !p.UserInfo.Equals(other.UserInfo) {
		return false
	}
	return true
}

func (p *GetUserInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserInfoResponse(%+v)", *p)
}

// Attributes:
//  - UserID
type UserDownRequest struct {
	UserID int32 `thrift:"UserID,1,required" db:"UserID" json:"UserID"`
}

func NewUserDownRequest() *UserDownRequest {
	return &UserDownRequest{}
}

func (p *UserDownRequest) GetUserID() int32 {
	return p.UserID
}
func (p *UserDownRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetUserID bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetUserID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetUserID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserID is not set"))
	}
	return nil
}

func (p *UserDownRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *UserDownRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UserDownRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserDownRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "UserID", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:UserID: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.UserID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:UserID: ", p), err)
	}
	return err
}

func (p *UserDownRequest) Equals(other *UserDownRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.UserID != other.UserID {
		return false
	}
	return true
}

func (p *UserDownRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserDownRequest(%+v)", *p)
}

// Attributes:
//  - Success
type UserDownResponse struct {
	Success bool `thrift:"Success,1,required" db:"Success" json:"Success"`
}

func NewUserDownResponse() *UserDownResponse {
	return &UserDownResponse{}
}

func (p *UserDownResponse) GetSuccess() bool {
	return p.Success
}
func (p *UserDownResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSuccess bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetSuccess = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSuccess {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Success is not set"))
	}
	return nil
}

func (p *UserDownResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *UserDownResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UserDownResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserDownResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Success", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Success: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.Success)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Success (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Success: ", p), err)
	}
	return err
}

func (p *UserDownResponse) Equals(other *UserDownResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Success != other.Success {
		return false
	}
	return true
}

func (p *UserDownResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserDownResponse(%+v)", *p)
}

// Attributes:
//  - UserID
type GetUserFriendsRequest struct {
	UserID int32 `thrift:"UserID,1,required" db:"UserID" json:"UserID"`
}

func NewGetUserFriendsRequest() *GetUserFriendsRequest {
	return &GetUserFriendsRequest{}
}

func (p *GetUserFriendsRequest) GetUserID() int32 {
	return p.UserID
}
func (p *GetUserFriendsRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetUserID bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetUserID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetUserID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserID is not set"))
	}
	return nil
}

func (p *GetUserFriendsRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *GetUserFriendsRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "GetUserFriendsRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetUserFriendsRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "UserID", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:UserID: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.UserID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:UserID: ", p), err)
	}
	return err
}

func (p *GetUserFriendsRequest) Equals(other *GetUserFriendsRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.UserID != other.UserID {
		return false
	}
	return true
}

func (p *GetUserFriendsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserFriendsRequest(%+v)", *p)
}

// Attributes:
//  - Success
//  - Friends
type GetUserFriendsResponse struct {
	Success bool        `thrift:"Success,1,required" db:"Success" json:"Success"`
	Friends []*UserInfo `thrift:"Friends,2" db:"Friends" json:"Friends,omitempty"`
}

func NewGetUserFriendsResponse() *GetUserFriendsResponse {
	return &GetUserFriendsResponse{}
}

func (p *GetUserFriendsResponse) GetSuccess() bool {
	return p.Success
}

var GetUserFriendsResponse_Friends_DEFAULT []*UserInfo

func (p *GetUserFriendsResponse) GetFriends() []*UserInfo {
	return p.Friends
}
func (p *GetUserFriendsResponse) IsSetFriends() bool {
	return p.Friends != nil
}

func (p *GetUserFriendsResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSuccess bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetSuccess = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSuccess {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Success is not set"))
	}
	return nil
}

func (p *GetUserFriendsResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *GetUserFriendsResponse) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*UserInfo, 0, size)
	p.Friends = tSlice
	for i := 0; i < size; i++ {
		_elem40 := &UserInfo{}
		if err := _elem40.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem40), err)
		}
		p.Friends = append(p.Friends, _elem40)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *GetUserFriendsResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "GetUserFriendsResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetUserFriendsResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Success", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Success: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.Success)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Success (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Success: ", p), err)
	}
	return err
}

func (p *GetUserFriendsResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetFriends() {
		if err := oprot.WriteFieldBegin(ctx, "Friends", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Friends: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Friends)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Friends {
			if err := v.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Friends: ", p), err)
		}
	}
	return err
}

func (p *GetUserFriendsResponse) Equals(other *GetUserFriendsResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Success != other.Success {
		return false
	}
	if len(p.Friends) != len(other.Friends) {
		return false
	}
	for i, _tgt := range p.Friends {
		_src41 := other.Friends[i]
		if !_tgt.Equals(_src41) {
			return false
		}
	}
	return true
}

func (p *GetUserFriendsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserFriendsResponse(%+v)", *p)
}

// Attributes:
//  - UserID
//  - AddNum
type AddUserPointsRequest struct {
	UserID int32 `thrift:"UserID,1,required" db:"UserID" json:"UserID"`
	AddNum int64 `thrift:"AddNum,2,required" db:"AddNum" json:"AddNum"`
}

func NewAddUserPointsRequest() *AddUserPointsRequest {
	return &AddUserPointsRequest{}
}

func (p *AddUserPointsRequest) GetUserID() int32 {
	return p.UserID
}

func (p *AddUserPointsRequest) GetAddNum() int64 {
	return p.AddNum
}
func (p *AddUserPointsRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetUserID bool = false
	var issetAddNum bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetUserID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetAddNum = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetUserID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserID is not set"))
	}
	if !issetAddNum {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AddNum is not set"))
	}
	return nil
}

func (p *AddUserPointsRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *AddUserPointsRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.AddNum = v
	}
	return nil
}

func (p *AddUserPointsRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AddUserPointsRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddUserPointsRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "UserID", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:UserID: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.UserID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:UserID: ", p), err)
	}
	return err
}

func (p *AddUserPointsRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "AddNum", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:AddNum: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.AddNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.AddNum (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:AddNum: ", p), err)
	}
	return err
}

func (p *AddUserPointsRequest) Equals(other *AddUserPointsRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.UserID != other.UserID {
		return false
	}
	if p.AddNum != other.AddNum {
		return false
	}
	return true
}

func (p *AddUserPointsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddUserPointsRequest(%+v)", *p)
}

// Attributes:
//  - Success
//  - TotalPoints
type AddUserPointsResponse struct {
	Success     bool  `thrift:"Success,1,required" db:"Success" json:"Success"`
	TotalPoints int64 `thrift:"TotalPoints,2,required" db:"TotalPoints" json:"TotalPoints"`
}

func NewAddUserPointsResponse() *AddUserPointsResponse {
	return &AddUserPointsResponse{}
}

func (p *AddUserPointsResponse) GetSuccess() bool {
	return p.Success
}

func (p *AddUserPointsResponse) GetTotalPoints() int64 {
	return p.TotalPoints
}
func (p *AddUserPointsResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSuccess bool = false
	var issetTotalPoints bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetSuccess = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetTotalPoints = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSuccess {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Success is not set"))
	}
	if !issetTotalPoints {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TotalPoints is not set"))
	}
	return nil
}

func (p *AddUserPointsResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *AddUserPointsResponse) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TotalPoints = v
	}
	return nil
}

func (p *AddUserPointsResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AddUserPointsResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddUserPointsResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Success", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Success: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.Success)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Success (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Success: ", p), err)
	}
	return err
}

func (p *AddUserPointsResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "TotalPoints", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:TotalPoints: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.TotalPoints)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.TotalPoints (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:TotalPoints: ", p), err)
	}
	return err
}

func (p *AddUserPointsResponse) Equals(other *AddUserPointsResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Success != other.Success {
		return false
	}
	if p.TotalPoints != other.TotalPoints {
		return false
	}
	return true
}

func (p *AddUserPointsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddUserPointsResponse(%+v)", *p)
}

// Attributes:
//  - UserID
//  - AddNum
type AddUserCashRequest struct {
	UserID int32 `thrift:"UserID,1,required" db:"UserID" json:"UserID"`
	AddNum int64 `thrift:"AddNum,2,required" db:"AddNum" json:"AddNum"`
}

func NewAddUserCashRequest() *AddUserCashRequest {
	return &AddUserCashRequest{}
}

func (p *AddUserCashRequest) GetUserID() int32 {
	return p.UserID
}

func (p *AddUserCashRequest) GetAddNum() int64 {
	return p.AddNum
}
func (p *AddUserCashRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetUserID bool = false
	var issetAddNum bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetUserID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetAddNum = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetUserID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserID is not set"))
	}
	if !issetAddNum {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AddNum is not set"))
	}
	return nil
}

func (p *AddUserCashRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *AddUserCashRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.AddNum = v
	}
	return nil
}

func (p *AddUserCashRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AddUserCashRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddUserCashRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "UserID", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:UserID: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.UserID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:UserID: ", p), err)
	}
	return err
}

func (p *AddUserCashRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "AddNum", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:AddNum: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.AddNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.AddNum (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:AddNum: ", p), err)
	}
	return err
}

func (p *AddUserCashRequest) Equals(other *AddUserCashRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.UserID != other.UserID {
		return false
	}
	if p.AddNum != other.AddNum {
		return false
	}
	return true
}

func (p *AddUserCashRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddUserCashRequest(%+v)", *p)
}

// Attributes:
//  - Success
//  - TotalCash
type AddUserCashResponse struct {
	Success   bool  `thrift:"Success,1,required" db:"Success" json:"Success"`
	TotalCash int64 `thrift:"TotalCash,2,required" db:"TotalCash" json:"TotalCash"`
}

func NewAddUserCashResponse() *AddUserCashResponse {
	return &AddUserCashResponse{}
}

func (p *AddUserCashResponse) GetSuccess() bool {
	return p.Success
}

func (p *AddUserCashResponse) GetTotalCash() int64 {
	return p.TotalCash
}
func (p *AddUserCashResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSuccess bool = false
	var issetTotalCash bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetSuccess = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetTotalCash = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSuccess {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Success is not set"))
	}
	if !issetTotalCash {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TotalCash is not set"))
	}
	return nil
}

func (p *AddUserCashResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *AddUserCashResponse) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TotalCash = v
	}
	return nil
}

func (p *AddUserCashResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AddUserCashResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddUserCashResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Success", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Success: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.Success)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Success (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Success: ", p), err)
	}
	return err
}

func (p *AddUserCashResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "TotalCash", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:TotalCash: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.TotalCash)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.TotalCash (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:TotalCash: ", p), err)
	}
	return err
}

func (p *AddUserCashResponse) Equals(other *AddUserCashResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Success != other.Success {
		return false
	}
	if p.TotalCash != other.TotalCash {
		return false
	}
	return true
}

func (p *AddUserCashResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddUserCashResponse(%+v)", *p)
}

// Attributes:
//  - UserID
//  - IsWin
//  - Kills
//  - Deaths
//  - HeadShots
type UserPlayedGameRequest struct {
	UserID int32 `thrift:"UserID,1,required" db:"UserID" json:"UserID"`
	IsWin  bool  `thrift:"IsWin,2,required" db:"IsWin" json:"IsWin"`
	// unused field # 3
	Kills     int32 `thrift:"Kills,4,required" db:"Kills" json:"Kills"`
	Deaths    int32 `thrift:"Deaths,5,required" db:"Deaths" json:"Deaths"`
	HeadShots int32 `thrift:"HeadShots,6,required" db:"HeadShots" json:"HeadShots"`
}

func NewUserPlayedGameRequest() *UserPlayedGameRequest {
	return &UserPlayedGameRequest{}
}

func (p *UserPlayedGameRequest) GetUserID() int32 {
	return p.UserID
}

func (p *UserPlayedGameRequest) GetIsWin() bool {
	return p.IsWin
}

func (p *UserPlayedGameRequest) GetKills() int32 {
	return p.Kills
}

func (p *UserPlayedGameRequest) GetDeaths() int32 {
	return p.Deaths
}

func (p *UserPlayedGameRequest) GetHeadShots() int32 {
	return p.HeadShots
}
func (p *UserPlayedGameRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetUserID bool = false
	var issetIsWin bool = false
	var issetKills bool = false
	var issetDeaths bool = false
	var issetHeadShots bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetUserID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetIsWin = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
				issetKills = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
				issetDeaths = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
				issetHeadShots = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetUserID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserID is not set"))
	}
	if !issetIsWin {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IsWin is not set"))
	}
	if !issetKills {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Kills is not set"))
	}
	if !issetDeaths {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Deaths is not set"))
	}
	if !issetHeadShots {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field HeadShots is not set"))
	}
	return nil
}

func (p *UserPlayedGameRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *UserPlayedGameRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.IsWin = v
	}
	return nil
}

func (p *UserPlayedGameRequest) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Kills = v
	}
	return nil
}

func (p *UserPlayedGameRequest) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Deaths = v
	}
	return nil
}

func (p *UserPlayedGameRequest) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.HeadShots = v
	}
	return nil
}

func (p *UserPlayedGameRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UserPlayedGameRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserPlayedGameRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "UserID", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:UserID: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.UserID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:UserID: ", p), err)
	}
	return err
}

func (p *UserPlayedGameRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "IsWin", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:IsWin: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.IsWin)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.IsWin (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:IsWin: ", p), err)
	}
	return err
}

func (p *UserPlayedGameRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Kills", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Kills: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Kills)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Kills (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Kills: ", p), err)
	}
	return err
}

func (p *UserPlayedGameRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Deaths", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Deaths: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Deaths)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Deaths (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Deaths: ", p), err)
	}
	return err
}

func (p *UserPlayedGameRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "HeadShots", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:HeadShots: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.HeadShots)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.HeadShots (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:HeadShots: ", p), err)
	}
	return err
}

func (p *UserPlayedGameRequest) Equals(other *UserPlayedGameRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.UserID != other.UserID {
		return false
	}
	if p.IsWin != other.IsWin {
		return false
	}
	if p.Kills != other.Kills {
		return false
	}
	if p.Deaths != other.Deaths {
		return false
	}
	if p.HeadShots != other.HeadShots {
		return false
	}
	return true
}

func (p *UserPlayedGameRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserPlayedGameRequest(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserInfo
type UserPlayedGameResponse struct {
	Success  bool      `thrift:"Success,1,required" db:"Success" json:"Success"`
	UserInfo *UserInfo `thrift:"UserInfo,2" db:"UserInfo" json:"UserInfo,omitempty"`
}

func NewUserPlayedGameResponse() *UserPlayedGameResponse {
	return &UserPlayedGameResponse{}
}

func (p *UserPlayedGameResponse) GetSuccess() bool {
	return p.Success
}

var UserPlayedGameResponse_UserInfo_DEFAULT *UserInfo

func (p *UserPlayedGameResponse) GetUserInfo() *UserInfo {
	if !p.IsSetUserInfo() {
		return UserPlayedGameResponse_UserInfo_DEFAULT
	}
	return p.UserInfo
}
func (p *UserPlayedGameResponse) IsSetUserInfo() bool {
	return p.UserInfo != nil
}

func (p *UserPlayedGameResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSuccess bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetSuccess = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSuccess {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Success is not set"))
	}
	return nil
}

func (p *UserPlayedGameResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *UserPlayedGameResponse) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.UserInfo = &UserInfo{}
	if err := p.UserInfo.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserInfo), err)
	}
	return nil
}

func (p *UserPlayedGameResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UserPlayedGameResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserPlayedGameResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Success", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Success: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.Success)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Success (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Success: ", p), err)
	}
	return err
}

func (p *UserPlayedGameResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetUserInfo() {
		if err := oprot.WriteFieldBegin(ctx, "UserInfo", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:UserInfo: ", p), err)
		}
		if err := p.UserInfo.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserInfo), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:UserInfo: ", p), err)
		}
	}
	return err
}

func (p *UserPlayedGameResponse) Equals(other *UserPlayedGameResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Success != other.Success {
		return false
	}
	if !p.UserInfo.Equals(other.UserInfo) {
		return false
	}
	return true
}

func (p *UserPlayedGameResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserPlayedGameResponse(%+v)", *p)
}

// Attributes:
//  - UserID
//  - PointsUsed
type UserPayPointsRequest struct {
	UserID     int32 `thrift:"UserID,1,required" db:"UserID" json:"UserID"`
	PointsUsed int64 `thrift:"PointsUsed,2,required" db:"PointsUsed" json:"PointsUsed"`
}

func NewUserPayPointsRequest() *UserPayPointsRequest {
	return &UserPayPointsRequest{}
}

func (p *UserPayPointsRequest) GetUserID() int32 {
	return p.UserID
}

func (p *UserPayPointsRequest) GetPointsUsed() int64 {
	return p.PointsUsed
}
func (p *UserPayPointsRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetUserID bool = false
	var issetPointsUsed bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetUserID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetPointsUsed = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetUserID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserID is not set"))
	}
	if !issetPointsUsed {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PointsUsed is not set"))
	}
	return nil
}

func (p *UserPayPointsRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *UserPayPointsRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.PointsUsed = v
	}
	return nil
}

func (p *UserPayPointsRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UserPayPointsRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserPayPointsRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "UserID", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:UserID: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.UserID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:UserID: ", p), err)
	}
	return err
}

func (p *UserPayPointsRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "PointsUsed", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:PointsUsed: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.PointsUsed)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.PointsUsed (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:PointsUsed: ", p), err)
	}
	return err
}

func (p *UserPayPointsRequest) Equals(other *UserPayPointsRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.UserID != other.UserID {
		return false
	}
	if p.PointsUsed != other.PointsUsed {
		return false
	}
	return true
}

func (p *UserPayPointsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserPayPointsRequest(%+v)", *p)
}

// Attributes:
//  - Success
//  - TotalPoints
type UserPayPointsResponse struct {
	Success     bool  `thrift:"Success,1,required" db:"Success" json:"Success"`
	TotalPoints int64 `thrift:"TotalPoints,2,required" db:"TotalPoints" json:"TotalPoints"`
}

func NewUserPayPointsResponse() *UserPayPointsResponse {
	return &UserPayPointsResponse{}
}

func (p *UserPayPointsResponse) GetSuccess() bool {
	return p.Success
}

func (p *UserPayPointsResponse) GetTotalPoints() int64 {
	return p.TotalPoints
}
func (p *UserPayPointsResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSuccess bool = false
	var issetTotalPoints bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetSuccess = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetTotalPoints = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSuccess {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Success is not set"))
	}
	if !issetTotalPoints {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TotalPoints is not set"))
	}
	return nil
}

func (p *UserPayPointsResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *UserPayPointsResponse) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TotalPoints = v
	}
	return nil
}

func (p *UserPayPointsResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UserPayPointsResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserPayPointsResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Success", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Success: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.Success)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Success (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Success: ", p), err)
	}
	return err
}

func (p *UserPayPointsResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "TotalPoints", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:TotalPoints: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.TotalPoints)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.TotalPoints (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:TotalPoints: ", p), err)
	}
	return err
}

func (p *UserPayPointsResponse) Equals(other *UserPayPointsResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Success != other.Success {
		return false
	}
	if p.TotalPoints != other.TotalPoints {
		return false
	}
	return true
}

func (p *UserPayPointsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserPayPointsResponse(%+v)", *p)
}

// Attributes:
//  - UserID
//  - CashUsed
type UserPayCashRequest struct {
	UserID   int32 `thrift:"UserID,1,required" db:"UserID" json:"UserID"`
	CashUsed int64 `thrift:"CashUsed,2,required" db:"CashUsed" json:"CashUsed"`
}

func NewUserPayCashRequest() *UserPayCashRequest {
	return &UserPayCashRequest{}
}

func (p *UserPayCashRequest) GetUserID() int32 {
	return p.UserID
}

func (p *UserPayCashRequest) GetCashUsed() int64 {
	return p.CashUsed
}
func (p *UserPayCashRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetUserID bool = false
	var issetCashUsed bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetUserID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetCashUsed = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetUserID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserID is not set"))
	}
	if !issetCashUsed {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CashUsed is not set"))
	}
	return nil
}

func (p *UserPayCashRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *UserPayCashRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.CashUsed = v
	}
	return nil
}

func (p *UserPayCashRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UserPayCashRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserPayCashRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "UserID", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:UserID: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.UserID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:UserID: ", p), err)
	}
	return err
}

func (p *UserPayCashRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "CashUsed", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:CashUsed: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.CashUsed)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.CashUsed (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:CashUsed: ", p), err)
	}
	return err
}

func (p *UserPayCashRequest) Equals(other *UserPayCashRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.UserID != other.UserID {
		return false
	}
	if p.CashUsed != other.CashUsed {
		return false
	}
	return true
}

func (p *UserPayCashRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserPayCashRequest(%+v)", *p)
}

// Attributes:
//  - Success
//  - TotalCash
type UserPayCashResponse struct {
	Success   bool  `thrift:"Success,1,required" db:"Success" json:"Success"`
	TotalCash int64 `thrift:"TotalCash,2,required" db:"TotalCash" json:"TotalCash"`
}

func NewUserPayCashResponse() *UserPayCashResponse {
	return &UserPayCashResponse{}
}

func (p *UserPayCashResponse) GetSuccess() bool {
	return p.Success
}

func (p *UserPayCashResponse) GetTotalCash() int64 {
	return p.TotalCash
}
func (p *UserPayCashResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSuccess bool = false
	var issetTotalCash bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetSuccess = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetTotalCash = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSuccess {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Success is not set"))
	}
	if !issetTotalCash {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TotalCash is not set"))
	}
	return nil
}

func (p *UserPayCashResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *UserPayCashResponse) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TotalCash = v
	}
	return nil
}

func (p *UserPayCashResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UserPayCashResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserPayCashResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Success", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Success: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.Success)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Success (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Success: ", p), err)
	}
	return err
}

func (p *UserPayCashResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "TotalCash", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:TotalCash: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.TotalCash)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.TotalCash (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:TotalCash: ", p), err)
	}
	return err
}

func (p *UserPayCashResponse) Equals(other *UserPayCashResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Success != other.Success {
		return false
	}
	if p.TotalCash != other.TotalCash {
		return false
	}
	return true
}

func (p *UserPayCashResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserPayCashResponse(%+v)", *p)
}

// Attributes:
//  - UserID
//  - ItemID
type UserAddItemRequest struct {
	UserID int32 `thrift:"UserID,1,required" db:"UserID" json:"UserID"`
	ItemID int32 `thrift:"ItemID,2,required" db:"ItemID" json:"ItemID"`
}

func NewUserAddItemRequest() *UserAddItemRequest {
	return &UserAddItemRequest{}
}

func (p *UserAddItemRequest) GetUserID() int32 {
	return p.UserID
}

func (p *UserAddItemRequest) GetItemID() int32 {
	return p.ItemID
}
func (p *UserAddItemRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetUserID bool = false
	var issetItemID bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetUserID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetItemID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetUserID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserID is not set"))
	}
	if !issetItemID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ItemID is not set"))
	}
	return nil
}

func (p *UserAddItemRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *UserAddItemRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ItemID = v
	}
	return nil
}

func (p *UserAddItemRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UserAddItemRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserAddItemRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "UserID", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:UserID: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.UserID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:UserID: ", p), err)
	}
	return err
}

func (p *UserAddItemRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ItemID", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ItemID: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.ItemID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ItemID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ItemID: ", p), err)
	}
	return err
}

func (p *UserAddItemRequest) Equals(other *UserAddItemRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.UserID != other.UserID {
		return false
	}
	if p.ItemID != other.ItemID {
		return false
	}
	return true
}

func (p *UserAddItemRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserAddItemRequest(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserInfo
type UserAddItemResponse struct {
	Success  bool      `thrift:"Success,1,required" db:"Success" json:"Success"`
	UserInfo *UserInfo `thrift:"UserInfo,2" db:"UserInfo" json:"UserInfo,omitempty"`
}

func NewUserAddItemResponse() *UserAddItemResponse {
	return &UserAddItemResponse{}
}

func (p *UserAddItemResponse) GetSuccess() bool {
	return p.Success
}

var UserAddItemResponse_UserInfo_DEFAULT *UserInfo

func (p *UserAddItemResponse) GetUserInfo() *UserInfo {
	if !p.IsSetUserInfo() {
		return UserAddItemResponse_UserInfo_DEFAULT
	}
	return p.UserInfo
}
func (p *UserAddItemResponse) IsSetUserInfo() bool {
	return p.UserInfo != nil
}

func (p *UserAddItemResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSuccess bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetSuccess = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSuccess {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Success is not set"))
	}
	return nil
}

func (p *UserAddItemResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *UserAddItemResponse) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.UserInfo = &UserInfo{}
	if err := p.UserInfo.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserInfo), err)
	}
	return nil
}

func (p *UserAddItemResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UserAddItemResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserAddItemResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Success", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Success: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.Success)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Success (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Success: ", p), err)
	}
	return err
}

func (p *UserAddItemResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetUserInfo() {
		if err := oprot.WriteFieldBegin(ctx, "UserInfo", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:UserInfo: ", p), err)
		}
		if err := p.UserInfo.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserInfo), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:UserInfo: ", p), err)
		}
	}
	return err
}

func (p *UserAddItemResponse) Equals(other *UserAddItemResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Success != other.Success {
		return false
	}
	if !p.UserInfo.Equals(other.UserInfo) {
		return false
	}
	return true
}

func (p *UserAddItemResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserAddItemResponse(%+v)", *p)
}

// Attributes:
//  - UserID
//  - FriendID
type UserAddFriendRequest struct {
	UserID   int32 `thrift:"UserID,1,required" db:"UserID" json:"UserID"`
	FriendID int32 `thrift:"FriendID,2,required" db:"FriendID" json:"FriendID"`
}

func NewUserAddFriendRequest() *UserAddFriendRequest {
	return &UserAddFriendRequest{}
}

func (p *UserAddFriendRequest) GetUserID() int32 {
	return p.UserID
}

func (p *UserAddFriendRequest) GetFriendID() int32 {
	return p.FriendID
}
func (p *UserAddFriendRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetUserID bool = false
	var issetFriendID bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetUserID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetFriendID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetUserID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserID is not set"))
	}
	if !issetFriendID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field FriendID is not set"))
	}
	return nil
}

func (p *UserAddFriendRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *UserAddFriendRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.FriendID = v
	}
	return nil
}

func (p *UserAddFriendRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UserAddFriendRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserAddFriendRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "UserID", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:UserID: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.UserID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:UserID: ", p), err)
	}
	return err
}

func (p *UserAddFriendRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "FriendID", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:FriendID: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.FriendID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.FriendID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:FriendID: ", p), err)
	}
	return err
}

func (p *UserAddFriendRequest) Equals(other *UserAddFriendRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.UserID != other.UserID {
		return false
	}
	if p.FriendID != other.FriendID {
		return false
	}
	return true
}

func (p *UserAddFriendRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserAddFriendRequest(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserInfo
type UserAddFriendResponse struct {
	Success  bool      `thrift:"Success,1,required" db:"Success" json:"Success"`
	UserInfo *UserInfo `thrift:"UserInfo,2" db:"UserInfo" json:"UserInfo,omitempty"`
}

func NewUserAddFriendResponse() *UserAddFriendResponse {
	return &UserAddFriendResponse{}
}

func (p *UserAddFriendResponse) GetSuccess() bool {
	return p.Success
}

var UserAddFriendResponse_UserInfo_DEFAULT *UserInfo

func (p *UserAddFriendResponse) GetUserInfo() *UserInfo {
	if !p.IsSetUserInfo() {
		return UserAddFriendResponse_UserInfo_DEFAULT
	}
	return p.UserInfo
}
func (p *UserAddFriendResponse) IsSetUserInfo() bool {
	return p.UserInfo != nil
}

func (p *UserAddFriendResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSuccess bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetSuccess = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSuccess {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Success is not set"))
	}
	return nil
}

func (p *UserAddFriendResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *UserAddFriendResponse) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.UserInfo = &UserInfo{}
	if err := p.UserInfo.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserInfo), err)
	}
	return nil
}

func (p *UserAddFriendResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UserAddFriendResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserAddFriendResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Success", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Success: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.Success)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Success (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Success: ", p), err)
	}
	return err
}

func (p *UserAddFriendResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetUserInfo() {
		if err := oprot.WriteFieldBegin(ctx, "UserInfo", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:UserInfo: ", p), err)
		}
		if err := p.UserInfo.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserInfo), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:UserInfo: ", p), err)
		}
	}
	return err
}

func (p *UserAddFriendResponse) Equals(other *UserAddFriendResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Success != other.Success {
		return false
	}
	if !p.UserInfo.Equals(other.UserInfo) {
		return false
	}
	return true
}

func (p *UserAddFriendResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserAddFriendResponse(%+v)", *p)
}

// Attributes:
//  - UserID
//  - BagID
//  - Slot
//  - ItemID
type UpdateBagRequest struct {
	UserID int32 `thrift:"UserID,1,required" db:"UserID" json:"UserID"`
	BagID  int8  `thrift:"BagID,2,required" db:"BagID" json:"BagID"`
	Slot   int8  `thrift:"Slot,3,required" db:"Slot" json:"Slot"`
	ItemID int16 `thrift:"ItemID,4,required" db:"ItemID" json:"ItemID"`
}

func NewUpdateBagRequest() *UpdateBagRequest {
	return &UpdateBagRequest{}
}

func (p *UpdateBagRequest) GetUserID() int32 {
	return p.UserID
}

func (p *UpdateBagRequest) GetBagID() int8 {
	return p.BagID
}

func (p *UpdateBagRequest) GetSlot() int8 {
	return p.Slot
}

func (p *UpdateBagRequest) GetItemID() int16 {
	return p.ItemID
}
func (p *UpdateBagRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetUserID bool = false
	var issetBagID bool = false
	var issetSlot bool = false
	var issetItemID bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetUserID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetBagID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
				issetSlot = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
				issetItemID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetUserID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserID is not set"))
	}
	if !issetBagID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BagID is not set"))
	}
	if !issetSlot {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Slot is not set"))
	}
	if !issetItemID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ItemID is not set"))
	}
	return nil
}

func (p *UpdateBagRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *UpdateBagRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := int8(v)
		p.BagID = temp
	}
	return nil
}

func (p *UpdateBagRequest) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := int8(v)
		p.Slot = temp
	}
	return nil
}

func (p *UpdateBagRequest) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ItemID = v
	}
	return nil
}

func (p *UpdateBagRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UpdateBagRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UpdateBagRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "UserID", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:UserID: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.UserID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:UserID: ", p), err)
	}
	return err
}

func (p *UpdateBagRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "BagID", thrift.BYTE, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:BagID: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.BagID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.BagID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:BagID: ", p), err)
	}
	return err
}

func (p *UpdateBagRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Slot", thrift.BYTE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Slot: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.Slot)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Slot (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Slot: ", p), err)
	}
	return err
}

func (p *UpdateBagRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ItemID", thrift.I16, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ItemID: ", p), err)
	}
	if err := oprot.WriteI16(ctx, int16(p.ItemID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ItemID (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ItemID: ", p), err)
	}
	return err
}

func (p *UpdateBagRequest) Equals(other *UpdateBagRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.UserID != other.UserID {
		return false
	}
	if p.BagID != other.BagID {
		return false
	}
	if p.Slot != other.Slot {
		return false
	}
	if p.ItemID != other.ItemID {
		return false
	}
	return true
}

func (p *UpdateBagRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateBagRequest(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserInfo
type UpdateBagResponse struct {
	Success  bool      `thrift:"Success,1,required" db:"Success" json:"Success"`
	UserInfo *UserInfo `thrift:"UserInfo,2" db:"UserInfo" json:"UserInfo,omitempty"`
}

func NewUpdateBagResponse() *UpdateBagResponse {
	return &UpdateBagResponse{}
}

func (p *UpdateBagResponse) GetSuccess() bool {
	return p.Success
}

var UpdateBagResponse_UserInfo_DEFAULT *UserInfo

func (p *UpdateBagResponse) GetUserInfo() *UserInfo {
	if !p.IsSetUserInfo() {
		return UpdateBagResponse_UserInfo_DEFAULT
	}
	return p.UserInfo
}
func (p *UpdateBagResponse) IsSetUserInfo() bool {
	return p.UserInfo != nil
}

func (p *UpdateBagResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSuccess bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetSuccess = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSuccess {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Success is not set"))
	}
	return nil
}

func (p *UpdateBagResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *UpdateBagResponse) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.UserInfo = &UserInfo{}
	if err := p.UserInfo.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserInfo), err)
	}
	return nil
}

func (p *UpdateBagResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UpdateBagResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UpdateBagResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Success", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Success: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.Success)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Success (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Success: ", p), err)
	}
	return err
}

func (p *UpdateBagResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetUserInfo() {
		if err := oprot.WriteFieldBegin(ctx, "UserInfo", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:UserInfo: ", p), err)
		}
		if err := p.UserInfo.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserInfo), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:UserInfo: ", p), err)
		}
	}
	return err
}

func (p *UpdateBagResponse) Equals(other *UpdateBagResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Success != other.Success {
		return false
	}
	if !p.UserInfo.Equals(other.UserInfo) {
		return false
	}
	return true
}

func (p *UpdateBagResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateBagResponse(%+v)", *p)
}

// Attributes:
//  - UserID
//  - BuymenuID
//  - Slot
//  - ItemID
type UpdateBuymenuRequest struct {
	UserID    int32 `thrift:"UserID,1,required" db:"UserID" json:"UserID"`
	BuymenuID int8  `thrift:"BuymenuID,2,required" db:"BuymenuID" json:"BuymenuID"`
	Slot      int8  `thrift:"Slot,3,required" db:"Slot" json:"Slot"`
	ItemID    int16 `thrift:"ItemID,4,required" db:"ItemID" json:"ItemID"`
}

func NewUpdateBuymenuRequest() *UpdateBuymenuRequest {
	return &UpdateBuymenuRequest{}
}

func (p *UpdateBuymenuRequest) GetUserID() int32 {
	return p.UserID
}

func (p *UpdateBuymenuRequest) GetBuymenuID() int8 {
	return p.BuymenuID
}

func (p *UpdateBuymenuRequest) GetSlot() int8 {
	return p.Slot
}

func (p *UpdateBuymenuRequest) GetItemID() int16 {
	return p.ItemID
}
func (p *UpdateBuymenuRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetUserID bool = false
	var issetBuymenuID bool = false
	var issetSlot bool = false
	var issetItemID bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetUserID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetBuymenuID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
				issetSlot = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
				issetItemID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetUserID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserID is not set"))
	}
	if !issetBuymenuID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BuymenuID is not set"))
	}
	if !issetSlot {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Slot is not set"))
	}
	if !issetItemID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ItemID is not set"))
	}
	return nil
}

func (p *UpdateBuymenuRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *UpdateBuymenuRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := int8(v)
		p.BuymenuID = temp
	}
	return nil
}

func (p *UpdateBuymenuRequest) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := int8(v)
		p.Slot = temp
	}
	return nil
}

func (p *UpdateBuymenuRequest) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ItemID = v
	}
	return nil
}

func (p *UpdateBuymenuRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UpdateBuymenuRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UpdateBuymenuRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "UserID", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:UserID: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.UserID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:UserID: ", p), err)
	}
	return err
}

func (p *UpdateBuymenuRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "BuymenuID", thrift.BYTE, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:BuymenuID: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.BuymenuID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.BuymenuID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:BuymenuID: ", p), err)
	}
	return err
}

func (p *UpdateBuymenuRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Slot", thrift.BYTE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Slot: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.Slot)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Slot (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Slot: ", p), err)
	}
	return err
}

func (p *UpdateBuymenuRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ItemID", thrift.I16, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ItemID: ", p), err)
	}
	if err := oprot.WriteI16(ctx, int16(p.ItemID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ItemID (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ItemID: ", p), err)
	}
	return err
}

func (p *UpdateBuymenuRequest) Equals(other *UpdateBuymenuRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.UserID != other.UserID {
		return false
	}
	if p.BuymenuID != other.BuymenuID {
		return false
	}
	if p.Slot != other.Slot {
		return false
	}
	if p.ItemID != other.ItemID {
		return false
	}
	return true
}

func (p *UpdateBuymenuRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateBuymenuRequest(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserInfo
type UpdateBuymenuResponse struct {
	Success  bool      `thrift:"Success,1,required" db:"Success" json:"Success"`
	UserInfo *UserInfo `thrift:"UserInfo,2" db:"UserInfo" json:"UserInfo,omitempty"`
}

func NewUpdateBuymenuResponse() *UpdateBuymenuResponse {
	return &UpdateBuymenuResponse{}
}

func (p *UpdateBuymenuResponse) GetSuccess() bool {
	return p.Success
}

var UpdateBuymenuResponse_UserInfo_DEFAULT *UserInfo

func (p *UpdateBuymenuResponse) GetUserInfo() *UserInfo {
	if !p.IsSetUserInfo() {
		return UpdateBuymenuResponse_UserInfo_DEFAULT
	}
	return p.UserInfo
}
func (p *UpdateBuymenuResponse) IsSetUserInfo() bool {
	return p.UserInfo != nil
}

func (p *UpdateBuymenuResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSuccess bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetSuccess = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSuccess {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Success is not set"))
	}
	return nil
}

func (p *UpdateBuymenuResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *UpdateBuymenuResponse) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.UserInfo = &UserInfo{}
	if err := p.UserInfo.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserInfo), err)
	}
	return nil
}

func (p *UpdateBuymenuResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UpdateBuymenuResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UpdateBuymenuResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Success", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Success: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.Success)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Success (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Success: ", p), err)
	}
	return err
}

func (p *UpdateBuymenuResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetUserInfo() {
		if err := oprot.WriteFieldBegin(ctx, "UserInfo", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:UserInfo: ", p), err)
		}
		if err := p.UserInfo.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserInfo), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:UserInfo: ", p), err)
		}
	}
	return err
}

func (p *UpdateBuymenuResponse) Equals(other *UpdateBuymenuResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Success != other.Success {
		return false
	}
	if !p.UserInfo.Equals(other.UserInfo) {
		return false
	}
	return true
}

func (p *UpdateBuymenuResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateBuymenuResponse(%+v)", *p)
}

// Attributes:
//  - UserID
//  - CosmeticsID
//  - CosmeticsName
//  - MainWeapon
//  - MainBullet
//  - SecondWeapon
//  - SecondBullet
//  - FlashbangNum
//  - GrenadeID
//  - SmokeNum
//  - DefuserNum
//  - TelescopeNum
//  - BulletproofNum
//  - KnifeID
type UpdateCosmeticsRequest struct {
	UserID         int32  `thrift:"UserID,1,required" db:"UserID" json:"UserID"`
	CosmeticsID    int8   `thrift:"CosmeticsID,2,required" db:"CosmeticsID" json:"CosmeticsID"`
	CosmeticsName  string `thrift:"CosmeticsName,3,required" db:"CosmeticsName" json:"CosmeticsName"`
	MainWeapon     int16  `thrift:"MainWeapon,4,required" db:"MainWeapon" json:"MainWeapon"`
	MainBullet     int16  `thrift:"MainBullet,5,required" db:"MainBullet" json:"MainBullet"`
	SecondWeapon   int16  `thrift:"SecondWeapon,6,required" db:"SecondWeapon" json:"SecondWeapon"`
	SecondBullet   int16  `thrift:"SecondBullet,7,required" db:"SecondBullet" json:"SecondBullet"`
	FlashbangNum   int16  `thrift:"FlashbangNum,8,required" db:"FlashbangNum" json:"FlashbangNum"`
	GrenadeID      int16  `thrift:"GrenadeID,9,required" db:"GrenadeID" json:"GrenadeID"`
	SmokeNum       int16  `thrift:"SmokeNum,10,required" db:"SmokeNum" json:"SmokeNum"`
	DefuserNum     int16  `thrift:"DefuserNum,11,required" db:"DefuserNum" json:"DefuserNum"`
	TelescopeNum   int16  `thrift:"TelescopeNum,12,required" db:"TelescopeNum" json:"TelescopeNum"`
	BulletproofNum int16  `thrift:"BulletproofNum,13,required" db:"BulletproofNum" json:"BulletproofNum"`
	KnifeID        int16  `thrift:"KnifeID,14,required" db:"KnifeID" json:"KnifeID"`
}

func NewUpdateCosmeticsRequest() *UpdateCosmeticsRequest {
	return &UpdateCosmeticsRequest{}
}

func (p *UpdateCosmeticsRequest) GetUserID() int32 {
	return p.UserID
}

func (p *UpdateCosmeticsRequest) GetCosmeticsID() int8 {
	return p.CosmeticsID
}

func (p *UpdateCosmeticsRequest) GetCosmeticsName() string {
	return p.CosmeticsName
}

func (p *UpdateCosmeticsRequest) GetMainWeapon() int16 {
	return p.MainWeapon
}

func (p *UpdateCosmeticsRequest) GetMainBullet() int16 {
	return p.MainBullet
}

func (p *UpdateCosmeticsRequest) GetSecondWeapon() int16 {
	return p.SecondWeapon
}

func (p *UpdateCosmeticsRequest) GetSecondBullet() int16 {
	return p.SecondBullet
}

func (p *UpdateCosmeticsRequest) GetFlashbangNum() int16 {
	return p.FlashbangNum
}

func (p *UpdateCosmeticsRequest) GetGrenadeID() int16 {
	return p.GrenadeID
}

func (p *UpdateCosmeticsRequest) GetSmokeNum() int16 {
	return p.SmokeNum
}

func (p *UpdateCosmeticsRequest) GetDefuserNum() int16 {
	return p.DefuserNum
}

func (p *UpdateCosmeticsRequest) GetTelescopeNum() int16 {
	return p.TelescopeNum
}

func (p *UpdateCosmeticsRequest) GetBulletproofNum() int16 {
	return p.BulletproofNum
}

func (p *UpdateCosmeticsRequest) GetKnifeID() int16 {
	return p.KnifeID
}
func (p *UpdateCosmeticsRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetUserID bool = false
	var issetCosmeticsID bool = false
	var issetCosmeticsName bool = false
	var issetMainWeapon bool = false
	var issetMainBullet bool = false
	var issetSecondWeapon bool = false
	var issetSecondBullet bool = false
	var issetFlashbangNum bool = false
	var issetGrenadeID bool = false
	var issetSmokeNum bool = false
	var issetDefuserNum bool = false
	var issetTelescopeNum bool = false
	var issetBulletproofNum bool = false
	var issetKnifeID bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetUserID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetCosmeticsID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
				issetCosmeticsName = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
				issetMainWeapon = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
				issetMainBullet = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
				issetSecondWeapon = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
				issetSecondBullet = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField8(ctx, iprot); err != nil {
					return err
				}
				issetFlashbangNum = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField9(ctx, iprot); err != nil {
					return err
				}
				issetGrenadeID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField10(ctx, iprot); err != nil {
					return err
				}
				issetSmokeNum = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField11(ctx, iprot); err != nil {
					return err
				}
				issetDefuserNum = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField12(ctx, iprot); err != nil {
					return err
				}
				issetTelescopeNum = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 13:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField13(ctx, iprot); err != nil {
					return err
				}
				issetBulletproofNum = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 14:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField14(ctx, iprot); err != nil {
					return err
				}
				issetKnifeID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetUserID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserID is not set"))
	}
	if !issetCosmeticsID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CosmeticsID is not set"))
	}
	if !issetCosmeticsName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CosmeticsName is not set"))
	}
	if !issetMainWeapon {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MainWeapon is not set"))
	}
	if !issetMainBullet {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MainBullet is not set"))
	}
	if !issetSecondWeapon {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SecondWeapon is not set"))
	}
	if !issetSecondBullet {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SecondBullet is not set"))
	}
	if !issetFlashbangNum {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field FlashbangNum is not set"))
	}
	if !issetGrenadeID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GrenadeID is not set"))
	}
	if !issetSmokeNum {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SmokeNum is not set"))
	}
	if !issetDefuserNum {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DefuserNum is not set"))
	}
	if !issetTelescopeNum {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TelescopeNum is not set"))
	}
	if !issetBulletproofNum {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BulletproofNum is not set"))
	}
	if !issetKnifeID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field KnifeID is not set"))
	}
	return nil
}

func (p *UpdateCosmeticsRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *UpdateCosmeticsRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := int8(v)
		p.CosmeticsID = temp
	}
	return nil
}

func (p *UpdateCosmeticsRequest) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.CosmeticsName = v
	}
	return nil
}

func (p *UpdateCosmeticsRequest) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.MainWeapon = v
	}
	return nil
}

func (p *UpdateCosmeticsRequest) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.MainBullet = v
	}
	return nil
}

func (p *UpdateCosmeticsRequest) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.SecondWeapon = v
	}
	return nil
}

func (p *UpdateCosmeticsRequest) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.SecondBullet = v
	}
	return nil
}

func (p *UpdateCosmeticsRequest) ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.FlashbangNum = v
	}
	return nil
}

func (p *UpdateCosmeticsRequest) ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.GrenadeID = v
	}
	return nil
}

func (p *UpdateCosmeticsRequest) ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.SmokeNum = v
	}
	return nil
}

func (p *UpdateCosmeticsRequest) ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.DefuserNum = v
	}
	return nil
}

func (p *UpdateCosmeticsRequest) ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.TelescopeNum = v
	}
	return nil
}

func (p *UpdateCosmeticsRequest) ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.BulletproofNum = v
	}
	return nil
}

func (p *UpdateCosmeticsRequest) ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.KnifeID = v
	}
	return nil
}

func (p *UpdateCosmeticsRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UpdateCosmeticsRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField7(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField8(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField9(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField10(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField11(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField12(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField13(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField14(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UpdateCosmeticsRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "UserID", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:UserID: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.UserID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:UserID: ", p), err)
	}
	return err
}

func (p *UpdateCosmeticsRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "CosmeticsID", thrift.BYTE, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:CosmeticsID: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.CosmeticsID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.CosmeticsID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:CosmeticsID: ", p), err)
	}
	return err
}

func (p *UpdateCosmeticsRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "CosmeticsName", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:CosmeticsName: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.CosmeticsName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.CosmeticsName (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:CosmeticsName: ", p), err)
	}
	return err
}

func (p *UpdateCosmeticsRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "MainWeapon", thrift.I16, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:MainWeapon: ", p), err)
	}
	if err := oprot.WriteI16(ctx, int16(p.MainWeapon)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.MainWeapon (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:MainWeapon: ", p), err)
	}
	return err
}

func (p *UpdateCosmeticsRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "MainBullet", thrift.I16, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:MainBullet: ", p), err)
	}
	if err := oprot.WriteI16(ctx, int16(p.MainBullet)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.MainBullet (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:MainBullet: ", p), err)
	}
	return err
}

func (p *UpdateCosmeticsRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "SecondWeapon", thrift.I16, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:SecondWeapon: ", p), err)
	}
	if err := oprot.WriteI16(ctx, int16(p.SecondWeapon)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SecondWeapon (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:SecondWeapon: ", p), err)
	}
	return err
}

func (p *UpdateCosmeticsRequest) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "SecondBullet", thrift.I16, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:SecondBullet: ", p), err)
	}
	if err := oprot.WriteI16(ctx, int16(p.SecondBullet)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SecondBullet (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:SecondBullet: ", p), err)
	}
	return err
}

func (p *UpdateCosmeticsRequest) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "FlashbangNum", thrift.I16, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:FlashbangNum: ", p), err)
	}
	if err := oprot.WriteI16(ctx, int16(p.FlashbangNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.FlashbangNum (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:FlashbangNum: ", p), err)
	}
	return err
}

func (p *UpdateCosmeticsRequest) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "GrenadeID", thrift.I16, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:GrenadeID: ", p), err)
	}
	if err := oprot.WriteI16(ctx, int16(p.GrenadeID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.GrenadeID (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:GrenadeID: ", p), err)
	}
	return err
}

func (p *UpdateCosmeticsRequest) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "SmokeNum", thrift.I16, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:SmokeNum: ", p), err)
	}
	if err := oprot.WriteI16(ctx, int16(p.SmokeNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SmokeNum (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:SmokeNum: ", p), err)
	}
	return err
}

func (p *UpdateCosmeticsRequest) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "DefuserNum", thrift.I16, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:DefuserNum: ", p), err)
	}
	if err := oprot.WriteI16(ctx, int16(p.DefuserNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.DefuserNum (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:DefuserNum: ", p), err)
	}
	return err
}

func (p *UpdateCosmeticsRequest) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "TelescopeNum", thrift.I16, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:TelescopeNum: ", p), err)
	}
	if err := oprot.WriteI16(ctx, int16(p.TelescopeNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.TelescopeNum (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:TelescopeNum: ", p), err)
	}
	return err
}

func (p *UpdateCosmeticsRequest) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "BulletproofNum", thrift.I16, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:BulletproofNum: ", p), err)
	}
	if err := oprot.WriteI16(ctx, int16(p.BulletproofNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.BulletproofNum (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:BulletproofNum: ", p), err)
	}
	return err
}

func (p *UpdateCosmeticsRequest) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "KnifeID", thrift.I16, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:KnifeID: ", p), err)
	}
	if err := oprot.WriteI16(ctx, int16(p.KnifeID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.KnifeID (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:KnifeID: ", p), err)
	}
	return err
}

func (p *UpdateCosmeticsRequest) Equals(other *UpdateCosmeticsRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.UserID != other.UserID {
		return false
	}
	if p.CosmeticsID != other.CosmeticsID {
		return false
	}
	if p.CosmeticsName != other.CosmeticsName {
		return false
	}
	if p.MainWeapon != other.MainWeapon {
		return false
	}
	if p.MainBullet != other.MainBullet {
		return false
	}
	if p.SecondWeapon != other.SecondWeapon {
		return false
	}
	if p.SecondBullet != other.SecondBullet {
		return false
	}
	if p.FlashbangNum != other.FlashbangNum {
		return false
	}
	if p.GrenadeID != other.GrenadeID {
		return false
	}
	if p.SmokeNum != other.SmokeNum {
		return false
	}
	if p.DefuserNum != other.DefuserNum {
		return false
	}
	if p.TelescopeNum != other.TelescopeNum {
		return false
	}
	if p.BulletproofNum != other.BulletproofNum {
		return false
	}
	if p.KnifeID != other.KnifeID {
		return false
	}
	return true
}

func (p *UpdateCosmeticsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateCosmeticsRequest(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserInfo
type UpdateCosmeticsResponse struct {
	Success  bool      `thrift:"Success,1,required" db:"Success" json:"Success"`
	UserInfo *UserInfo `thrift:"UserInfo,2" db:"UserInfo" json:"UserInfo,omitempty"`
}

func NewUpdateCosmeticsResponse() *UpdateCosmeticsResponse {
	return &UpdateCosmeticsResponse{}
}

func (p *UpdateCosmeticsResponse) GetSuccess() bool {
	return p.Success
}

var UpdateCosmeticsResponse_UserInfo_DEFAULT *UserInfo

func (p *UpdateCosmeticsResponse) GetUserInfo() *UserInfo {
	if !p.IsSetUserInfo() {
		return UpdateCosmeticsResponse_UserInfo_DEFAULT
	}
	return p.UserInfo
}
func (p *UpdateCosmeticsResponse) IsSetUserInfo() bool {
	return p.UserInfo != nil
}

func (p *UpdateCosmeticsResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSuccess bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetSuccess = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSuccess {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Success is not set"))
	}
	return nil
}

func (p *UpdateCosmeticsResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *UpdateCosmeticsResponse) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.UserInfo = &UserInfo{}
	if err := p.UserInfo.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserInfo), err)
	}
	return nil
}

func (p *UpdateCosmeticsResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UpdateCosmeticsResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UpdateCosmeticsResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Success", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Success: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.Success)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Success (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Success: ", p), err)
	}
	return err
}

func (p *UpdateCosmeticsResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetUserInfo() {
		if err := oprot.WriteFieldBegin(ctx, "UserInfo", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:UserInfo: ", p), err)
		}
		if err := p.UserInfo.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserInfo), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:UserInfo: ", p), err)
		}
	}
	return err
}

func (p *UpdateCosmeticsResponse) Equals(other *UpdateCosmeticsResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Success != other.Success {
		return false
	}
	if !p.UserInfo.Equals(other.UserInfo) {
		return false
	}
	return true
}

func (p *UpdateCosmeticsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateCosmeticsResponse(%+v)", *p)
}

// Attributes:
//  - UserID
//  - Campaign
type UpdateCampaignRequest struct {
	UserID   int32 `thrift:"UserID,1,required" db:"UserID" json:"UserID"`
	Campaign int8  `thrift:"Campaign,2,required" db:"Campaign" json:"Campaign"`
}

func NewUpdateCampaignRequest() *UpdateCampaignRequest {
	return &UpdateCampaignRequest{}
}

func (p *UpdateCampaignRequest) GetUserID() int32 {
	return p.UserID
}

func (p *UpdateCampaignRequest) GetCampaign() int8 {
	return p.Campaign
}
func (p *UpdateCampaignRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetUserID bool = false
	var issetCampaign bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetUserID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetCampaign = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetUserID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserID is not set"))
	}
	if !issetCampaign {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Campaign is not set"))
	}
	return nil
}

func (p *UpdateCampaignRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *UpdateCampaignRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := int8(v)
		p.Campaign = temp
	}
	return nil
}

func (p *UpdateCampaignRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UpdateCampaignRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UpdateCampaignRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "UserID", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:UserID: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.UserID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:UserID: ", p), err)
	}
	return err
}

func (p *UpdateCampaignRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Campaign", thrift.BYTE, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Campaign: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.Campaign)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Campaign (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Campaign: ", p), err)
	}
	return err
}

func (p *UpdateCampaignRequest) Equals(other *UpdateCampaignRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.UserID != other.UserID {
		return false
	}
	if p.Campaign != other.Campaign {
		return false
	}
	return true
}

func (p *UpdateCampaignRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateCampaignRequest(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserInfo
type UpdateCampaignResponse struct {
	Success  bool      `thrift:"Success,1,required" db:"Success" json:"Success"`
	UserInfo *UserInfo `thrift:"UserInfo,2" db:"UserInfo" json:"UserInfo,omitempty"`
}

func NewUpdateCampaignResponse() *UpdateCampaignResponse {
	return &UpdateCampaignResponse{}
}

func (p *UpdateCampaignResponse) GetSuccess() bool {
	return p.Success
}

var UpdateCampaignResponse_UserInfo_DEFAULT *UserInfo

func (p *UpdateCampaignResponse) GetUserInfo() *UserInfo {
	if !p.IsSetUserInfo() {
		return UpdateCampaignResponse_UserInfo_DEFAULT
	}
	return p.UserInfo
}
func (p *UpdateCampaignResponse) IsSetUserInfo() bool {
	return p.UserInfo != nil
}

func (p *UpdateCampaignResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSuccess bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetSuccess = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSuccess {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Success is not set"))
	}
	return nil
}

func (p *UpdateCampaignResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *UpdateCampaignResponse) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.UserInfo = &UserInfo{}
	if err := p.UserInfo.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserInfo), err)
	}
	return nil
}

func (p *UpdateCampaignResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UpdateCampaignResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UpdateCampaignResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Success", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Success: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.Success)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Success (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Success: ", p), err)
	}
	return err
}

func (p *UpdateCampaignResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetUserInfo() {
		if err := oprot.WriteFieldBegin(ctx, "UserInfo", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:UserInfo: ", p), err)
		}
		if err := p.UserInfo.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserInfo), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:UserInfo: ", p), err)
		}
	}
	return err
}

func (p *UpdateCampaignResponse) Equals(other *UpdateCampaignResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Success != other.Success {
		return false
	}
	if !p.UserInfo.Equals(other.UserInfo) {
		return false
	}
	return true
}

func (p *UpdateCampaignResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateCampaignResponse(%+v)", *p)
}

// Attributes:
//  - UserID
//  - Options
type UpdateOptionsRequest struct {
	UserID  int32  `thrift:"UserID,1,required" db:"UserID" json:"UserID"`
	Options []byte `thrift:"Options,2,required" db:"Options" json:"Options"`
}

func NewUpdateOptionsRequest() *UpdateOptionsRequest {
	return &UpdateOptionsRequest{}
}

func (p *UpdateOptionsRequest) GetUserID() int32 {
	return p.UserID
}

func (p *UpdateOptionsRequest) GetOptions() []byte {
	return p.Options
}
func (p *UpdateOptionsRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetUserID bool = false
	var issetOptions bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetUserID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetOptions = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetUserID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserID is not set"))
	}
	if !issetOptions {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Options is not set"))
	}
	return nil
}

func (p *UpdateOptionsRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *UpdateOptionsRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Options = v
	}
	return nil
}

func (p *UpdateOptionsRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UpdateOptionsRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UpdateOptionsRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "UserID", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:UserID: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.UserID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:UserID: ", p), err)
	}
	return err
}

func (p *UpdateOptionsRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Options", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Options: ", p), err)
	}
	if err := oprot.WriteBinary(ctx, p.Options); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Options (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Options: ", p), err)
	}
	return err
}

func (p *UpdateOptionsRequest) Equals(other *UpdateOptionsRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.UserID != other.UserID {
		return false
	}
	if bytes.Compare(p.Options, other.Options) != 0 {
		return false
	}
	return true
}

func (p *UpdateOptionsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateOptionsRequest(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserInfo
type UpdateOptionsResponse struct {
	Success  bool      `thrift:"Success,1,required" db:"Success" json:"Success"`
	UserInfo *UserInfo `thrift:"UserInfo,2" db:"UserInfo" json:"UserInfo,omitempty"`
}

func NewUpdateOptionsResponse() *UpdateOptionsResponse {
	return &UpdateOptionsResponse{}
}

func (p *UpdateOptionsResponse) GetSuccess() bool {
	return p.Success
}

var UpdateOptionsResponse_UserInfo_DEFAULT *UserInfo

func (p *UpdateOptionsResponse) GetUserInfo() *UserInfo {
	if !p.IsSetUserInfo() {
		return UpdateOptionsResponse_UserInfo_DEFAULT
	}
	return p.UserInfo
}
func (p *UpdateOptionsResponse) IsSetUserInfo() bool {
	return p.UserInfo != nil
}

func (p *UpdateOptionsResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSuccess bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetSuccess = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSuccess {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Success is not set"))
	}
	return nil
}

func (p *UpdateOptionsResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *UpdateOptionsResponse) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.UserInfo = &UserInfo{}
	if err := p.UserInfo.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserInfo), err)
	}
	return nil
}

func (p *UpdateOptionsResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UpdateOptionsResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UpdateOptionsResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Success", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Success: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.Success)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Success (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Success: ", p), err)
	}
	return err
}

func (p *UpdateOptionsResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetUserInfo() {
		if err := oprot.WriteFieldBegin(ctx, "UserInfo", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:UserInfo: ", p), err)
		}
		if err := p.UserInfo.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserInfo), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:UserInfo: ", p), err)
		}
	}
	return err
}

func (p *UpdateOptionsResponse) Equals(other *UpdateOptionsResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Success != other.Success {
		return false
	}
	if !p.UserInfo.Equals(other.UserInfo) {
		return false
	}
	return true
}

func (p *UpdateOptionsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateOptionsResponse(%+v)", *p)
}

// Attributes:
//  - UserID
//  - NickName
type UpdateNickNameRequest struct {
	UserID   int32  `thrift:"UserID,1,required" db:"UserID" json:"UserID"`
	NickName string `thrift:"NickName,2,required" db:"NickName" json:"NickName"`
}

func NewUpdateNickNameRequest() *UpdateNickNameRequest {
	return &UpdateNickNameRequest{}
}

func (p *UpdateNickNameRequest) GetUserID() int32 {
	return p.UserID
}

func (p *UpdateNickNameRequest) GetNickName() string {
	return p.NickName
}
func (p *UpdateNickNameRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetUserID bool = false
	var issetNickName bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetUserID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetNickName = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetUserID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserID is not set"))
	}
	if !issetNickName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NickName is not set"))
	}
	return nil
}

func (p *UpdateNickNameRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *UpdateNickNameRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.NickName = v
	}
	return nil
}

func (p *UpdateNickNameRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UpdateNickNameRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UpdateNickNameRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "UserID", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:UserID: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.UserID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:UserID: ", p), err)
	}
	return err
}

func (p *UpdateNickNameRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "NickName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:NickName: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.NickName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.NickName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:NickName: ", p), err)
	}
	return err
}

func (p *UpdateNickNameRequest) Equals(other *UpdateNickNameRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.UserID != other.UserID {
		return false
	}
	if p.NickName != other.NickName {
		return false
	}
	return true
}

func (p *UpdateNickNameRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateNickNameRequest(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserInfo
type UpdateNickNameResponse struct {
	Success  bool      `thrift:"Success,1,required" db:"Success" json:"Success"`
	UserInfo *UserInfo `thrift:"UserInfo,2" db:"UserInfo" json:"UserInfo,omitempty"`
}

func NewUpdateNickNameResponse() *UpdateNickNameResponse {
	return &UpdateNickNameResponse{}
}

func (p *UpdateNickNameResponse) GetSuccess() bool {
	return p.Success
}

var UpdateNickNameResponse_UserInfo_DEFAULT *UserInfo

func (p *UpdateNickNameResponse) GetUserInfo() *UserInfo {
	if !p.IsSetUserInfo() {
		return UpdateNickNameResponse_UserInfo_DEFAULT
	}
	return p.UserInfo
}
func (p *UpdateNickNameResponse) IsSetUserInfo() bool {
	return p.UserInfo != nil
}

func (p *UpdateNickNameResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSuccess bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetSuccess = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSuccess {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Success is not set"))
	}
	return nil
}

func (p *UpdateNickNameResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *UpdateNickNameResponse) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.UserInfo = &UserInfo{}
	if err := p.UserInfo.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserInfo), err)
	}
	return nil
}

func (p *UpdateNickNameResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UpdateNickNameResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UpdateNickNameResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Success", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Success: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.Success)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Success (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Success: ", p), err)
	}
	return err
}

func (p *UpdateNickNameResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetUserInfo() {
		if err := oprot.WriteFieldBegin(ctx, "UserInfo", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:UserInfo: ", p), err)
		}
		if err := p.UserInfo.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserInfo), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:UserInfo: ", p), err)
		}
	}
	return err
}

func (p *UpdateNickNameResponse) Equals(other *UpdateNickNameResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Success != other.Success {
		return false
	}
	if !p.UserInfo.Equals(other.UserInfo) {
		return false
	}
	return true
}

func (p *UpdateNickNameResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateNickNameResponse(%+v)", *p)
}

type UserService interface {
	// Parameters:
	//  - Req
	Login(ctx context.Context, req *LoginRequest) (_r *LoginResponse, _err error)
	// Parameters:
	//  - Req
	Register(ctx context.Context, req *RegisterRequest) (_r *RegisterResponse, _err error)
	// Parameters:
	//  - Req
	GetUserInfo(ctx context.Context, req *GetUserInfoRequest) (_r *GetUserInfoResponse, _err error)
	// Parameters:
	//  - Req
	UserDown(ctx context.Context, req *UserDownRequest) (_r *UserDownResponse, _err error)
	// Parameters:
	//  - Req
	GetUserFriends(ctx context.Context, req *GetUserFriendsRequest) (_r *GetUserFriendsResponse, _err error)
	// Parameters:
	//  - Req
	AddUserPoints(ctx context.Context, req *AddUserPointsRequest) (_r *AddUserPointsResponse, _err error)
	// Parameters:
	//  - Req
	AddUserCash(ctx context.Context, req *AddUserCashRequest) (_r *AddUserCashResponse, _err error)
	// Parameters:
	//  - Req
	UserPlayedGame(ctx context.Context, req *UserPlayedGameRequest) (_r *UserPlayedGameResponse, _err error)
	// Parameters:
	//  - Req
	UserPayPoints(ctx context.Context, req *UserPayPointsRequest) (_r *UserPayPointsResponse, _err error)
	// Parameters:
	//  - Req
	UserPayCash(ctx context.Context, req *UserPayCashRequest) (_r *UserPayCashResponse, _err error)
	// Parameters:
	//  - Req
	UserAddItem(ctx context.Context, req *UserAddItemRequest) (_r *UserAddItemResponse, _err error)
	// Parameters:
	//  - Req
	UserAddFriend(ctx context.Context, req *UserAddFriendRequest) (_r *UserAddFriendResponse, _err error)
	// Parameters:
	//  - Req
	UpdateBag(ctx context.Context, req *UpdateBagRequest) (_r *UpdateBagResponse, _err error)
	// Parameters:
	//  - Req
	UpdateBuymenu(ctx context.Context, req *UpdateBuymenuRequest) (_r *UpdateBuymenuResponse, _err error)
	// Parameters:
	//  - Req
	UpdateCosmetics(ctx context.Context, req *UpdateCosmeticsRequest) (_r *UpdateCosmeticsResponse, _err error)
	// Parameters:
	//  - Req
	UpdateCampaign(ctx context.Context, req *UpdateCampaignRequest) (_r *UpdateCampaignResponse, _err error)
	// Parameters:
	//  - Req
	UpdateOptions(ctx context.Context, req *UpdateOptionsRequest) (_r *UpdateOptionsResponse, _err error)
	// Parameters:
	//  - Req
	UpdateNickName(ctx context.Context, req *UpdateNickNameRequest) (_r *UpdateNickNameResponse, _err error)
}

type UserServiceClient struct {
	c    thrift.TClient
	meta thrift.ResponseMeta
}

func NewUserServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *UserServiceClient {
	return &UserServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewUserServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *UserServiceClient {
	return &UserServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewUserServiceClient(c thrift.TClient) *UserServiceClient {
	return &UserServiceClient{
		c: c,
	}
}

func (p *UserServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *UserServiceClient) LastResponseMeta_() thrift.ResponseMeta {
	return p.meta
}

func (p *UserServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
	p.meta = meta
}

// Parameters:
//  - Req
func (p *UserServiceClient) Login(ctx context.Context, req *LoginRequest) (_r *LoginResponse, _err error) {
	var _args42 UserServiceLoginArgs
	_args42.Req = req
	var _result44 UserServiceLoginResult
	var _meta43 thrift.ResponseMeta
	_meta43, _err = p.Client_().Call(ctx, "Login", &_args42, &_result44)
	p.SetLastResponseMeta_(_meta43)
	if _err != nil {
		return
	}
	return _result44.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *UserServiceClient) Register(ctx context.Context, req *RegisterRequest) (_r *RegisterResponse, _err error) {
	var _args45 UserServiceRegisterArgs
	_args45.Req = req
	var _result47 UserServiceRegisterResult
	var _meta46 thrift.ResponseMeta
	_meta46, _err = p.Client_().Call(ctx, "Register", &_args45, &_result47)
	p.SetLastResponseMeta_(_meta46)
	if _err != nil {
		return
	}
	return _result47.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *UserServiceClient) GetUserInfo(ctx context.Context, req *GetUserInfoRequest) (_r *GetUserInfoResponse, _err error) {
	var _args48 UserServiceGetUserInfoArgs
	_args48.Req = req
	var _result50 UserServiceGetUserInfoResult
	var _meta49 thrift.ResponseMeta
	_meta49, _err = p.Client_().Call(ctx, "GetUserInfo", &_args48, &_result50)
	p.SetLastResponseMeta_(_meta49)
	if _err != nil {
		return
	}
	return _result50.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *UserServiceClient) UserDown(ctx context.Context, req *UserDownRequest) (_r *UserDownResponse, _err error) {
	var _args51 UserServiceUserDownArgs
	_args51.Req = req
	var _result53 UserServiceUserDownResult
	var _meta52 thrift.ResponseMeta
	_meta52, _err = p.Client_().Call(ctx, "UserDown", &_args51, &_result53)
	p.SetLastResponseMeta_(_meta52)
	if _err != nil {
		return
	}
	return _result53.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *UserServiceClient) GetUserFriends(ctx context.Context, req *GetUserFriendsRequest) (_r *GetUserFriendsResponse, _err error) {
	var _args54 UserServiceGetUserFriendsArgs
	_args54.Req = req
	var _result56 UserServiceGetUserFriendsResult
	var _meta55 thrift.ResponseMeta
	_meta55, _err = p.Client_().Call(ctx, "GetUserFriends", &_args54, &_result56)
	p.SetLastResponseMeta_(_meta55)
	if _err != nil {
		return
	}
	return _result56.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *UserServiceClient) AddUserPoints(ctx context.Context, req *AddUserPointsRequest) (_r *AddUserPointsResponse, _err error) {
	var _args57 UserServiceAddUserPointsArgs
	_args57.Req = req
	var _result59 UserServiceAddUserPointsResult
	var _meta58 thrift.ResponseMeta
	_meta58, _err = p.Client_().Call(ctx, "AddUserPoints", &_args57, &_result59)
	p.SetLastResponseMeta_(_meta58)
	if _err != nil {
		return
	}
	return _result59.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *UserServiceClient) AddUserCash(ctx context.Context, req *AddUserCashRequest) (_r *AddUserCashResponse, _err error) {
	var _args60 UserServiceAddUserCashArgs
	_args60.Req = req
	var _result62 UserServiceAddUserCashResult
	var _meta61 thrift.ResponseMeta
	_meta61, _err = p.Client_().Call(ctx, "AddUserCash", &_args60, &_result62)
	p.SetLastResponseMeta_(_meta61)
	if _err != nil {
		return
	}
	return _result62.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *UserServiceClient) UserPlayedGame(ctx context.Context, req *UserPlayedGameRequest) (_r *UserPlayedGameResponse, _err error) {
	var _args63 UserServiceUserPlayedGameArgs
	_args63.Req = req
	var _result65 UserServiceUserPlayedGameResult
	var _meta64 thrift.ResponseMeta
	_meta64, _err = p.Client_().Call(ctx, "UserPlayedGame", &_args63, &_result65)
	p.SetLastResponseMeta_(_meta64)
	if _err != nil {
		return
	}
	return _result65.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *UserServiceClient) UserPayPoints(ctx context.Context, req *UserPayPointsRequest) (_r *UserPayPointsResponse, _err error) {
	var _args66 UserServiceUserPayPointsArgs
	_args66.Req = req
	var _result68 UserServiceUserPayPointsResult
	var _meta67 thrift.ResponseMeta
	_meta67, _err = p.Client_().Call(ctx, "UserPayPoints", &_args66, &_result68)
	p.SetLastResponseMeta_(_meta67)
	if _err != nil {
		return
	}
	return _result68.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *UserServiceClient) UserPayCash(ctx context.Context, req *UserPayCashRequest) (_r *UserPayCashResponse, _err error) {
	var _args69 UserServiceUserPayCashArgs
	_args69.Req = req
	var _result71 UserServiceUserPayCashResult
	var _meta70 thrift.ResponseMeta
	_meta70, _err = p.Client_().Call(ctx, "UserPayCash", &_args69, &_result71)
	p.SetLastResponseMeta_(_meta70)
	if _err != nil {
		return
	}
	return _result71.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *UserServiceClient) UserAddItem(ctx context.Context, req *UserAddItemRequest) (_r *UserAddItemResponse, _err error) {
	var _args72 UserServiceUserAddItemArgs
	_args72.Req = req
	var _result74 UserServiceUserAddItemResult
	var _meta73 thrift.ResponseMeta
	_meta73, _err = p.Client_().Call(ctx, "UserAddItem", &_args72, &_result74)
	p.SetLastResponseMeta_(_meta73)
	if _err != nil {
		return
	}
	return _result74.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *UserServiceClient) UserAddFriend(ctx context.Context, req *UserAddFriendRequest) (_r *UserAddFriendResponse, _err error) {
	var _args75 UserServiceUserAddFriendArgs
	_args75.Req = req
	var _result77 UserServiceUserAddFriendResult
	var _meta76 thrift.ResponseMeta
	_meta76, _err = p.Client_().Call(ctx, "UserAddFriend", &_args75, &_result77)
	p.SetLastResponseMeta_(_meta76)
	if _err != nil {
		return
	}
	return _result77.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *UserServiceClient) UpdateBag(ctx context.Context, req *UpdateBagRequest) (_r *UpdateBagResponse, _err error) {
	var _args78 UserServiceUpdateBagArgs
	_args78.Req = req
	var _result80 UserServiceUpdateBagResult
	var _meta79 thrift.ResponseMeta
	_meta79, _err = p.Client_().Call(ctx, "UpdateBag", &_args78, &_result80)
	p.SetLastResponseMeta_(_meta79)
	if _err != nil {
		return
	}
	return _result80.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *UserServiceClient) UpdateBuymenu(ctx context.Context, req *UpdateBuymenuRequest) (_r *UpdateBuymenuResponse, _err error) {
	var _args81 UserServiceUpdateBuymenuArgs
	_args81.Req = req
	var _result83 UserServiceUpdateBuymenuResult
	var _meta82 thrift.ResponseMeta
	_meta82, _err = p.Client_().Call(ctx, "UpdateBuymenu", &_args81, &_result83)
	p.SetLastResponseMeta_(_meta82)
	if _err != nil {
		return
	}
	return _result83.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *UserServiceClient) UpdateCosmetics(ctx context.Context, req *UpdateCosmeticsRequest) (_r *UpdateCosmeticsResponse, _err error) {
	var _args84 UserServiceUpdateCosmeticsArgs
	_args84.Req = req
	var _result86 UserServiceUpdateCosmeticsResult
	var _meta85 thrift.ResponseMeta
	_meta85, _err = p.Client_().Call(ctx, "UpdateCosmetics", &_args84, &_result86)
	p.SetLastResponseMeta_(_meta85)
	if _err != nil {
		return
	}
	return _result86.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *UserServiceClient) UpdateCampaign(ctx context.Context, req *UpdateCampaignRequest) (_r *UpdateCampaignResponse, _err error) {
	var _args87 UserServiceUpdateCampaignArgs
	_args87.Req = req
	var _result89 UserServiceUpdateCampaignResult
	var _meta88 thrift.ResponseMeta
	_meta88, _err = p.Client_().Call(ctx, "UpdateCampaign", &_args87, &_result89)
	p.SetLastResponseMeta_(_meta88)
	if _err != nil {
		return
	}
	return _result89.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *UserServiceClient) UpdateOptions(ctx context.Context, req *UpdateOptionsRequest) (_r *UpdateOptionsResponse, _err error) {
	var _args90 UserServiceUpdateOptionsArgs
	_args90.Req = req
	var _result92 UserServiceUpdateOptionsResult
	var _meta91 thrift.ResponseMeta
	_meta91, _err = p.Client_().Call(ctx, "UpdateOptions", &_args90, &_result92)
	p.SetLastResponseMeta_(_meta91)
	if _err != nil {
		return
	}
	return _result92.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *UserServiceClient) UpdateNickName(ctx context.Context, req *UpdateNickNameRequest) (_r *UpdateNickNameResponse, _err error) {
	var _args93 UserServiceUpdateNickNameArgs
	_args93.Req = req
	var _result95 UserServiceUpdateNickNameResult
	var _meta94 thrift.ResponseMeta
	_meta94, _err = p.Client_().Call(ctx, "UpdateNickName", &_args93, &_result95)
	p.SetLastResponseMeta_(_meta94)
	if _err != nil {
		return
	}
	return _result95.GetSuccess(), nil
}

type UserServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      UserService
}

func (p *UserServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *UserServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *UserServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewUserServiceProcessor(handler UserService) *UserServiceProcessor {

	self96 := &UserServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self96.processorMap["Login"] = &userServiceProcessorLogin{handler: handler}
	self96.processorMap["Register"] = &userServiceProcessorRegister{handler: handler}
	self96.processorMap["GetUserInfo"] = &userServiceProcessorGetUserInfo{handler: handler}
	self96.processorMap["UserDown"] = &userServiceProcessorUserDown{handler: handler}
	self96.processorMap["GetUserFriends"] = &userServiceProcessorGetUserFriends{handler: handler}
	self96.processorMap["AddUserPoints"] = &userServiceProcessorAddUserPoints{handler: handler}
	self96.processorMap["AddUserCash"] = &userServiceProcessorAddUserCash{handler: handler}
	self96.processorMap["UserPlayedGame"] = &userServiceProcessorUserPlayedGame{handler: handler}
	self96.processorMap["UserPayPoints"] = &userServiceProcessorUserPayPoints{handler: handler}
	self96.processorMap["UserPayCash"] = &userServiceProcessorUserPayCash{handler: handler}
	self96.processorMap["UserAddItem"] = &userServiceProcessorUserAddItem{handler: handler}
	self96.processorMap["UserAddFriend"] = &userServiceProcessorUserAddFriend{handler: handler}
	self96.processorMap["UpdateBag"] = &userServiceProcessorUpdateBag{handler: handler}
	self96.processorMap["UpdateBuymenu"] = &userServiceProcessorUpdateBuymenu{handler: handler}
	self96.processorMap["UpdateCosmetics"] = &userServiceProcessorUpdateCosmetics{handler: handler}
	self96.processorMap["UpdateCampaign"] = &userServiceProcessorUpdateCampaign{handler: handler}
	self96.processorMap["UpdateOptions"] = &userServiceProcessorUpdateOptions{handler: handler}
	self96.processorMap["UpdateNickName"] = &userServiceProcessorUpdateNickName{handler: handler}
	return self96
}

func (p *UserServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
	if err2 != nil {
		return false, thrift.WrapTException(err2)
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(ctx, thrift.STRUCT)
	iprot.ReadMessageEnd(ctx)
	x97 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
	x97.Write(ctx, oprot)
	oprot.WriteMessageEnd(ctx)
	oprot.Flush(ctx)
	return false, x97

}

type userServiceProcessorLogin struct {
	handler UserService
}

func (p *userServiceProcessorLogin) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserServiceLoginArgs{}
	var err2 error
	if err2 = args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "Login", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := UserServiceLoginResult{}
	var retval *LoginResponse
	if retval, err2 = p.handler.Login(ctx, args.Req); err2 != nil {
		tickerCancel()
		if err2 == thrift.ErrAbandonRequest {
			return false, thrift.WrapTException(err2)
		}
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Login: "+err2.Error())
		oprot.WriteMessageBegin(ctx, "Login", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return true, thrift.WrapTException(err2)
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 = oprot.WriteMessageBegin(ctx, "Login", thrift.REPLY, seqId); err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err != nil {
		return
	}
	return true, err
}

type userServiceProcessorRegister struct {
	handler UserService
}

func (p *userServiceProcessorRegister) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserServiceRegisterArgs{}
	var err2 error
	if err2 = args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "Register", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := UserServiceRegisterResult{}
	var retval *RegisterResponse
	if retval, err2 = p.handler.Register(ctx, args.Req); err2 != nil {
		tickerCancel()
		if err2 == thrift.ErrAbandonRequest {
			return false, thrift.WrapTException(err2)
		}
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Register: "+err2.Error())
		oprot.WriteMessageBegin(ctx, "Register", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return true, thrift.WrapTException(err2)
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 = oprot.WriteMessageBegin(ctx, "Register", thrift.REPLY, seqId); err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err != nil {
		return
	}
	return true, err
}

type userServiceProcessorGetUserInfo struct {
	handler UserService
}

func (p *userServiceProcessorGetUserInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserServiceGetUserInfoArgs{}
	var err2 error
	if err2 = args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "GetUserInfo", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := UserServiceGetUserInfoResult{}
	var retval *GetUserInfoResponse
	if retval, err2 = p.handler.GetUserInfo(ctx, args.Req); err2 != nil {
		tickerCancel()
		if err2 == thrift.ErrAbandonRequest {
			return false, thrift.WrapTException(err2)
		}
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetUserInfo: "+err2.Error())
		oprot.WriteMessageBegin(ctx, "GetUserInfo", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return true, thrift.WrapTException(err2)
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 = oprot.WriteMessageBegin(ctx, "GetUserInfo", thrift.REPLY, seqId); err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err != nil {
		return
	}
	return true, err
}

type userServiceProcessorUserDown struct {
	handler UserService
}

func (p *userServiceProcessorUserDown) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserServiceUserDownArgs{}
	var err2 error
	if err2 = args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "UserDown", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := UserServiceUserDownResult{}
	var retval *UserDownResponse
	if retval, err2 = p.handler.UserDown(ctx, args.Req); err2 != nil {
		tickerCancel()
		if err2 == thrift.ErrAbandonRequest {
			return false, thrift.WrapTException(err2)
		}
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UserDown: "+err2.Error())
		oprot.WriteMessageBegin(ctx, "UserDown", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return true, thrift.WrapTException(err2)
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 = oprot.WriteMessageBegin(ctx, "UserDown", thrift.REPLY, seqId); err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err != nil {
		return
	}
	return true, err
}

type userServiceProcessorGetUserFriends struct {
	handler UserService
}

func (p *userServiceProcessorGetUserFriends) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserServiceGetUserFriendsArgs{}
	var err2 error
	if err2 = args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "GetUserFriends", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := UserServiceGetUserFriendsResult{}
	var retval *GetUserFriendsResponse
	if retval, err2 = p.handler.GetUserFriends(ctx, args.Req); err2 != nil {
		tickerCancel()
		if err2 == thrift.ErrAbandonRequest {
			return false, thrift.WrapTException(err2)
		}
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetUserFriends: "+err2.Error())
		oprot.WriteMessageBegin(ctx, "GetUserFriends", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return true, thrift.WrapTException(err2)
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 = oprot.WriteMessageBegin(ctx, "GetUserFriends", thrift.REPLY, seqId); err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err != nil {
		return
	}
	return true, err
}

type userServiceProcessorAddUserPoints struct {
	handler UserService
}

func (p *userServiceProcessorAddUserPoints) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserServiceAddUserPointsArgs{}
	var err2 error
	if err2 = args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "AddUserPoints", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := UserServiceAddUserPointsResult{}
	var retval *AddUserPointsResponse
	if retval, err2 = p.handler.AddUserPoints(ctx, args.Req); err2 != nil {
		tickerCancel()
		if err2 == thrift.ErrAbandonRequest {
			return false, thrift.WrapTException(err2)
		}
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddUserPoints: "+err2.Error())
		oprot.WriteMessageBegin(ctx, "AddUserPoints", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return true, thrift.WrapTException(err2)
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 = oprot.WriteMessageBegin(ctx, "AddUserPoints", thrift.REPLY, seqId); err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err != nil {
		return
	}
	return true, err
}

type userServiceProcessorAddUserCash struct {
	handler UserService
}

func (p *userServiceProcessorAddUserCash) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserServiceAddUserCashArgs{}
	var err2 error
	if err2 = args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "AddUserCash", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := UserServiceAddUserCashResult{}
	var retval *AddUserCashResponse
	if retval, err2 = p.handler.AddUserCash(ctx, args.Req); err2 != nil {
		tickerCancel()
		if err2 == thrift.ErrAbandonRequest {
			return false, thrift.WrapTException(err2)
		}
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddUserCash: "+err2.Error())
		oprot.WriteMessageBegin(ctx, "AddUserCash", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return true, thrift.WrapTException(err2)
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 = oprot.WriteMessageBegin(ctx, "AddUserCash", thrift.REPLY, seqId); err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err != nil {
		return
	}
	return true, err
}

type userServiceProcessorUserPlayedGame struct {
	handler UserService
}

func (p *userServiceProcessorUserPlayedGame) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserServiceUserPlayedGameArgs{}
	var err2 error
	if err2 = args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "UserPlayedGame", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := UserServiceUserPlayedGameResult{}
	var retval *UserPlayedGameResponse
	if retval, err2 = p.handler.UserPlayedGame(ctx, args.Req); err2 != nil {
		tickerCancel()
		if err2 == thrift.ErrAbandonRequest {
			return false, thrift.WrapTException(err2)
		}
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UserPlayedGame: "+err2.Error())
		oprot.WriteMessageBegin(ctx, "UserPlayedGame", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return true, thrift.WrapTException(err2)
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 = oprot.WriteMessageBegin(ctx, "UserPlayedGame", thrift.REPLY, seqId); err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err != nil {
		return
	}
	return true, err
}

type userServiceProcessorUserPayPoints struct {
	handler UserService
}

func (p *userServiceProcessorUserPayPoints) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserServiceUserPayPointsArgs{}
	var err2 error
	if err2 = args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "UserPayPoints", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := UserServiceUserPayPointsResult{}
	var retval *UserPayPointsResponse
	if retval, err2 = p.handler.UserPayPoints(ctx, args.Req); err2 != nil {
		tickerCancel()
		if err2 == thrift.ErrAbandonRequest {
			return false, thrift.WrapTException(err2)
		}
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UserPayPoints: "+err2.Error())
		oprot.WriteMessageBegin(ctx, "UserPayPoints", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return true, thrift.WrapTException(err2)
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 = oprot.WriteMessageBegin(ctx, "UserPayPoints", thrift.REPLY, seqId); err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err != nil {
		return
	}
	return true, err
}

type userServiceProcessorUserPayCash struct {
	handler UserService
}

func (p *userServiceProcessorUserPayCash) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserServiceUserPayCashArgs{}
	var err2 error
	if err2 = args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "UserPayCash", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := UserServiceUserPayCashResult{}
	var retval *UserPayCashResponse
	if retval, err2 = p.handler.UserPayCash(ctx, args.Req); err2 != nil {
		tickerCancel()
		if err2 == thrift.ErrAbandonRequest {
			return false, thrift.WrapTException(err2)
		}
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UserPayCash: "+err2.Error())
		oprot.WriteMessageBegin(ctx, "UserPayCash", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return true, thrift.WrapTException(err2)
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 = oprot.WriteMessageBegin(ctx, "UserPayCash", thrift.REPLY, seqId); err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err != nil {
		return
	}
	return true, err
}

type userServiceProcessorUserAddItem struct {
	handler UserService
}

func (p *userServiceProcessorUserAddItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserServiceUserAddItemArgs{}
	var err2 error
	if err2 = args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "UserAddItem", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := UserServiceUserAddItemResult{}
	var retval *UserAddItemResponse
	if retval, err2 = p.handler.UserAddItem(ctx, args.Req); err2 != nil {
		tickerCancel()
		if err2 == thrift.ErrAbandonRequest {
			return false, thrift.WrapTException(err2)
		}
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UserAddItem: "+err2.Error())
		oprot.WriteMessageBegin(ctx, "UserAddItem", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return true, thrift.WrapTException(err2)
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 = oprot.WriteMessageBegin(ctx, "UserAddItem", thrift.REPLY, seqId); err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err != nil {
		return
	}
	return true, err
}

type userServiceProcessorUserAddFriend struct {
	handler UserService
}

func (p *userServiceProcessorUserAddFriend) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserServiceUserAddFriendArgs{}
	var err2 error
	if err2 = args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "UserAddFriend", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := UserServiceUserAddFriendResult{}
	var retval *UserAddFriendResponse
	if retval, err2 = p.handler.UserAddFriend(ctx, args.Req); err2 != nil {
		tickerCancel()
		if err2 == thrift.ErrAbandonRequest {
			return false, thrift.WrapTException(err2)
		}
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UserAddFriend: "+err2.Error())
		oprot.WriteMessageBegin(ctx, "UserAddFriend", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return true, thrift.WrapTException(err2)
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 = oprot.WriteMessageBegin(ctx, "UserAddFriend", thrift.REPLY, seqId); err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err != nil {
		return
	}
	return true, err
}

type userServiceProcessorUpdateBag struct {
	handler UserService
}

func (p *userServiceProcessorUpdateBag) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserServiceUpdateBagArgs{}
	var err2 error
	if err2 = args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "UpdateBag", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := UserServiceUpdateBagResult{}
	var retval *UpdateBagResponse
	if retval, err2 = p.handler.UpdateBag(ctx, args.Req); err2 != nil {
		tickerCancel()
		if err2 == thrift.ErrAbandonRequest {
			return false, thrift.WrapTException(err2)
		}
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateBag: "+err2.Error())
		oprot.WriteMessageBegin(ctx, "UpdateBag", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return true, thrift.WrapTException(err2)
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 = oprot.WriteMessageBegin(ctx, "UpdateBag", thrift.REPLY, seqId); err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err != nil {
		return
	}
	return true, err
}

type userServiceProcessorUpdateBuymenu struct {
	handler UserService
}

func (p *userServiceProcessorUpdateBuymenu) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserServiceUpdateBuymenuArgs{}
	var err2 error
	if err2 = args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "UpdateBuymenu", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := UserServiceUpdateBuymenuResult{}
	var retval *UpdateBuymenuResponse
	if retval, err2 = p.handler.UpdateBuymenu(ctx, args.Req); err2 != nil {
		tickerCancel()
		if err2 == thrift.ErrAbandonRequest {
			return false, thrift.WrapTException(err2)
		}
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateBuymenu: "+err2.Error())
		oprot.WriteMessageBegin(ctx, "UpdateBuymenu", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return true, thrift.WrapTException(err2)
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 = oprot.WriteMessageBegin(ctx, "UpdateBuymenu", thrift.REPLY, seqId); err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err != nil {
		return
	}
	return true, err
}

type userServiceProcessorUpdateCosmetics struct {
	handler UserService
}

func (p *userServiceProcessorUpdateCosmetics) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserServiceUpdateCosmeticsArgs{}
	var err2 error
	if err2 = args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "UpdateCosmetics", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := UserServiceUpdateCosmeticsResult{}
	var retval *UpdateCosmeticsResponse
	if retval, err2 = p.handler.UpdateCosmetics(ctx, args.Req); err2 != nil {
		tickerCancel()
		if err2 == thrift.ErrAbandonRequest {
			return false, thrift.WrapTException(err2)
		}
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateCosmetics: "+err2.Error())
		oprot.WriteMessageBegin(ctx, "UpdateCosmetics", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return true, thrift.WrapTException(err2)
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 = oprot.WriteMessageBegin(ctx, "UpdateCosmetics", thrift.REPLY, seqId); err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err != nil {
		return
	}
	return true, err
}

type userServiceProcessorUpdateCampaign struct {
	handler UserService
}

func (p *userServiceProcessorUpdateCampaign) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserServiceUpdateCampaignArgs{}
	var err2 error
	if err2 = args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "UpdateCampaign", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := UserServiceUpdateCampaignResult{}
	var retval *UpdateCampaignResponse
	if retval, err2 = p.handler.UpdateCampaign(ctx, args.Req); err2 != nil {
		tickerCancel()
		if err2 == thrift.ErrAbandonRequest {
			return false, thrift.WrapTException(err2)
		}
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateCampaign: "+err2.Error())
		oprot.WriteMessageBegin(ctx, "UpdateCampaign", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return true, thrift.WrapTException(err2)
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 = oprot.WriteMessageBegin(ctx, "UpdateCampaign", thrift.REPLY, seqId); err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err != nil {
		return
	}
	return true, err
}

type userServiceProcessorUpdateOptions struct {
	handler UserService
}

func (p *userServiceProcessorUpdateOptions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserServiceUpdateOptionsArgs{}
	var err2 error
	if err2 = args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "UpdateOptions", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := UserServiceUpdateOptionsResult{}
	var retval *UpdateOptionsResponse
	if retval, err2 = p.handler.UpdateOptions(ctx, args.Req); err2 != nil {
		tickerCancel()
		if err2 == thrift.ErrAbandonRequest {
			return false, thrift.WrapTException(err2)
		}
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateOptions: "+err2.Error())
		oprot.WriteMessageBegin(ctx, "UpdateOptions", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return true, thrift.WrapTException(err2)
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 = oprot.WriteMessageBegin(ctx, "UpdateOptions", thrift.REPLY, seqId); err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err != nil {
		return
	}
	return true, err
}

type userServiceProcessorUpdateNickName struct {
	handler UserService
}

func (p *userServiceProcessorUpdateNickName) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserServiceUpdateNickNameArgs{}
	var err2 error
	if err2 = args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "UpdateNickName", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := UserServiceUpdateNickNameResult{}
	var retval *UpdateNickNameResponse
	if retval, err2 = p.handler.UpdateNickName(ctx, args.Req); err2 != nil {
		tickerCancel()
		if err2 == thrift.ErrAbandonRequest {
			return false, thrift.WrapTException(err2)
		}
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateNickName: "+err2.Error())
		oprot.WriteMessageBegin(ctx, "UpdateNickName", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return true, thrift.WrapTException(err2)
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 = oprot.WriteMessageBegin(ctx, "UpdateNickName", thrift.REPLY, seqId); err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Req
type UserServiceLoginArgs struct {
	Req *LoginRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewUserServiceLoginArgs() *UserServiceLoginArgs {
	return &UserServiceLoginArgs{}
}

var UserServiceLoginArgs_Req_DEFAULT *LoginRequest

func (p *UserServiceLoginArgs) GetReq() *LoginRequest {
	if !p.IsSetReq() {
		return UserServiceLoginArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceLoginArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceLoginArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserServiceLoginArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Req = &LoginRequest{}
	if err := p.Req.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *UserServiceLoginArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Login_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserServiceLoginArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *UserServiceLoginArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceLoginArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserServiceLoginResult struct {
	Success *LoginResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserServiceLoginResult() *UserServiceLoginResult {
	return &UserServiceLoginResult{}
}

var UserServiceLoginResult_Success_DEFAULT *LoginResponse

func (p *UserServiceLoginResult) GetSuccess() *LoginResponse {
	if !p.IsSetSuccess() {
		return UserServiceLoginResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceLoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceLoginResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserServiceLoginResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &LoginResponse{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *UserServiceLoginResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Login_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserServiceLoginResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserServiceLoginResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceLoginResult(%+v)", *p)
}

// Attributes:
//  - Req
type UserServiceRegisterArgs struct {
	Req *RegisterRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewUserServiceRegisterArgs() *UserServiceRegisterArgs {
	return &UserServiceRegisterArgs{}
}

var UserServiceRegisterArgs_Req_DEFAULT *RegisterRequest

func (p *UserServiceRegisterArgs) GetReq() *RegisterRequest {
	if !p.IsSetReq() {
		return UserServiceRegisterArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceRegisterArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceRegisterArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserServiceRegisterArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Req = &RegisterRequest{}
	if err := p.Req.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *UserServiceRegisterArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Register_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserServiceRegisterArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *UserServiceRegisterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceRegisterArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserServiceRegisterResult struct {
	Success *RegisterResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserServiceRegisterResult() *UserServiceRegisterResult {
	return &UserServiceRegisterResult{}
}

var UserServiceRegisterResult_Success_DEFAULT *RegisterResponse

func (p *UserServiceRegisterResult) GetSuccess() *RegisterResponse {
	if !p.IsSetSuccess() {
		return UserServiceRegisterResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceRegisterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceRegisterResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserServiceRegisterResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &RegisterResponse{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *UserServiceRegisterResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Register_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserServiceRegisterResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserServiceRegisterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceRegisterResult(%+v)", *p)
}

// Attributes:
//  - Req
type UserServiceGetUserInfoArgs struct {
	Req *GetUserInfoRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewUserServiceGetUserInfoArgs() *UserServiceGetUserInfoArgs {
	return &UserServiceGetUserInfoArgs{}
}

var UserServiceGetUserInfoArgs_Req_DEFAULT *GetUserInfoRequest

func (p *UserServiceGetUserInfoArgs) GetReq() *GetUserInfoRequest {
	if !p.IsSetReq() {
		return UserServiceGetUserInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceGetUserInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceGetUserInfoArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserServiceGetUserInfoArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Req = &GetUserInfoRequest{}
	if err := p.Req.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *UserServiceGetUserInfoArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "GetUserInfo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserServiceGetUserInfoArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *UserServiceGetUserInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetUserInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserServiceGetUserInfoResult struct {
	Success *GetUserInfoResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserServiceGetUserInfoResult() *UserServiceGetUserInfoResult {
	return &UserServiceGetUserInfoResult{}
}

var UserServiceGetUserInfoResult_Success_DEFAULT *GetUserInfoResponse

func (p *UserServiceGetUserInfoResult) GetSuccess() *GetUserInfoResponse {
	if !p.IsSetSuccess() {
		return UserServiceGetUserInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceGetUserInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceGetUserInfoResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserServiceGetUserInfoResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &GetUserInfoResponse{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *UserServiceGetUserInfoResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "GetUserInfo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserServiceGetUserInfoResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserServiceGetUserInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetUserInfoResult(%+v)", *p)
}

// Attributes:
//  - Req
type UserServiceUserDownArgs struct {
	Req *UserDownRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewUserServiceUserDownArgs() *UserServiceUserDownArgs {
	return &UserServiceUserDownArgs{}
}

var UserServiceUserDownArgs_Req_DEFAULT *UserDownRequest

func (p *UserServiceUserDownArgs) GetReq() *UserDownRequest {
	if !p.IsSetReq() {
		return UserServiceUserDownArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceUserDownArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceUserDownArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserServiceUserDownArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Req = &UserDownRequest{}
	if err := p.Req.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *UserServiceUserDownArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UserDown_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserServiceUserDownArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *UserServiceUserDownArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUserDownArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserServiceUserDownResult struct {
	Success *UserDownResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserServiceUserDownResult() *UserServiceUserDownResult {
	return &UserServiceUserDownResult{}
}

var UserServiceUserDownResult_Success_DEFAULT *UserDownResponse

func (p *UserServiceUserDownResult) GetSuccess() *UserDownResponse {
	if !p.IsSetSuccess() {
		return UserServiceUserDownResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceUserDownResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceUserDownResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserServiceUserDownResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &UserDownResponse{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *UserServiceUserDownResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UserDown_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserServiceUserDownResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserServiceUserDownResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUserDownResult(%+v)", *p)
}

// Attributes:
//  - Req
type UserServiceGetUserFriendsArgs struct {
	Req *GetUserFriendsRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewUserServiceGetUserFriendsArgs() *UserServiceGetUserFriendsArgs {
	return &UserServiceGetUserFriendsArgs{}
}

var UserServiceGetUserFriendsArgs_Req_DEFAULT *GetUserFriendsRequest

func (p *UserServiceGetUserFriendsArgs) GetReq() *GetUserFriendsRequest {
	if !p.IsSetReq() {
		return UserServiceGetUserFriendsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceGetUserFriendsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceGetUserFriendsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserServiceGetUserFriendsArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Req = &GetUserFriendsRequest{}
	if err := p.Req.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *UserServiceGetUserFriendsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "GetUserFriends_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserServiceGetUserFriendsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *UserServiceGetUserFriendsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetUserFriendsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserServiceGetUserFriendsResult struct {
	Success *GetUserFriendsResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserServiceGetUserFriendsResult() *UserServiceGetUserFriendsResult {
	return &UserServiceGetUserFriendsResult{}
}

var UserServiceGetUserFriendsResult_Success_DEFAULT *GetUserFriendsResponse

func (p *UserServiceGetUserFriendsResult) GetSuccess() *GetUserFriendsResponse {
	if !p.IsSetSuccess() {
		return UserServiceGetUserFriendsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceGetUserFriendsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceGetUserFriendsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserServiceGetUserFriendsResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &GetUserFriendsResponse{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *UserServiceGetUserFriendsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "GetUserFriends_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserServiceGetUserFriendsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserServiceGetUserFriendsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetUserFriendsResult(%+v)", *p)
}

// Attributes:
//  - Req
type UserServiceAddUserPointsArgs struct {
	Req *AddUserPointsRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewUserServiceAddUserPointsArgs() *UserServiceAddUserPointsArgs {
	return &UserServiceAddUserPointsArgs{}
}

var UserServiceAddUserPointsArgs_Req_DEFAULT *AddUserPointsRequest

func (p *UserServiceAddUserPointsArgs) GetReq() *AddUserPointsRequest {
	if !p.IsSetReq() {
		return UserServiceAddUserPointsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceAddUserPointsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceAddUserPointsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserServiceAddUserPointsArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Req = &AddUserPointsRequest{}
	if err := p.Req.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *UserServiceAddUserPointsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AddUserPoints_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserServiceAddUserPointsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *UserServiceAddUserPointsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceAddUserPointsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserServiceAddUserPointsResult struct {
	Success *AddUserPointsResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserServiceAddUserPointsResult() *UserServiceAddUserPointsResult {
	return &UserServiceAddUserPointsResult{}
}

var UserServiceAddUserPointsResult_Success_DEFAULT *AddUserPointsResponse

func (p *UserServiceAddUserPointsResult) GetSuccess() *AddUserPointsResponse {
	if !p.IsSetSuccess() {
		return UserServiceAddUserPointsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceAddUserPointsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceAddUserPointsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserServiceAddUserPointsResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AddUserPointsResponse{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *UserServiceAddUserPointsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AddUserPoints_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserServiceAddUserPointsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserServiceAddUserPointsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceAddUserPointsResult(%+v)", *p)
}

// Attributes:
//  - Req
type UserServiceAddUserCashArgs struct {
	Req *AddUserCashRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewUserServiceAddUserCashArgs() *UserServiceAddUserCashArgs {
	return &UserServiceAddUserCashArgs{}
}

var UserServiceAddUserCashArgs_Req_DEFAULT *AddUserCashRequest

func (p *UserServiceAddUserCashArgs) GetReq() *AddUserCashRequest {
	if !p.IsSetReq() {
		return UserServiceAddUserCashArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceAddUserCashArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceAddUserCashArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserServiceAddUserCashArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Req = &AddUserCashRequest{}
	if err := p.Req.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *UserServiceAddUserCashArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AddUserCash_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserServiceAddUserCashArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *UserServiceAddUserCashArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceAddUserCashArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserServiceAddUserCashResult struct {
	Success *AddUserCashResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserServiceAddUserCashResult() *UserServiceAddUserCashResult {
	return &UserServiceAddUserCashResult{}
}

var UserServiceAddUserCashResult_Success_DEFAULT *AddUserCashResponse

func (p *UserServiceAddUserCashResult) GetSuccess() *AddUserCashResponse {
	if !p.IsSetSuccess() {
		return UserServiceAddUserCashResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceAddUserCashResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceAddUserCashResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserServiceAddUserCashResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AddUserCashResponse{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *UserServiceAddUserCashResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AddUserCash_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserServiceAddUserCashResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserServiceAddUserCashResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceAddUserCashResult(%+v)", *p)
}

// Attributes:
//  - Req
type UserServiceUserPlayedGameArgs struct {
	Req *UserPlayedGameRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewUserServiceUserPlayedGameArgs() *UserServiceUserPlayedGameArgs {
	return &UserServiceUserPlayedGameArgs{}
}

var UserServiceUserPlayedGameArgs_Req_DEFAULT *UserPlayedGameRequest

func (p *UserServiceUserPlayedGameArgs) GetReq() *UserPlayedGameRequest {
	if !p.IsSetReq() {
		return UserServiceUserPlayedGameArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceUserPlayedGameArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceUserPlayedGameArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserServiceUserPlayedGameArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Req = &UserPlayedGameRequest{}
	if err := p.Req.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *UserServiceUserPlayedGameArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UserPlayedGame_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserServiceUserPlayedGameArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *UserServiceUserPlayedGameArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUserPlayedGameArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserServiceUserPlayedGameResult struct {
	Success *UserPlayedGameResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserServiceUserPlayedGameResult() *UserServiceUserPlayedGameResult {
	return &UserServiceUserPlayedGameResult{}
}

var UserServiceUserPlayedGameResult_Success_DEFAULT *UserPlayedGameResponse

func (p *UserServiceUserPlayedGameResult) GetSuccess() *UserPlayedGameResponse {
	if !p.IsSetSuccess() {
		return UserServiceUserPlayedGameResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceUserPlayedGameResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceUserPlayedGameResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserServiceUserPlayedGameResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &UserPlayedGameResponse{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *UserServiceUserPlayedGameResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UserPlayedGame_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserServiceUserPlayedGameResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserServiceUserPlayedGameResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUserPlayedGameResult(%+v)", *p)
}

// Attributes:
//  - Req
type UserServiceUserPayPointsArgs struct {
	Req *UserPayPointsRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewUserServiceUserPayPointsArgs() *UserServiceUserPayPointsArgs {
	return &UserServiceUserPayPointsArgs{}
}

var UserServiceUserPayPointsArgs_Req_DEFAULT *UserPayPointsRequest

func (p *UserServiceUserPayPointsArgs) GetReq() *UserPayPointsRequest {
	if !p.IsSetReq() {
		return UserServiceUserPayPointsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceUserPayPointsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceUserPayPointsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserServiceUserPayPointsArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Req = &UserPayPointsRequest{}
	if err := p.Req.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *UserServiceUserPayPointsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UserPayPoints_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserServiceUserPayPointsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *UserServiceUserPayPointsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUserPayPointsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserServiceUserPayPointsResult struct {
	Success *UserPayPointsResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserServiceUserPayPointsResult() *UserServiceUserPayPointsResult {
	return &UserServiceUserPayPointsResult{}
}

var UserServiceUserPayPointsResult_Success_DEFAULT *UserPayPointsResponse

func (p *UserServiceUserPayPointsResult) GetSuccess() *UserPayPointsResponse {
	if !p.IsSetSuccess() {
		return UserServiceUserPayPointsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceUserPayPointsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceUserPayPointsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserServiceUserPayPointsResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &UserPayPointsResponse{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *UserServiceUserPayPointsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UserPayPoints_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserServiceUserPayPointsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserServiceUserPayPointsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUserPayPointsResult(%+v)", *p)
}

// Attributes:
//  - Req
type UserServiceUserPayCashArgs struct {
	Req *UserPayCashRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewUserServiceUserPayCashArgs() *UserServiceUserPayCashArgs {
	return &UserServiceUserPayCashArgs{}
}

var UserServiceUserPayCashArgs_Req_DEFAULT *UserPayCashRequest

func (p *UserServiceUserPayCashArgs) GetReq() *UserPayCashRequest {
	if !p.IsSetReq() {
		return UserServiceUserPayCashArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceUserPayCashArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceUserPayCashArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserServiceUserPayCashArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Req = &UserPayCashRequest{}
	if err := p.Req.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *UserServiceUserPayCashArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UserPayCash_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserServiceUserPayCashArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *UserServiceUserPayCashArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUserPayCashArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserServiceUserPayCashResult struct {
	Success *UserPayCashResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserServiceUserPayCashResult() *UserServiceUserPayCashResult {
	return &UserServiceUserPayCashResult{}
}

var UserServiceUserPayCashResult_Success_DEFAULT *UserPayCashResponse

func (p *UserServiceUserPayCashResult) GetSuccess() *UserPayCashResponse {
	if !p.IsSetSuccess() {
		return UserServiceUserPayCashResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceUserPayCashResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceUserPayCashResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserServiceUserPayCashResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &UserPayCashResponse{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *UserServiceUserPayCashResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UserPayCash_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserServiceUserPayCashResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserServiceUserPayCashResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUserPayCashResult(%+v)", *p)
}

// Attributes:
//  - Req
type UserServiceUserAddItemArgs struct {
	Req *UserAddItemRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewUserServiceUserAddItemArgs() *UserServiceUserAddItemArgs {
	return &UserServiceUserAddItemArgs{}
}

var UserServiceUserAddItemArgs_Req_DEFAULT *UserAddItemRequest

func (p *UserServiceUserAddItemArgs) GetReq() *UserAddItemRequest {
	if !p.IsSetReq() {
		return UserServiceUserAddItemArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceUserAddItemArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceUserAddItemArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserServiceUserAddItemArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Req = &UserAddItemRequest{}
	if err := p.Req.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *UserServiceUserAddItemArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UserAddItem_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserServiceUserAddItemArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *UserServiceUserAddItemArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUserAddItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserServiceUserAddItemResult struct {
	Success *UserAddItemResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserServiceUserAddItemResult() *UserServiceUserAddItemResult {
	return &UserServiceUserAddItemResult{}
}

var UserServiceUserAddItemResult_Success_DEFAULT *UserAddItemResponse

func (p *UserServiceUserAddItemResult) GetSuccess() *UserAddItemResponse {
	if !p.IsSetSuccess() {
		return UserServiceUserAddItemResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceUserAddItemResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceUserAddItemResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserServiceUserAddItemResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &UserAddItemResponse{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *UserServiceUserAddItemResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UserAddItem_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserServiceUserAddItemResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserServiceUserAddItemResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUserAddItemResult(%+v)", *p)
}

// Attributes:
//  - Req
type UserServiceUserAddFriendArgs struct {
	Req *UserAddFriendRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewUserServiceUserAddFriendArgs() *UserServiceUserAddFriendArgs {
	return &UserServiceUserAddFriendArgs{}
}

var UserServiceUserAddFriendArgs_Req_DEFAULT *UserAddFriendRequest

func (p *UserServiceUserAddFriendArgs) GetReq() *UserAddFriendRequest {
	if !p.IsSetReq() {
		return UserServiceUserAddFriendArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceUserAddFriendArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceUserAddFriendArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserServiceUserAddFriendArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Req = &UserAddFriendRequest{}
	if err := p.Req.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *UserServiceUserAddFriendArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UserAddFriend_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserServiceUserAddFriendArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *UserServiceUserAddFriendArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUserAddFriendArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserServiceUserAddFriendResult struct {
	Success *UserAddFriendResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserServiceUserAddFriendResult() *UserServiceUserAddFriendResult {
	return &UserServiceUserAddFriendResult{}
}

var UserServiceUserAddFriendResult_Success_DEFAULT *UserAddFriendResponse

func (p *UserServiceUserAddFriendResult) GetSuccess() *UserAddFriendResponse {
	if !p.IsSetSuccess() {
		return UserServiceUserAddFriendResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceUserAddFriendResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceUserAddFriendResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserServiceUserAddFriendResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &UserAddFriendResponse{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *UserServiceUserAddFriendResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UserAddFriend_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserServiceUserAddFriendResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserServiceUserAddFriendResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUserAddFriendResult(%+v)", *p)
}

// Attributes:
//  - Req
type UserServiceUpdateBagArgs struct {
	Req *UpdateBagRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewUserServiceUpdateBagArgs() *UserServiceUpdateBagArgs {
	return &UserServiceUpdateBagArgs{}
}

var UserServiceUpdateBagArgs_Req_DEFAULT *UpdateBagRequest

func (p *UserServiceUpdateBagArgs) GetReq() *UpdateBagRequest {
	if !p.IsSetReq() {
		return UserServiceUpdateBagArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceUpdateBagArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceUpdateBagArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserServiceUpdateBagArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Req = &UpdateBagRequest{}
	if err := p.Req.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *UserServiceUpdateBagArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UpdateBag_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserServiceUpdateBagArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *UserServiceUpdateBagArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUpdateBagArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserServiceUpdateBagResult struct {
	Success *UpdateBagResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserServiceUpdateBagResult() *UserServiceUpdateBagResult {
	return &UserServiceUpdateBagResult{}
}

var UserServiceUpdateBagResult_Success_DEFAULT *UpdateBagResponse

func (p *UserServiceUpdateBagResult) GetSuccess() *UpdateBagResponse {
	if !p.IsSetSuccess() {
		return UserServiceUpdateBagResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceUpdateBagResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceUpdateBagResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserServiceUpdateBagResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &UpdateBagResponse{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *UserServiceUpdateBagResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UpdateBag_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserServiceUpdateBagResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserServiceUpdateBagResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUpdateBagResult(%+v)", *p)
}

// Attributes:
//  - Req
type UserServiceUpdateBuymenuArgs struct {
	Req *UpdateBuymenuRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewUserServiceUpdateBuymenuArgs() *UserServiceUpdateBuymenuArgs {
	return &UserServiceUpdateBuymenuArgs{}
}

var UserServiceUpdateBuymenuArgs_Req_DEFAULT *UpdateBuymenuRequest

func (p *UserServiceUpdateBuymenuArgs) GetReq() *UpdateBuymenuRequest {
	if !p.IsSetReq() {
		return UserServiceUpdateBuymenuArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceUpdateBuymenuArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceUpdateBuymenuArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserServiceUpdateBuymenuArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Req = &UpdateBuymenuRequest{}
	if err := p.Req.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *UserServiceUpdateBuymenuArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UpdateBuymenu_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserServiceUpdateBuymenuArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *UserServiceUpdateBuymenuArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUpdateBuymenuArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserServiceUpdateBuymenuResult struct {
	Success *UpdateBuymenuResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserServiceUpdateBuymenuResult() *UserServiceUpdateBuymenuResult {
	return &UserServiceUpdateBuymenuResult{}
}

var UserServiceUpdateBuymenuResult_Success_DEFAULT *UpdateBuymenuResponse

func (p *UserServiceUpdateBuymenuResult) GetSuccess() *UpdateBuymenuResponse {
	if !p.IsSetSuccess() {
		return UserServiceUpdateBuymenuResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceUpdateBuymenuResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceUpdateBuymenuResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserServiceUpdateBuymenuResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &UpdateBuymenuResponse{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *UserServiceUpdateBuymenuResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UpdateBuymenu_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserServiceUpdateBuymenuResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserServiceUpdateBuymenuResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUpdateBuymenuResult(%+v)", *p)
}

// Attributes:
//  - Req
type UserServiceUpdateCosmeticsArgs struct {
	Req *UpdateCosmeticsRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewUserServiceUpdateCosmeticsArgs() *UserServiceUpdateCosmeticsArgs {
	return &UserServiceUpdateCosmeticsArgs{}
}

var UserServiceUpdateCosmeticsArgs_Req_DEFAULT *UpdateCosmeticsRequest

func (p *UserServiceUpdateCosmeticsArgs) GetReq() *UpdateCosmeticsRequest {
	if !p.IsSetReq() {
		return UserServiceUpdateCosmeticsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceUpdateCosmeticsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceUpdateCosmeticsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserServiceUpdateCosmeticsArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Req = &UpdateCosmeticsRequest{}
	if err := p.Req.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *UserServiceUpdateCosmeticsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UpdateCosmetics_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserServiceUpdateCosmeticsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *UserServiceUpdateCosmeticsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUpdateCosmeticsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserServiceUpdateCosmeticsResult struct {
	Success *UpdateCosmeticsResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserServiceUpdateCosmeticsResult() *UserServiceUpdateCosmeticsResult {
	return &UserServiceUpdateCosmeticsResult{}
}

var UserServiceUpdateCosmeticsResult_Success_DEFAULT *UpdateCosmeticsResponse

func (p *UserServiceUpdateCosmeticsResult) GetSuccess() *UpdateCosmeticsResponse {
	if !p.IsSetSuccess() {
		return UserServiceUpdateCosmeticsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceUpdateCosmeticsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceUpdateCosmeticsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserServiceUpdateCosmeticsResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &UpdateCosmeticsResponse{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *UserServiceUpdateCosmeticsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UpdateCosmetics_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserServiceUpdateCosmeticsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserServiceUpdateCosmeticsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUpdateCosmeticsResult(%+v)", *p)
}

// Attributes:
//  - Req
type UserServiceUpdateCampaignArgs struct {
	Req *UpdateCampaignRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewUserServiceUpdateCampaignArgs() *UserServiceUpdateCampaignArgs {
	return &UserServiceUpdateCampaignArgs{}
}

var UserServiceUpdateCampaignArgs_Req_DEFAULT *UpdateCampaignRequest

func (p *UserServiceUpdateCampaignArgs) GetReq() *UpdateCampaignRequest {
	if !p.IsSetReq() {
		return UserServiceUpdateCampaignArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceUpdateCampaignArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceUpdateCampaignArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserServiceUpdateCampaignArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Req = &UpdateCampaignRequest{}
	if err := p.Req.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *UserServiceUpdateCampaignArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UpdateCampaign_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserServiceUpdateCampaignArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *UserServiceUpdateCampaignArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUpdateCampaignArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserServiceUpdateCampaignResult struct {
	Success *UpdateCampaignResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserServiceUpdateCampaignResult() *UserServiceUpdateCampaignResult {
	return &UserServiceUpdateCampaignResult{}
}

var UserServiceUpdateCampaignResult_Success_DEFAULT *UpdateCampaignResponse

func (p *UserServiceUpdateCampaignResult) GetSuccess() *UpdateCampaignResponse {
	if !p.IsSetSuccess() {
		return UserServiceUpdateCampaignResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceUpdateCampaignResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceUpdateCampaignResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserServiceUpdateCampaignResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &UpdateCampaignResponse{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *UserServiceUpdateCampaignResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UpdateCampaign_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserServiceUpdateCampaignResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserServiceUpdateCampaignResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUpdateCampaignResult(%+v)", *p)
}

// Attributes:
//  - Req
type UserServiceUpdateOptionsArgs struct {
	Req *UpdateOptionsRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewUserServiceUpdateOptionsArgs() *UserServiceUpdateOptionsArgs {
	return &UserServiceUpdateOptionsArgs{}
}

var UserServiceUpdateOptionsArgs_Req_DEFAULT *UpdateOptionsRequest

func (p *UserServiceUpdateOptionsArgs) GetReq() *UpdateOptionsRequest {
	if !p.IsSetReq() {
		return UserServiceUpdateOptionsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceUpdateOptionsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceUpdateOptionsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserServiceUpdateOptionsArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Req = &UpdateOptionsRequest{}
	if err := p.Req.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *UserServiceUpdateOptionsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UpdateOptions_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserServiceUpdateOptionsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *UserServiceUpdateOptionsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUpdateOptionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserServiceUpdateOptionsResult struct {
	Success *UpdateOptionsResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserServiceUpdateOptionsResult() *UserServiceUpdateOptionsResult {
	return &UserServiceUpdateOptionsResult{}
}

var UserServiceUpdateOptionsResult_Success_DEFAULT *UpdateOptionsResponse

func (p *UserServiceUpdateOptionsResult) GetSuccess() *UpdateOptionsResponse {
	if !p.IsSetSuccess() {
		return UserServiceUpdateOptionsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceUpdateOptionsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceUpdateOptionsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserServiceUpdateOptionsResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &UpdateOptionsResponse{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *UserServiceUpdateOptionsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UpdateOptions_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserServiceUpdateOptionsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserServiceUpdateOptionsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUpdateOptionsResult(%+v)", *p)
}

// Attributes:
//  - Req
type UserServiceUpdateNickNameArgs struct {
	Req *UpdateNickNameRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewUserServiceUpdateNickNameArgs() *UserServiceUpdateNickNameArgs {
	return &UserServiceUpdateNickNameArgs{}
}

var UserServiceUpdateNickNameArgs_Req_DEFAULT *UpdateNickNameRequest

func (p *UserServiceUpdateNickNameArgs) GetReq() *UpdateNickNameRequest {
	if !p.IsSetReq() {
		return UserServiceUpdateNickNameArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceUpdateNickNameArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceUpdateNickNameArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserServiceUpdateNickNameArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Req = &UpdateNickNameRequest{}
	if err := p.Req.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *UserServiceUpdateNickNameArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UpdateNickName_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserServiceUpdateNickNameArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *UserServiceUpdateNickNameArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUpdateNickNameArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserServiceUpdateNickNameResult struct {
	Success *UpdateNickNameResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserServiceUpdateNickNameResult() *UserServiceUpdateNickNameResult {
	return &UserServiceUpdateNickNameResult{}
}

var UserServiceUpdateNickNameResult_Success_DEFAULT *UpdateNickNameResponse

func (p *UserServiceUpdateNickNameResult) GetSuccess() *UpdateNickNameResponse {
	if !p.IsSetSuccess() {
		return UserServiceUpdateNickNameResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceUpdateNickNameResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceUpdateNickNameResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserServiceUpdateNickNameResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &UpdateNickNameResponse{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *UserServiceUpdateNickNameResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UpdateNickName_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserServiceUpdateNickNameResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserServiceUpdateNickNameResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUpdateNickNameResult(%+v)", *p)
}
