// Code generated by Thrift Compiler (0.14.1). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/jqllxew/YuriCore/main_service/gen-go/yuricore/room_service"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
)

var _ = room_service.GoUnusedProtection__

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  ServerListResponse ServerList(ServerListRequest req)")
	fmt.Fprintln(os.Stderr, "  RoomListResponse RoomList(RoomListRequest req)")
	fmt.Fprintln(os.Stderr, "  NewRoomResponse NewRoom(NewRoomRequest req)")
	fmt.Fprintln(os.Stderr, "  UpdateRoomResponse UpdateRoom(UpdateRoomRequest req)")
	fmt.Fprintln(os.Stderr, "  JoinRoomResponse JoinRoom(JoinRoomRequest req)")
	fmt.Fprintln(os.Stderr, "  LeaveRoomResponse LeaveRoom(LeaveRoomRequest req)")
	fmt.Fprintln(os.Stderr, "  StartGameResponse StartGame(StartGameRequest req)")
	fmt.Fprintln(os.Stderr, "  StartCountdownResponse StartCountdown(StartCountdownRequest req)")
	fmt.Fprintln(os.Stderr, "  ToggleReadyResponse ToggleReady(ToggleReadyRequest req)")
	fmt.Fprintln(os.Stderr, "  GetRoomInfoResponse GetRoomInfo(GetRoomInfoRequest req)")
	fmt.Fprintln(os.Stderr, "  UpdateRoomSafeResponse UpdateRoomSafe(UpdateRoomSafeRequest req)")
	fmt.Fprintln(os.Stderr, "  DelRoomResponse DelRoom(DelRoomRequest req)")
	fmt.Fprintln(os.Stderr, "  SetRoomHostResponse SetRoomHost(SetRoomHostRequest req)")
	fmt.Fprintln(os.Stderr, "  EndGameResponse EndGame(EndGameRequest req)")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
	var m map[string]string = h
	return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
	parts := strings.Split(value, ": ")
	if len(parts) != 2 {
		return fmt.Errorf("header should be of format 'Key: Value'")
	}
	h[parts[0]] = parts[1]
	return nil
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	headers := make(httpHeaders)
	var parsedUrl *url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
	flag.Parse()

	if len(urlString) > 0 {
		var err error
		parsedUrl, err = url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
		if len(headers) > 0 {
			httptrans := trans.(*thrift.THttpClient)
			for key, value := range headers {
				httptrans.SetHeader(key, value)
			}
		}
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	iprot := protocolFactory.GetProtocol(trans)
	oprot := protocolFactory.GetProtocol(trans)
	client := room_service.NewRoomServiceClient(thrift.NewTStandardClient(iprot, oprot))
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "ServerList":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ServerList requires 1 args")
			flag.Usage()
		}
		arg56 := flag.Arg(1)
		mbTrans57 := thrift.NewTMemoryBufferLen(len(arg56))
		defer mbTrans57.Close()
		_, err58 := mbTrans57.WriteString(arg56)
		if err58 != nil {
			Usage()
			return
		}
		factory59 := thrift.NewTJSONProtocolFactory()
		jsProt60 := factory59.GetProtocol(mbTrans57)
		argvalue0 := room_service.NewServerListRequest()
		err61 := argvalue0.Read(context.Background(), jsProt60)
		if err61 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ServerList(context.Background(), value0))
		fmt.Print("\n")
		break
	case "RoomList":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "RoomList requires 1 args")
			flag.Usage()
		}
		arg62 := flag.Arg(1)
		mbTrans63 := thrift.NewTMemoryBufferLen(len(arg62))
		defer mbTrans63.Close()
		_, err64 := mbTrans63.WriteString(arg62)
		if err64 != nil {
			Usage()
			return
		}
		factory65 := thrift.NewTJSONProtocolFactory()
		jsProt66 := factory65.GetProtocol(mbTrans63)
		argvalue0 := room_service.NewRoomListRequest()
		err67 := argvalue0.Read(context.Background(), jsProt66)
		if err67 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.RoomList(context.Background(), value0))
		fmt.Print("\n")
		break
	case "NewRoom":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "NewRoom_ requires 1 args")
			flag.Usage()
		}
		arg68 := flag.Arg(1)
		mbTrans69 := thrift.NewTMemoryBufferLen(len(arg68))
		defer mbTrans69.Close()
		_, err70 := mbTrans69.WriteString(arg68)
		if err70 != nil {
			Usage()
			return
		}
		factory71 := thrift.NewTJSONProtocolFactory()
		jsProt72 := factory71.GetProtocol(mbTrans69)
		argvalue0 := room_service.NewNewRoomRequest_()
		err73 := argvalue0.Read(context.Background(), jsProt72)
		if err73 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.NewRoom_(context.Background(), value0))
		fmt.Print("\n")
		break
	case "UpdateRoom":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "UpdateRoom requires 1 args")
			flag.Usage()
		}
		arg74 := flag.Arg(1)
		mbTrans75 := thrift.NewTMemoryBufferLen(len(arg74))
		defer mbTrans75.Close()
		_, err76 := mbTrans75.WriteString(arg74)
		if err76 != nil {
			Usage()
			return
		}
		factory77 := thrift.NewTJSONProtocolFactory()
		jsProt78 := factory77.GetProtocol(mbTrans75)
		argvalue0 := room_service.NewUpdateRoomRequest()
		err79 := argvalue0.Read(context.Background(), jsProt78)
		if err79 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.UpdateRoom(context.Background(), value0))
		fmt.Print("\n")
		break
	case "JoinRoom":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "JoinRoom requires 1 args")
			flag.Usage()
		}
		arg80 := flag.Arg(1)
		mbTrans81 := thrift.NewTMemoryBufferLen(len(arg80))
		defer mbTrans81.Close()
		_, err82 := mbTrans81.WriteString(arg80)
		if err82 != nil {
			Usage()
			return
		}
		factory83 := thrift.NewTJSONProtocolFactory()
		jsProt84 := factory83.GetProtocol(mbTrans81)
		argvalue0 := room_service.NewJoinRoomRequest()
		err85 := argvalue0.Read(context.Background(), jsProt84)
		if err85 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.JoinRoom(context.Background(), value0))
		fmt.Print("\n")
		break
	case "LeaveRoom":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "LeaveRoom requires 1 args")
			flag.Usage()
		}
		arg86 := flag.Arg(1)
		mbTrans87 := thrift.NewTMemoryBufferLen(len(arg86))
		defer mbTrans87.Close()
		_, err88 := mbTrans87.WriteString(arg86)
		if err88 != nil {
			Usage()
			return
		}
		factory89 := thrift.NewTJSONProtocolFactory()
		jsProt90 := factory89.GetProtocol(mbTrans87)
		argvalue0 := room_service.NewLeaveRoomRequest()
		err91 := argvalue0.Read(context.Background(), jsProt90)
		if err91 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.LeaveRoom(context.Background(), value0))
		fmt.Print("\n")
		break
	case "StartGame":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "StartGame requires 1 args")
			flag.Usage()
		}
		arg92 := flag.Arg(1)
		mbTrans93 := thrift.NewTMemoryBufferLen(len(arg92))
		defer mbTrans93.Close()
		_, err94 := mbTrans93.WriteString(arg92)
		if err94 != nil {
			Usage()
			return
		}
		factory95 := thrift.NewTJSONProtocolFactory()
		jsProt96 := factory95.GetProtocol(mbTrans93)
		argvalue0 := room_service.NewStartGameRequest()
		err97 := argvalue0.Read(context.Background(), jsProt96)
		if err97 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.StartGame(context.Background(), value0))
		fmt.Print("\n")
		break
	case "StartCountdown":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "StartCountdown requires 1 args")
			flag.Usage()
		}
		arg98 := flag.Arg(1)
		mbTrans99 := thrift.NewTMemoryBufferLen(len(arg98))
		defer mbTrans99.Close()
		_, err100 := mbTrans99.WriteString(arg98)
		if err100 != nil {
			Usage()
			return
		}
		factory101 := thrift.NewTJSONProtocolFactory()
		jsProt102 := factory101.GetProtocol(mbTrans99)
		argvalue0 := room_service.NewStartCountdownRequest()
		err103 := argvalue0.Read(context.Background(), jsProt102)
		if err103 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.StartCountdown(context.Background(), value0))
		fmt.Print("\n")
		break
	case "ToggleReady":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ToggleReady requires 1 args")
			flag.Usage()
		}
		arg104 := flag.Arg(1)
		mbTrans105 := thrift.NewTMemoryBufferLen(len(arg104))
		defer mbTrans105.Close()
		_, err106 := mbTrans105.WriteString(arg104)
		if err106 != nil {
			Usage()
			return
		}
		factory107 := thrift.NewTJSONProtocolFactory()
		jsProt108 := factory107.GetProtocol(mbTrans105)
		argvalue0 := room_service.NewToggleReadyRequest()
		err109 := argvalue0.Read(context.Background(), jsProt108)
		if err109 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ToggleReady(context.Background(), value0))
		fmt.Print("\n")
		break
	case "GetRoomInfo":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetRoomInfo requires 1 args")
			flag.Usage()
		}
		arg110 := flag.Arg(1)
		mbTrans111 := thrift.NewTMemoryBufferLen(len(arg110))
		defer mbTrans111.Close()
		_, err112 := mbTrans111.WriteString(arg110)
		if err112 != nil {
			Usage()
			return
		}
		factory113 := thrift.NewTJSONProtocolFactory()
		jsProt114 := factory113.GetProtocol(mbTrans111)
		argvalue0 := room_service.NewGetRoomInfoRequest()
		err115 := argvalue0.Read(context.Background(), jsProt114)
		if err115 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetRoomInfo(context.Background(), value0))
		fmt.Print("\n")
		break
	case "UpdateRoomSafe":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "UpdateRoomSafe requires 1 args")
			flag.Usage()
		}
		arg116 := flag.Arg(1)
		mbTrans117 := thrift.NewTMemoryBufferLen(len(arg116))
		defer mbTrans117.Close()
		_, err118 := mbTrans117.WriteString(arg116)
		if err118 != nil {
			Usage()
			return
		}
		factory119 := thrift.NewTJSONProtocolFactory()
		jsProt120 := factory119.GetProtocol(mbTrans117)
		argvalue0 := room_service.NewUpdateRoomSafeRequest()
		err121 := argvalue0.Read(context.Background(), jsProt120)
		if err121 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.UpdateRoomSafe(context.Background(), value0))
		fmt.Print("\n")
		break
	case "DelRoom":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DelRoom requires 1 args")
			flag.Usage()
		}
		arg122 := flag.Arg(1)
		mbTrans123 := thrift.NewTMemoryBufferLen(len(arg122))
		defer mbTrans123.Close()
		_, err124 := mbTrans123.WriteString(arg122)
		if err124 != nil {
			Usage()
			return
		}
		factory125 := thrift.NewTJSONProtocolFactory()
		jsProt126 := factory125.GetProtocol(mbTrans123)
		argvalue0 := room_service.NewDelRoomRequest()
		err127 := argvalue0.Read(context.Background(), jsProt126)
		if err127 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DelRoom(context.Background(), value0))
		fmt.Print("\n")
		break
	case "SetRoomHost":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "SetRoomHost requires 1 args")
			flag.Usage()
		}
		arg128 := flag.Arg(1)
		mbTrans129 := thrift.NewTMemoryBufferLen(len(arg128))
		defer mbTrans129.Close()
		_, err130 := mbTrans129.WriteString(arg128)
		if err130 != nil {
			Usage()
			return
		}
		factory131 := thrift.NewTJSONProtocolFactory()
		jsProt132 := factory131.GetProtocol(mbTrans129)
		argvalue0 := room_service.NewSetRoomHostRequest()
		err133 := argvalue0.Read(context.Background(), jsProt132)
		if err133 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.SetRoomHost(context.Background(), value0))
		fmt.Print("\n")
		break
	case "EndGame":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "EndGame requires 1 args")
			flag.Usage()
		}
		arg134 := flag.Arg(1)
		mbTrans135 := thrift.NewTMemoryBufferLen(len(arg134))
		defer mbTrans135.Close()
		_, err136 := mbTrans135.WriteString(arg134)
		if err136 != nil {
			Usage()
			return
		}
		factory137 := thrift.NewTJSONProtocolFactory()
		jsProt138 := factory137.GetProtocol(mbTrans135)
		argvalue0 := room_service.NewEndGameRequest()
		err139 := argvalue0.Read(context.Background(), jsProt138)
		if err139 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.EndGame(context.Background(), value0))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
