// Code generated by Thrift Compiler (0.14.1). DO NOT EDIT.

package room_service

import (
	"bytes"
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"time"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

// Attributes:
//  - Unk40Unk00
//  - Unk40Unk01
type Unk40Struct struct {
	Unk40Unk00 int8 `thrift:"Unk40_unk00,1,required" db:"Unk40_unk00" json:"Unk40_unk00"`
	Unk40Unk01 int8 `thrift:"Unk40_unk01,2,required" db:"Unk40_unk01" json:"Unk40_unk01"`
}

func NewUnk40Struct() *Unk40Struct {
	return &Unk40Struct{}
}

func (p *Unk40Struct) GetUnk40Unk00() int8 {
	return p.Unk40Unk00
}

func (p *Unk40Struct) GetUnk40Unk01() int8 {
	return p.Unk40Unk01
}
func (p *Unk40Struct) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetUnk40Unk00 bool = false
	var issetUnk40Unk01 bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetUnk40Unk00 = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetUnk40Unk01 = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetUnk40Unk00 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Unk40Unk00 is not set"))
	}
	if !issetUnk40Unk01 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Unk40Unk01 is not set"))
	}
	return nil
}

func (p *Unk40Struct) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := int8(v)
		p.Unk40Unk00 = temp
	}
	return nil
}

func (p *Unk40Struct) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := int8(v)
		p.Unk40Unk01 = temp
	}
	return nil
}

func (p *Unk40Struct) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Unk40Struct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Unk40Struct) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Unk40_unk00", thrift.BYTE, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Unk40_unk00: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.Unk40Unk00)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Unk40_unk00 (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Unk40_unk00: ", p), err)
	}
	return err
}

func (p *Unk40Struct) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Unk40_unk01", thrift.BYTE, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Unk40_unk01: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.Unk40Unk01)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Unk40_unk01 (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Unk40_unk01: ", p), err)
	}
	return err
}

func (p *Unk40Struct) Equals(other *Unk40Struct) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Unk40Unk00 != other.Unk40Unk00 {
		return false
	}
	if p.Unk40Unk01 != other.Unk40Unk01 {
		return false
	}
	return true
}

func (p *Unk40Struct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Unk40Struct(%+v)", *p)
}

// Attributes:
//  - Unk23Unk00
//  - Unk23Unk01
//  - Unk23Unk02
//  - Unk23Unk03
//  - Unk23Unk04
//  - Unk23Unk05
//  - Unk23Unk06
//  - Unk23Unk07
//  - Unk23Unk08
type Unk23Struct struct {
	Unk23Unk00 int32 `thrift:"Unk23_unk00,1,required" db:"Unk23_unk00" json:"Unk23_unk00"`
	Unk23Unk01 int32 `thrift:"Unk23_unk01,2,required" db:"Unk23_unk01" json:"Unk23_unk01"`
	Unk23Unk02 int8  `thrift:"Unk23_unk02,3,required" db:"Unk23_unk02" json:"Unk23_unk02"`
	Unk23Unk03 int8  `thrift:"Unk23_unk03,4,required" db:"Unk23_unk03" json:"Unk23_unk03"`
	Unk23Unk04 int8  `thrift:"Unk23_unk04,5,required" db:"Unk23_unk04" json:"Unk23_unk04"`
	Unk23Unk05 int8  `thrift:"Unk23_unk05,6,required" db:"Unk23_unk05" json:"Unk23_unk05"`
	Unk23Unk06 int16 `thrift:"Unk23_unk06,7,required" db:"Unk23_unk06" json:"Unk23_unk06"`
	Unk23Unk07 int8  `thrift:"Unk23_unk07,8,required" db:"Unk23_unk07" json:"Unk23_unk07"`
	Unk23Unk08 int8  `thrift:"Unk23_unk08,9,required" db:"Unk23_unk08" json:"Unk23_unk08"`
}

func NewUnk23Struct() *Unk23Struct {
	return &Unk23Struct{}
}

func (p *Unk23Struct) GetUnk23Unk00() int32 {
	return p.Unk23Unk00
}

func (p *Unk23Struct) GetUnk23Unk01() int32 {
	return p.Unk23Unk01
}

func (p *Unk23Struct) GetUnk23Unk02() int8 {
	return p.Unk23Unk02
}

func (p *Unk23Struct) GetUnk23Unk03() int8 {
	return p.Unk23Unk03
}

func (p *Unk23Struct) GetUnk23Unk04() int8 {
	return p.Unk23Unk04
}

func (p *Unk23Struct) GetUnk23Unk05() int8 {
	return p.Unk23Unk05
}

func (p *Unk23Struct) GetUnk23Unk06() int16 {
	return p.Unk23Unk06
}

func (p *Unk23Struct) GetUnk23Unk07() int8 {
	return p.Unk23Unk07
}

func (p *Unk23Struct) GetUnk23Unk08() int8 {
	return p.Unk23Unk08
}
func (p *Unk23Struct) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetUnk23Unk00 bool = false
	var issetUnk23Unk01 bool = false
	var issetUnk23Unk02 bool = false
	var issetUnk23Unk03 bool = false
	var issetUnk23Unk04 bool = false
	var issetUnk23Unk05 bool = false
	var issetUnk23Unk06 bool = false
	var issetUnk23Unk07 bool = false
	var issetUnk23Unk08 bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetUnk23Unk00 = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetUnk23Unk01 = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
				issetUnk23Unk02 = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
				issetUnk23Unk03 = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
				issetUnk23Unk04 = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
				issetUnk23Unk05 = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
				issetUnk23Unk06 = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField8(ctx, iprot); err != nil {
					return err
				}
				issetUnk23Unk07 = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField9(ctx, iprot); err != nil {
					return err
				}
				issetUnk23Unk08 = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetUnk23Unk00 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Unk23Unk00 is not set"))
	}
	if !issetUnk23Unk01 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Unk23Unk01 is not set"))
	}
	if !issetUnk23Unk02 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Unk23Unk02 is not set"))
	}
	if !issetUnk23Unk03 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Unk23Unk03 is not set"))
	}
	if !issetUnk23Unk04 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Unk23Unk04 is not set"))
	}
	if !issetUnk23Unk05 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Unk23Unk05 is not set"))
	}
	if !issetUnk23Unk06 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Unk23Unk06 is not set"))
	}
	if !issetUnk23Unk07 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Unk23Unk07 is not set"))
	}
	if !issetUnk23Unk08 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Unk23Unk08 is not set"))
	}
	return nil
}

func (p *Unk23Struct) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Unk23Unk00 = v
	}
	return nil
}

func (p *Unk23Struct) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Unk23Unk01 = v
	}
	return nil
}

func (p *Unk23Struct) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := int8(v)
		p.Unk23Unk02 = temp
	}
	return nil
}

func (p *Unk23Struct) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := int8(v)
		p.Unk23Unk03 = temp
	}
	return nil
}

func (p *Unk23Struct) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := int8(v)
		p.Unk23Unk04 = temp
	}
	return nil
}

func (p *Unk23Struct) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := int8(v)
		p.Unk23Unk05 = temp
	}
	return nil
}

func (p *Unk23Struct) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Unk23Unk06 = v
	}
	return nil
}

func (p *Unk23Struct) ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		temp := int8(v)
		p.Unk23Unk07 = temp
	}
	return nil
}

func (p *Unk23Struct) ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		temp := int8(v)
		p.Unk23Unk08 = temp
	}
	return nil
}

func (p *Unk23Struct) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Unk23Struct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField7(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField8(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField9(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Unk23Struct) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Unk23_unk00", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Unk23_unk00: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Unk23Unk00)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Unk23_unk00 (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Unk23_unk00: ", p), err)
	}
	return err
}

func (p *Unk23Struct) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Unk23_unk01", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Unk23_unk01: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Unk23Unk01)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Unk23_unk01 (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Unk23_unk01: ", p), err)
	}
	return err
}

func (p *Unk23Struct) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Unk23_unk02", thrift.BYTE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Unk23_unk02: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.Unk23Unk02)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Unk23_unk02 (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Unk23_unk02: ", p), err)
	}
	return err
}

func (p *Unk23Struct) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Unk23_unk03", thrift.BYTE, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Unk23_unk03: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.Unk23Unk03)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Unk23_unk03 (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Unk23_unk03: ", p), err)
	}
	return err
}

func (p *Unk23Struct) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Unk23_unk04", thrift.BYTE, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Unk23_unk04: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.Unk23Unk04)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Unk23_unk04 (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Unk23_unk04: ", p), err)
	}
	return err
}

func (p *Unk23Struct) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Unk23_unk05", thrift.BYTE, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:Unk23_unk05: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.Unk23Unk05)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Unk23_unk05 (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:Unk23_unk05: ", p), err)
	}
	return err
}

func (p *Unk23Struct) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Unk23_unk06", thrift.I16, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:Unk23_unk06: ", p), err)
	}
	if err := oprot.WriteI16(ctx, int16(p.Unk23Unk06)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Unk23_unk06 (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:Unk23_unk06: ", p), err)
	}
	return err
}

func (p *Unk23Struct) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Unk23_unk07", thrift.BYTE, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:Unk23_unk07: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.Unk23Unk07)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Unk23_unk07 (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:Unk23_unk07: ", p), err)
	}
	return err
}

func (p *Unk23Struct) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Unk23_unk08", thrift.BYTE, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:Unk23_unk08: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.Unk23Unk08)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Unk23_unk08 (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:Unk23_unk08: ", p), err)
	}
	return err
}

func (p *Unk23Struct) Equals(other *Unk23Struct) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Unk23Unk00 != other.Unk23Unk00 {
		return false
	}
	if p.Unk23Unk01 != other.Unk23Unk01 {
		return false
	}
	if p.Unk23Unk02 != other.Unk23Unk02 {
		return false
	}
	if p.Unk23Unk03 != other.Unk23Unk03 {
		return false
	}
	if p.Unk23Unk04 != other.Unk23Unk04 {
		return false
	}
	if p.Unk23Unk05 != other.Unk23Unk05 {
		return false
	}
	if p.Unk23Unk06 != other.Unk23Unk06 {
		return false
	}
	if p.Unk23Unk07 != other.Unk23Unk07 {
		return false
	}
	if p.Unk23Unk08 != other.Unk23Unk08 {
		return false
	}
	return true
}

func (p *Unk23Struct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Unk23Struct(%+v)", *p)
}

// Attributes:
//  - Unk00
//  - Unk01
//  - Unk02
//  - Unk03
//  - Unk04
//  - Unk14
//  - Unk15
//  - Unk16
//  - Unk17
//  - Unk18
//  - Unk19
//  - Unk23
//  - Unk24
//  - Unk25
//  - Unk26
//  - Unk27
//  - Unk28
//  - Unk29
//  - Unk36
//  - Unk37
//  - Unk38
//  - Unk39
//  - Unk40
//  - Unk41
//  - Unk42
type RoomSettingUnk struct {
	Unk00 int8           `thrift:"Unk00,1,required" db:"Unk00" json:"Unk00"`
	Unk01 int8           `thrift:"Unk01,2,required" db:"Unk01" json:"Unk01"`
	Unk02 int8           `thrift:"Unk02,3,required" db:"Unk02" json:"Unk02"`
	Unk03 int8           `thrift:"Unk03,4,required" db:"Unk03" json:"Unk03"`
	Unk04 int32          `thrift:"Unk04,5,required" db:"Unk04" json:"Unk04"`
	Unk14 int8           `thrift:"Unk14,6,required" db:"Unk14" json:"Unk14"`
	Unk15 int8           `thrift:"Unk15,7,required" db:"Unk15" json:"Unk15"`
	Unk16 int8           `thrift:"Unk16,8,required" db:"Unk16" json:"Unk16"`
	Unk17 int8           `thrift:"Unk17,9,required" db:"Unk17" json:"Unk17"`
	Unk18 int8           `thrift:"Unk18,10,required" db:"Unk18" json:"Unk18"`
	Unk19 int8           `thrift:"Unk19,11,required" db:"Unk19" json:"Unk19"`
	Unk23 []*Unk23Struct `thrift:"Unk23,12,required" db:"Unk23" json:"Unk23"`
	Unk24 int32          `thrift:"Unk24,13,required" db:"Unk24" json:"Unk24"`
	Unk25 string         `thrift:"Unk25,14,required" db:"Unk25" json:"Unk25"`
	Unk26 int8           `thrift:"Unk26,15,required" db:"Unk26" json:"Unk26"`
	Unk27 int8           `thrift:"Unk27,16,required" db:"Unk27" json:"Unk27"`
	Unk28 int8           `thrift:"Unk28,17,required" db:"Unk28" json:"Unk28"`
	Unk29 int8           `thrift:"Unk29,18,required" db:"Unk29" json:"Unk29"`
	Unk36 int8           `thrift:"Unk36,19,required" db:"Unk36" json:"Unk36"`
	Unk37 int8           `thrift:"Unk37,20,required" db:"Unk37" json:"Unk37"`
	Unk38 int8           `thrift:"Unk38,21,required" db:"Unk38" json:"Unk38"`
	Unk39 int8           `thrift:"Unk39,22,required" db:"Unk39" json:"Unk39"`
	Unk40 []*Unk40Struct `thrift:"Unk40,23,required" db:"Unk40" json:"Unk40"`
	Unk41 int8           `thrift:"Unk41,24,required" db:"Unk41" json:"Unk41"`
	Unk42 int8           `thrift:"Unk42,25,required" db:"Unk42" json:"Unk42"`
}

func NewRoomSettingUnk() *RoomSettingUnk {
	return &RoomSettingUnk{}
}

func (p *RoomSettingUnk) GetUnk00() int8 {
	return p.Unk00
}

func (p *RoomSettingUnk) GetUnk01() int8 {
	return p.Unk01
}

func (p *RoomSettingUnk) GetUnk02() int8 {
	return p.Unk02
}

func (p *RoomSettingUnk) GetUnk03() int8 {
	return p.Unk03
}

func (p *RoomSettingUnk) GetUnk04() int32 {
	return p.Unk04
}

func (p *RoomSettingUnk) GetUnk14() int8 {
	return p.Unk14
}

func (p *RoomSettingUnk) GetUnk15() int8 {
	return p.Unk15
}

func (p *RoomSettingUnk) GetUnk16() int8 {
	return p.Unk16
}

func (p *RoomSettingUnk) GetUnk17() int8 {
	return p.Unk17
}

func (p *RoomSettingUnk) GetUnk18() int8 {
	return p.Unk18
}

func (p *RoomSettingUnk) GetUnk19() int8 {
	return p.Unk19
}

func (p *RoomSettingUnk) GetUnk23() []*Unk23Struct {
	return p.Unk23
}

func (p *RoomSettingUnk) GetUnk24() int32 {
	return p.Unk24
}

func (p *RoomSettingUnk) GetUnk25() string {
	return p.Unk25
}

func (p *RoomSettingUnk) GetUnk26() int8 {
	return p.Unk26
}

func (p *RoomSettingUnk) GetUnk27() int8 {
	return p.Unk27
}

func (p *RoomSettingUnk) GetUnk28() int8 {
	return p.Unk28
}

func (p *RoomSettingUnk) GetUnk29() int8 {
	return p.Unk29
}

func (p *RoomSettingUnk) GetUnk36() int8 {
	return p.Unk36
}

func (p *RoomSettingUnk) GetUnk37() int8 {
	return p.Unk37
}

func (p *RoomSettingUnk) GetUnk38() int8 {
	return p.Unk38
}

func (p *RoomSettingUnk) GetUnk39() int8 {
	return p.Unk39
}

func (p *RoomSettingUnk) GetUnk40() []*Unk40Struct {
	return p.Unk40
}

func (p *RoomSettingUnk) GetUnk41() int8 {
	return p.Unk41
}

func (p *RoomSettingUnk) GetUnk42() int8 {
	return p.Unk42
}
func (p *RoomSettingUnk) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetUnk00 bool = false
	var issetUnk01 bool = false
	var issetUnk02 bool = false
	var issetUnk03 bool = false
	var issetUnk04 bool = false
	var issetUnk14 bool = false
	var issetUnk15 bool = false
	var issetUnk16 bool = false
	var issetUnk17 bool = false
	var issetUnk18 bool = false
	var issetUnk19 bool = false
	var issetUnk23 bool = false
	var issetUnk24 bool = false
	var issetUnk25 bool = false
	var issetUnk26 bool = false
	var issetUnk27 bool = false
	var issetUnk28 bool = false
	var issetUnk29 bool = false
	var issetUnk36 bool = false
	var issetUnk37 bool = false
	var issetUnk38 bool = false
	var issetUnk39 bool = false
	var issetUnk40 bool = false
	var issetUnk41 bool = false
	var issetUnk42 bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetUnk00 = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetUnk01 = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
				issetUnk02 = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
				issetUnk03 = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
				issetUnk04 = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
				issetUnk14 = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
				issetUnk15 = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField8(ctx, iprot); err != nil {
					return err
				}
				issetUnk16 = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField9(ctx, iprot); err != nil {
					return err
				}
				issetUnk17 = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField10(ctx, iprot); err != nil {
					return err
				}
				issetUnk18 = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField11(ctx, iprot); err != nil {
					return err
				}
				issetUnk19 = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField12(ctx, iprot); err != nil {
					return err
				}
				issetUnk23 = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 13:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField13(ctx, iprot); err != nil {
					return err
				}
				issetUnk24 = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField14(ctx, iprot); err != nil {
					return err
				}
				issetUnk25 = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 15:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField15(ctx, iprot); err != nil {
					return err
				}
				issetUnk26 = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 16:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField16(ctx, iprot); err != nil {
					return err
				}
				issetUnk27 = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 17:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField17(ctx, iprot); err != nil {
					return err
				}
				issetUnk28 = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 18:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField18(ctx, iprot); err != nil {
					return err
				}
				issetUnk29 = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 19:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField19(ctx, iprot); err != nil {
					return err
				}
				issetUnk36 = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 20:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField20(ctx, iprot); err != nil {
					return err
				}
				issetUnk37 = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 21:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField21(ctx, iprot); err != nil {
					return err
				}
				issetUnk38 = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 22:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField22(ctx, iprot); err != nil {
					return err
				}
				issetUnk39 = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 23:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField23(ctx, iprot); err != nil {
					return err
				}
				issetUnk40 = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 24:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField24(ctx, iprot); err != nil {
					return err
				}
				issetUnk41 = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 25:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField25(ctx, iprot); err != nil {
					return err
				}
				issetUnk42 = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetUnk00 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Unk00 is not set"))
	}
	if !issetUnk01 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Unk01 is not set"))
	}
	if !issetUnk02 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Unk02 is not set"))
	}
	if !issetUnk03 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Unk03 is not set"))
	}
	if !issetUnk04 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Unk04 is not set"))
	}
	if !issetUnk14 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Unk14 is not set"))
	}
	if !issetUnk15 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Unk15 is not set"))
	}
	if !issetUnk16 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Unk16 is not set"))
	}
	if !issetUnk17 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Unk17 is not set"))
	}
	if !issetUnk18 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Unk18 is not set"))
	}
	if !issetUnk19 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Unk19 is not set"))
	}
	if !issetUnk23 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Unk23 is not set"))
	}
	if !issetUnk24 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Unk24 is not set"))
	}
	if !issetUnk25 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Unk25 is not set"))
	}
	if !issetUnk26 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Unk26 is not set"))
	}
	if !issetUnk27 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Unk27 is not set"))
	}
	if !issetUnk28 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Unk28 is not set"))
	}
	if !issetUnk29 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Unk29 is not set"))
	}
	if !issetUnk36 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Unk36 is not set"))
	}
	if !issetUnk37 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Unk37 is not set"))
	}
	if !issetUnk38 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Unk38 is not set"))
	}
	if !issetUnk39 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Unk39 is not set"))
	}
	if !issetUnk40 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Unk40 is not set"))
	}
	if !issetUnk41 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Unk41 is not set"))
	}
	if !issetUnk42 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Unk42 is not set"))
	}
	return nil
}

func (p *RoomSettingUnk) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := int8(v)
		p.Unk00 = temp
	}
	return nil
}

func (p *RoomSettingUnk) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := int8(v)
		p.Unk01 = temp
	}
	return nil
}

func (p *RoomSettingUnk) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := int8(v)
		p.Unk02 = temp
	}
	return nil
}

func (p *RoomSettingUnk) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := int8(v)
		p.Unk03 = temp
	}
	return nil
}

func (p *RoomSettingUnk) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Unk04 = v
	}
	return nil
}

func (p *RoomSettingUnk) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := int8(v)
		p.Unk14 = temp
	}
	return nil
}

func (p *RoomSettingUnk) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		temp := int8(v)
		p.Unk15 = temp
	}
	return nil
}

func (p *RoomSettingUnk) ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		temp := int8(v)
		p.Unk16 = temp
	}
	return nil
}

func (p *RoomSettingUnk) ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		temp := int8(v)
		p.Unk17 = temp
	}
	return nil
}

func (p *RoomSettingUnk) ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		temp := int8(v)
		p.Unk18 = temp
	}
	return nil
}

func (p *RoomSettingUnk) ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		temp := int8(v)
		p.Unk19 = temp
	}
	return nil
}

func (p *RoomSettingUnk) ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Unk23Struct, 0, size)
	p.Unk23 = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &Unk23Struct{}
		if err := _elem0.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.Unk23 = append(p.Unk23, _elem0)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *RoomSettingUnk) ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.Unk24 = v
	}
	return nil
}

func (p *RoomSettingUnk) ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.Unk25 = v
	}
	return nil
}

func (p *RoomSettingUnk) ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		temp := int8(v)
		p.Unk26 = temp
	}
	return nil
}

func (p *RoomSettingUnk) ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		temp := int8(v)
		p.Unk27 = temp
	}
	return nil
}

func (p *RoomSettingUnk) ReadField17(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		temp := int8(v)
		p.Unk28 = temp
	}
	return nil
}

func (p *RoomSettingUnk) ReadField18(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		temp := int8(v)
		p.Unk29 = temp
	}
	return nil
}

func (p *RoomSettingUnk) ReadField19(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 19: ", err)
	} else {
		temp := int8(v)
		p.Unk36 = temp
	}
	return nil
}

func (p *RoomSettingUnk) ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		temp := int8(v)
		p.Unk37 = temp
	}
	return nil
}

func (p *RoomSettingUnk) ReadField21(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		temp := int8(v)
		p.Unk38 = temp
	}
	return nil
}

func (p *RoomSettingUnk) ReadField22(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 22: ", err)
	} else {
		temp := int8(v)
		p.Unk39 = temp
	}
	return nil
}

func (p *RoomSettingUnk) ReadField23(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Unk40Struct, 0, size)
	p.Unk40 = tSlice
	for i := 0; i < size; i++ {
		_elem1 := &Unk40Struct{}
		if err := _elem1.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
		}
		p.Unk40 = append(p.Unk40, _elem1)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *RoomSettingUnk) ReadField24(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 24: ", err)
	} else {
		temp := int8(v)
		p.Unk41 = temp
	}
	return nil
}

func (p *RoomSettingUnk) ReadField25(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 25: ", err)
	} else {
		temp := int8(v)
		p.Unk42 = temp
	}
	return nil
}

func (p *RoomSettingUnk) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "RoomSettingUnk"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField7(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField8(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField9(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField10(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField11(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField12(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField13(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField14(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField15(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField16(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField17(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField18(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField19(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField20(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField21(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField22(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField23(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField24(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField25(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RoomSettingUnk) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Unk00", thrift.BYTE, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Unk00: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.Unk00)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Unk00 (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Unk00: ", p), err)
	}
	return err
}

func (p *RoomSettingUnk) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Unk01", thrift.BYTE, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Unk01: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.Unk01)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Unk01 (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Unk01: ", p), err)
	}
	return err
}

func (p *RoomSettingUnk) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Unk02", thrift.BYTE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Unk02: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.Unk02)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Unk02 (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Unk02: ", p), err)
	}
	return err
}

func (p *RoomSettingUnk) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Unk03", thrift.BYTE, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Unk03: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.Unk03)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Unk03 (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Unk03: ", p), err)
	}
	return err
}

func (p *RoomSettingUnk) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Unk04", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Unk04: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Unk04)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Unk04 (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Unk04: ", p), err)
	}
	return err
}

func (p *RoomSettingUnk) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Unk14", thrift.BYTE, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:Unk14: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.Unk14)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Unk14 (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:Unk14: ", p), err)
	}
	return err
}

func (p *RoomSettingUnk) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Unk15", thrift.BYTE, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:Unk15: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.Unk15)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Unk15 (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:Unk15: ", p), err)
	}
	return err
}

func (p *RoomSettingUnk) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Unk16", thrift.BYTE, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:Unk16: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.Unk16)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Unk16 (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:Unk16: ", p), err)
	}
	return err
}

func (p *RoomSettingUnk) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Unk17", thrift.BYTE, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:Unk17: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.Unk17)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Unk17 (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:Unk17: ", p), err)
	}
	return err
}

func (p *RoomSettingUnk) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Unk18", thrift.BYTE, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:Unk18: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.Unk18)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Unk18 (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:Unk18: ", p), err)
	}
	return err
}

func (p *RoomSettingUnk) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Unk19", thrift.BYTE, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:Unk19: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.Unk19)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Unk19 (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:Unk19: ", p), err)
	}
	return err
}

func (p *RoomSettingUnk) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Unk23", thrift.LIST, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:Unk23: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Unk23)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Unk23 {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:Unk23: ", p), err)
	}
	return err
}

func (p *RoomSettingUnk) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Unk24", thrift.I32, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:Unk24: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Unk24)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Unk24 (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:Unk24: ", p), err)
	}
	return err
}

func (p *RoomSettingUnk) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Unk25", thrift.STRING, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:Unk25: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Unk25)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Unk25 (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:Unk25: ", p), err)
	}
	return err
}

func (p *RoomSettingUnk) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Unk26", thrift.BYTE, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:Unk26: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.Unk26)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Unk26 (15) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:Unk26: ", p), err)
	}
	return err
}

func (p *RoomSettingUnk) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Unk27", thrift.BYTE, 16); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:Unk27: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.Unk27)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Unk27 (16) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 16:Unk27: ", p), err)
	}
	return err
}

func (p *RoomSettingUnk) writeField17(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Unk28", thrift.BYTE, 17); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:Unk28: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.Unk28)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Unk28 (17) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 17:Unk28: ", p), err)
	}
	return err
}

func (p *RoomSettingUnk) writeField18(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Unk29", thrift.BYTE, 18); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:Unk29: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.Unk29)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Unk29 (18) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 18:Unk29: ", p), err)
	}
	return err
}

func (p *RoomSettingUnk) writeField19(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Unk36", thrift.BYTE, 19); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:Unk36: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.Unk36)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Unk36 (19) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 19:Unk36: ", p), err)
	}
	return err
}

func (p *RoomSettingUnk) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Unk37", thrift.BYTE, 20); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:Unk37: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.Unk37)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Unk37 (20) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 20:Unk37: ", p), err)
	}
	return err
}

func (p *RoomSettingUnk) writeField21(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Unk38", thrift.BYTE, 21); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:Unk38: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.Unk38)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Unk38 (21) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 21:Unk38: ", p), err)
	}
	return err
}

func (p *RoomSettingUnk) writeField22(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Unk39", thrift.BYTE, 22); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:Unk39: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.Unk39)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Unk39 (22) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 22:Unk39: ", p), err)
	}
	return err
}

func (p *RoomSettingUnk) writeField23(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Unk40", thrift.LIST, 23); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:Unk40: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Unk40)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Unk40 {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 23:Unk40: ", p), err)
	}
	return err
}

func (p *RoomSettingUnk) writeField24(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Unk41", thrift.BYTE, 24); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:Unk41: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.Unk41)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Unk41 (24) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 24:Unk41: ", p), err)
	}
	return err
}

func (p *RoomSettingUnk) writeField25(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Unk42", thrift.BYTE, 25); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:Unk42: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.Unk42)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Unk42 (25) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 25:Unk42: ", p), err)
	}
	return err
}

func (p *RoomSettingUnk) Equals(other *RoomSettingUnk) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Unk00 != other.Unk00 {
		return false
	}
	if p.Unk01 != other.Unk01 {
		return false
	}
	if p.Unk02 != other.Unk02 {
		return false
	}
	if p.Unk03 != other.Unk03 {
		return false
	}
	if p.Unk04 != other.Unk04 {
		return false
	}
	if p.Unk14 != other.Unk14 {
		return false
	}
	if p.Unk15 != other.Unk15 {
		return false
	}
	if p.Unk16 != other.Unk16 {
		return false
	}
	if p.Unk17 != other.Unk17 {
		return false
	}
	if p.Unk18 != other.Unk18 {
		return false
	}
	if p.Unk19 != other.Unk19 {
		return false
	}
	if len(p.Unk23) != len(other.Unk23) {
		return false
	}
	for i, _tgt := range p.Unk23 {
		_src2 := other.Unk23[i]
		if !_tgt.Equals(_src2) {
			return false
		}
	}
	if p.Unk24 != other.Unk24 {
		return false
	}
	if p.Unk25 != other.Unk25 {
		return false
	}
	if p.Unk26 != other.Unk26 {
		return false
	}
	if p.Unk27 != other.Unk27 {
		return false
	}
	if p.Unk28 != other.Unk28 {
		return false
	}
	if p.Unk29 != other.Unk29 {
		return false
	}
	if p.Unk36 != other.Unk36 {
		return false
	}
	if p.Unk37 != other.Unk37 {
		return false
	}
	if p.Unk38 != other.Unk38 {
		return false
	}
	if p.Unk39 != other.Unk39 {
		return false
	}
	if len(p.Unk40) != len(other.Unk40) {
		return false
	}
	for i, _tgt := range p.Unk40 {
		_src3 := other.Unk40[i]
		if !_tgt.Equals(_src3) {
			return false
		}
	}
	if p.Unk41 != other.Unk41 {
		return false
	}
	if p.Unk42 != other.Unk42 {
		return false
	}
	return true
}

func (p *RoomSettingUnk) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoomSettingUnk(%+v)", *p)
}

// Attributes:
//  - RoomID
//  - RoomNumber
//  - RoomName
//  - PassWd
//  - GameModeID
//  - MapID
//  - MaxPlayers
//  - WinLimit
//  - KillLimit
//  - WeaponRestrictions
//  - Status
//  - TeamBalanceType
//  - AreBotsEnabled
//  - BotDifficulty
//  - NumCtBots
//  - NumTrBots
//  - StartMoney
//  - ChangeTeams
//  - RespawnTime
//  - NextMapEnabled
//  - Difficulty
//  - IsIngame
//  - HostUserID
//  - HostUserName
//  - UserIDs
//  - ParentServer
//  - ParentChannel
//  - LevelLimit
//  - GameTime
//  - StopTime
//  - BuyLimitTime
//  - ShowName
//  - ShowFlash
//  - ViewAngle
//  - EnableVoice
//  - LimitDeaths
//  - GameTimePerRound
//  - DisableEnhancement
//  - BombCountdown
//  - FriendHurt
//  - BotBalance
//  - HostagePunish
//  - Unk
type ChannelRoom struct {
	RoomID             int16           `thrift:"RoomID,1,required" db:"RoomID" json:"RoomID"`
	RoomNumber         int8            `thrift:"RoomNumber,2,required" db:"RoomNumber" json:"RoomNumber"`
	RoomName           string          `thrift:"RoomName,3,required" db:"RoomName" json:"RoomName"`
	PassWd             string          `thrift:"PassWd,4,required" db:"PassWd" json:"PassWd"`
	GameModeID         int8            `thrift:"GameModeID,5,required" db:"GameModeID" json:"GameModeID"`
	MapID              int8            `thrift:"MapID,6,required" db:"MapID" json:"MapID"`
	MaxPlayers         int8            `thrift:"MaxPlayers,7,required" db:"MaxPlayers" json:"MaxPlayers"`
	WinLimit           int8            `thrift:"WinLimit,8,required" db:"WinLimit" json:"WinLimit"`
	KillLimit          int16           `thrift:"KillLimit,9,required" db:"KillLimit" json:"KillLimit"`
	WeaponRestrictions int8            `thrift:"WeaponRestrictions,10,required" db:"WeaponRestrictions" json:"WeaponRestrictions"`
	Status             int8            `thrift:"Status,11,required" db:"Status" json:"Status"`
	TeamBalanceType    int8            `thrift:"TeamBalanceType,12,required" db:"TeamBalanceType" json:"TeamBalanceType"`
	AreBotsEnabled     int8            `thrift:"AreBotsEnabled,13,required" db:"AreBotsEnabled" json:"AreBotsEnabled"`
	BotDifficulty      int8            `thrift:"BotDifficulty,14,required" db:"BotDifficulty" json:"BotDifficulty"`
	NumCtBots          int8            `thrift:"NumCtBots,15,required" db:"NumCtBots" json:"NumCtBots"`
	NumTrBots          int8            `thrift:"NumTrBots,16,required" db:"NumTrBots" json:"NumTrBots"`
	StartMoney         int16           `thrift:"StartMoney,17,required" db:"StartMoney" json:"StartMoney"`
	ChangeTeams        int8            `thrift:"ChangeTeams,18,required" db:"ChangeTeams" json:"ChangeTeams"`
	RespawnTime        int8            `thrift:"RespawnTime,19,required" db:"RespawnTime" json:"RespawnTime"`
	NextMapEnabled     int8            `thrift:"NextMapEnabled,20,required" db:"NextMapEnabled" json:"NextMapEnabled"`
	Difficulty         int8            `thrift:"Difficulty,21,required" db:"Difficulty" json:"Difficulty"`
	IsIngame           int8            `thrift:"IsIngame,22,required" db:"IsIngame" json:"IsIngame"`
	HostUserID         int32           `thrift:"HostUserID,23,required" db:"HostUserID" json:"HostUserID"`
	HostUserName       string          `thrift:"HostUserName,24,required" db:"HostUserName" json:"HostUserName"`
	UserIDs            []int32         `thrift:"UserIDs,25,required" db:"UserIDs" json:"UserIDs"`
	ParentServer       int8            `thrift:"ParentServer,26,required" db:"ParentServer" json:"ParentServer"`
	ParentChannel      int8            `thrift:"ParentChannel,27,required" db:"ParentChannel" json:"ParentChannel"`
	LevelLimit         int8            `thrift:"LevelLimit,28,required" db:"LevelLimit" json:"LevelLimit"`
	GameTime           int8            `thrift:"GameTime,29,required" db:"GameTime" json:"GameTime"`
	StopTime           int8            `thrift:"StopTime,30,required" db:"StopTime" json:"StopTime"`
	BuyLimitTime       int8            `thrift:"BuyLimitTime,31,required" db:"BuyLimitTime" json:"BuyLimitTime"`
	ShowName           int8            `thrift:"ShowName,32,required" db:"ShowName" json:"ShowName"`
	ShowFlash          int8            `thrift:"ShowFlash,33,required" db:"ShowFlash" json:"ShowFlash"`
	ViewAngle          int8            `thrift:"ViewAngle,34,required" db:"ViewAngle" json:"ViewAngle"`
	EnableVoice        int8            `thrift:"EnableVoice,35,required" db:"EnableVoice" json:"EnableVoice"`
	LimitDeaths        int8            `thrift:"LimitDeaths,36,required" db:"LimitDeaths" json:"LimitDeaths"`
	GameTimePerRound   int8            `thrift:"GameTimePerRound,37,required" db:"GameTimePerRound" json:"GameTimePerRound"`
	DisableEnhancement int8            `thrift:"DisableEnhancement,38,required" db:"DisableEnhancement" json:"DisableEnhancement"`
	BombCountdown      int8            `thrift:"BombCountdown,39,required" db:"BombCountdown" json:"BombCountdown"`
	FriendHurt         int8            `thrift:"FriendHurt,40,required" db:"FriendHurt" json:"FriendHurt"`
	BotBalance         int8            `thrift:"BotBalance,41,required" db:"BotBalance" json:"BotBalance"`
	HostagePunish      int8            `thrift:"HostagePunish,42,required" db:"HostagePunish" json:"HostagePunish"`
	Unk                *RoomSettingUnk `thrift:"Unk,43,required" db:"Unk" json:"Unk"`
}

func NewChannelRoom() *ChannelRoom {
	return &ChannelRoom{}
}

func (p *ChannelRoom) GetRoomID() int16 {
	return p.RoomID
}

func (p *ChannelRoom) GetRoomNumber() int8 {
	return p.RoomNumber
}

func (p *ChannelRoom) GetRoomName() string {
	return p.RoomName
}

func (p *ChannelRoom) GetPassWd() string {
	return p.PassWd
}

func (p *ChannelRoom) GetGameModeID() int8 {
	return p.GameModeID
}

func (p *ChannelRoom) GetMapID() int8 {
	return p.MapID
}

func (p *ChannelRoom) GetMaxPlayers() int8 {
	return p.MaxPlayers
}

func (p *ChannelRoom) GetWinLimit() int8 {
	return p.WinLimit
}

func (p *ChannelRoom) GetKillLimit() int16 {
	return p.KillLimit
}

func (p *ChannelRoom) GetWeaponRestrictions() int8 {
	return p.WeaponRestrictions
}

func (p *ChannelRoom) GetStatus() int8 {
	return p.Status
}

func (p *ChannelRoom) GetTeamBalanceType() int8 {
	return p.TeamBalanceType
}

func (p *ChannelRoom) GetAreBotsEnabled() int8 {
	return p.AreBotsEnabled
}

func (p *ChannelRoom) GetBotDifficulty() int8 {
	return p.BotDifficulty
}

func (p *ChannelRoom) GetNumCtBots() int8 {
	return p.NumCtBots
}

func (p *ChannelRoom) GetNumTrBots() int8 {
	return p.NumTrBots
}

func (p *ChannelRoom) GetStartMoney() int16 {
	return p.StartMoney
}

func (p *ChannelRoom) GetChangeTeams() int8 {
	return p.ChangeTeams
}

func (p *ChannelRoom) GetRespawnTime() int8 {
	return p.RespawnTime
}

func (p *ChannelRoom) GetNextMapEnabled() int8 {
	return p.NextMapEnabled
}

func (p *ChannelRoom) GetDifficulty() int8 {
	return p.Difficulty
}

func (p *ChannelRoom) GetIsIngame() int8 {
	return p.IsIngame
}

func (p *ChannelRoom) GetHostUserID() int32 {
	return p.HostUserID
}

func (p *ChannelRoom) GetHostUserName() string {
	return p.HostUserName
}

func (p *ChannelRoom) GetUserIDs() []int32 {
	return p.UserIDs
}

func (p *ChannelRoom) GetParentServer() int8 {
	return p.ParentServer
}

func (p *ChannelRoom) GetParentChannel() int8 {
	return p.ParentChannel
}

func (p *ChannelRoom) GetLevelLimit() int8 {
	return p.LevelLimit
}

func (p *ChannelRoom) GetGameTime() int8 {
	return p.GameTime
}

func (p *ChannelRoom) GetStopTime() int8 {
	return p.StopTime
}

func (p *ChannelRoom) GetBuyLimitTime() int8 {
	return p.BuyLimitTime
}

func (p *ChannelRoom) GetShowName() int8 {
	return p.ShowName
}

func (p *ChannelRoom) GetShowFlash() int8 {
	return p.ShowFlash
}

func (p *ChannelRoom) GetViewAngle() int8 {
	return p.ViewAngle
}

func (p *ChannelRoom) GetEnableVoice() int8 {
	return p.EnableVoice
}

func (p *ChannelRoom) GetLimitDeaths() int8 {
	return p.LimitDeaths
}

func (p *ChannelRoom) GetGameTimePerRound() int8 {
	return p.GameTimePerRound
}

func (p *ChannelRoom) GetDisableEnhancement() int8 {
	return p.DisableEnhancement
}

func (p *ChannelRoom) GetBombCountdown() int8 {
	return p.BombCountdown
}

func (p *ChannelRoom) GetFriendHurt() int8 {
	return p.FriendHurt
}

func (p *ChannelRoom) GetBotBalance() int8 {
	return p.BotBalance
}

func (p *ChannelRoom) GetHostagePunish() int8 {
	return p.HostagePunish
}

var ChannelRoom_Unk_DEFAULT *RoomSettingUnk

func (p *ChannelRoom) GetUnk() *RoomSettingUnk {
	if !p.IsSetUnk() {
		return ChannelRoom_Unk_DEFAULT
	}
	return p.Unk
}
func (p *ChannelRoom) IsSetUnk() bool {
	return p.Unk != nil
}

func (p *ChannelRoom) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetRoomID bool = false
	var issetRoomNumber bool = false
	var issetRoomName bool = false
	var issetPassWd bool = false
	var issetGameModeID bool = false
	var issetMapID bool = false
	var issetMaxPlayers bool = false
	var issetWinLimit bool = false
	var issetKillLimit bool = false
	var issetWeaponRestrictions bool = false
	var issetStatus bool = false
	var issetTeamBalanceType bool = false
	var issetAreBotsEnabled bool = false
	var issetBotDifficulty bool = false
	var issetNumCtBots bool = false
	var issetNumTrBots bool = false
	var issetStartMoney bool = false
	var issetChangeTeams bool = false
	var issetRespawnTime bool = false
	var issetNextMapEnabled bool = false
	var issetDifficulty bool = false
	var issetIsIngame bool = false
	var issetHostUserID bool = false
	var issetHostUserName bool = false
	var issetUserIDs bool = false
	var issetParentServer bool = false
	var issetParentChannel bool = false
	var issetLevelLimit bool = false
	var issetGameTime bool = false
	var issetStopTime bool = false
	var issetBuyLimitTime bool = false
	var issetShowName bool = false
	var issetShowFlash bool = false
	var issetViewAngle bool = false
	var issetEnableVoice bool = false
	var issetLimitDeaths bool = false
	var issetGameTimePerRound bool = false
	var issetDisableEnhancement bool = false
	var issetBombCountdown bool = false
	var issetFriendHurt bool = false
	var issetBotBalance bool = false
	var issetHostagePunish bool = false
	var issetUnk bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetRoomID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetRoomNumber = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
				issetRoomName = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
				issetPassWd = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
				issetGameModeID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
				issetMapID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
				issetMaxPlayers = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField8(ctx, iprot); err != nil {
					return err
				}
				issetWinLimit = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField9(ctx, iprot); err != nil {
					return err
				}
				issetKillLimit = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField10(ctx, iprot); err != nil {
					return err
				}
				issetWeaponRestrictions = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField11(ctx, iprot); err != nil {
					return err
				}
				issetStatus = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField12(ctx, iprot); err != nil {
					return err
				}
				issetTeamBalanceType = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 13:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField13(ctx, iprot); err != nil {
					return err
				}
				issetAreBotsEnabled = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 14:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField14(ctx, iprot); err != nil {
					return err
				}
				issetBotDifficulty = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 15:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField15(ctx, iprot); err != nil {
					return err
				}
				issetNumCtBots = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 16:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField16(ctx, iprot); err != nil {
					return err
				}
				issetNumTrBots = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 17:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField17(ctx, iprot); err != nil {
					return err
				}
				issetStartMoney = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 18:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField18(ctx, iprot); err != nil {
					return err
				}
				issetChangeTeams = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 19:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField19(ctx, iprot); err != nil {
					return err
				}
				issetRespawnTime = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 20:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField20(ctx, iprot); err != nil {
					return err
				}
				issetNextMapEnabled = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 21:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField21(ctx, iprot); err != nil {
					return err
				}
				issetDifficulty = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 22:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField22(ctx, iprot); err != nil {
					return err
				}
				issetIsIngame = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 23:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField23(ctx, iprot); err != nil {
					return err
				}
				issetHostUserID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 24:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField24(ctx, iprot); err != nil {
					return err
				}
				issetHostUserName = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 25:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField25(ctx, iprot); err != nil {
					return err
				}
				issetUserIDs = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 26:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField26(ctx, iprot); err != nil {
					return err
				}
				issetParentServer = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 27:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField27(ctx, iprot); err != nil {
					return err
				}
				issetParentChannel = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 28:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField28(ctx, iprot); err != nil {
					return err
				}
				issetLevelLimit = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 29:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField29(ctx, iprot); err != nil {
					return err
				}
				issetGameTime = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 30:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField30(ctx, iprot); err != nil {
					return err
				}
				issetStopTime = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 31:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField31(ctx, iprot); err != nil {
					return err
				}
				issetBuyLimitTime = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 32:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField32(ctx, iprot); err != nil {
					return err
				}
				issetShowName = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 33:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField33(ctx, iprot); err != nil {
					return err
				}
				issetShowFlash = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 34:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField34(ctx, iprot); err != nil {
					return err
				}
				issetViewAngle = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 35:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField35(ctx, iprot); err != nil {
					return err
				}
				issetEnableVoice = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 36:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField36(ctx, iprot); err != nil {
					return err
				}
				issetLimitDeaths = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 37:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField37(ctx, iprot); err != nil {
					return err
				}
				issetGameTimePerRound = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 38:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField38(ctx, iprot); err != nil {
					return err
				}
				issetDisableEnhancement = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 39:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField39(ctx, iprot); err != nil {
					return err
				}
				issetBombCountdown = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 40:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField40(ctx, iprot); err != nil {
					return err
				}
				issetFriendHurt = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 41:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField41(ctx, iprot); err != nil {
					return err
				}
				issetBotBalance = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 42:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField42(ctx, iprot); err != nil {
					return err
				}
				issetHostagePunish = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 43:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField43(ctx, iprot); err != nil {
					return err
				}
				issetUnk = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetRoomID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoomID is not set"))
	}
	if !issetRoomNumber {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoomNumber is not set"))
	}
	if !issetRoomName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoomName is not set"))
	}
	if !issetPassWd {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PassWd is not set"))
	}
	if !issetGameModeID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GameModeID is not set"))
	}
	if !issetMapID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MapID is not set"))
	}
	if !issetMaxPlayers {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MaxPlayers is not set"))
	}
	if !issetWinLimit {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field WinLimit is not set"))
	}
	if !issetKillLimit {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field KillLimit is not set"))
	}
	if !issetWeaponRestrictions {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field WeaponRestrictions is not set"))
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	if !issetTeamBalanceType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TeamBalanceType is not set"))
	}
	if !issetAreBotsEnabled {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AreBotsEnabled is not set"))
	}
	if !issetBotDifficulty {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BotDifficulty is not set"))
	}
	if !issetNumCtBots {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumCtBots is not set"))
	}
	if !issetNumTrBots {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumTrBots is not set"))
	}
	if !issetStartMoney {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StartMoney is not set"))
	}
	if !issetChangeTeams {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ChangeTeams is not set"))
	}
	if !issetRespawnTime {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RespawnTime is not set"))
	}
	if !issetNextMapEnabled {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NextMapEnabled is not set"))
	}
	if !issetDifficulty {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Difficulty is not set"))
	}
	if !issetIsIngame {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IsIngame is not set"))
	}
	if !issetHostUserID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field HostUserID is not set"))
	}
	if !issetHostUserName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field HostUserName is not set"))
	}
	if !issetUserIDs {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserIDs is not set"))
	}
	if !issetParentServer {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ParentServer is not set"))
	}
	if !issetParentChannel {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ParentChannel is not set"))
	}
	if !issetLevelLimit {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LevelLimit is not set"))
	}
	if !issetGameTime {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GameTime is not set"))
	}
	if !issetStopTime {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StopTime is not set"))
	}
	if !issetBuyLimitTime {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BuyLimitTime is not set"))
	}
	if !issetShowName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ShowName is not set"))
	}
	if !issetShowFlash {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ShowFlash is not set"))
	}
	if !issetViewAngle {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ViewAngle is not set"))
	}
	if !issetEnableVoice {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field EnableVoice is not set"))
	}
	if !issetLimitDeaths {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LimitDeaths is not set"))
	}
	if !issetGameTimePerRound {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GameTimePerRound is not set"))
	}
	if !issetDisableEnhancement {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DisableEnhancement is not set"))
	}
	if !issetBombCountdown {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BombCountdown is not set"))
	}
	if !issetFriendHurt {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field FriendHurt is not set"))
	}
	if !issetBotBalance {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BotBalance is not set"))
	}
	if !issetHostagePunish {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field HostagePunish is not set"))
	}
	if !issetUnk {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Unk is not set"))
	}
	return nil
}

func (p *ChannelRoom) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.RoomID = v
	}
	return nil
}

func (p *ChannelRoom) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := int8(v)
		p.RoomNumber = temp
	}
	return nil
}

func (p *ChannelRoom) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RoomName = v
	}
	return nil
}

func (p *ChannelRoom) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.PassWd = v
	}
	return nil
}

func (p *ChannelRoom) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := int8(v)
		p.GameModeID = temp
	}
	return nil
}

func (p *ChannelRoom) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := int8(v)
		p.MapID = temp
	}
	return nil
}

func (p *ChannelRoom) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		temp := int8(v)
		p.MaxPlayers = temp
	}
	return nil
}

func (p *ChannelRoom) ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		temp := int8(v)
		p.WinLimit = temp
	}
	return nil
}

func (p *ChannelRoom) ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.KillLimit = v
	}
	return nil
}

func (p *ChannelRoom) ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		temp := int8(v)
		p.WeaponRestrictions = temp
	}
	return nil
}

func (p *ChannelRoom) ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		temp := int8(v)
		p.Status = temp
	}
	return nil
}

func (p *ChannelRoom) ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		temp := int8(v)
		p.TeamBalanceType = temp
	}
	return nil
}

func (p *ChannelRoom) ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		temp := int8(v)
		p.AreBotsEnabled = temp
	}
	return nil
}

func (p *ChannelRoom) ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		temp := int8(v)
		p.BotDifficulty = temp
	}
	return nil
}

func (p *ChannelRoom) ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		temp := int8(v)
		p.NumCtBots = temp
	}
	return nil
}

func (p *ChannelRoom) ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		temp := int8(v)
		p.NumTrBots = temp
	}
	return nil
}

func (p *ChannelRoom) ReadField17(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.StartMoney = v
	}
	return nil
}

func (p *ChannelRoom) ReadField18(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		temp := int8(v)
		p.ChangeTeams = temp
	}
	return nil
}

func (p *ChannelRoom) ReadField19(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 19: ", err)
	} else {
		temp := int8(v)
		p.RespawnTime = temp
	}
	return nil
}

func (p *ChannelRoom) ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		temp := int8(v)
		p.NextMapEnabled = temp
	}
	return nil
}

func (p *ChannelRoom) ReadField21(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		temp := int8(v)
		p.Difficulty = temp
	}
	return nil
}

func (p *ChannelRoom) ReadField22(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 22: ", err)
	} else {
		temp := int8(v)
		p.IsIngame = temp
	}
	return nil
}

func (p *ChannelRoom) ReadField23(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 23: ", err)
	} else {
		p.HostUserID = v
	}
	return nil
}

func (p *ChannelRoom) ReadField24(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 24: ", err)
	} else {
		p.HostUserName = v
	}
	return nil
}

func (p *ChannelRoom) ReadField25(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int32, 0, size)
	p.UserIDs = tSlice
	for i := 0; i < size; i++ {
		var _elem4 int32
		if v, err := iprot.ReadI32(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem4 = v
		}
		p.UserIDs = append(p.UserIDs, _elem4)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ChannelRoom) ReadField26(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 26: ", err)
	} else {
		temp := int8(v)
		p.ParentServer = temp
	}
	return nil
}

func (p *ChannelRoom) ReadField27(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 27: ", err)
	} else {
		temp := int8(v)
		p.ParentChannel = temp
	}
	return nil
}

func (p *ChannelRoom) ReadField28(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 28: ", err)
	} else {
		temp := int8(v)
		p.LevelLimit = temp
	}
	return nil
}

func (p *ChannelRoom) ReadField29(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 29: ", err)
	} else {
		temp := int8(v)
		p.GameTime = temp
	}
	return nil
}

func (p *ChannelRoom) ReadField30(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 30: ", err)
	} else {
		temp := int8(v)
		p.StopTime = temp
	}
	return nil
}

func (p *ChannelRoom) ReadField31(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 31: ", err)
	} else {
		temp := int8(v)
		p.BuyLimitTime = temp
	}
	return nil
}

func (p *ChannelRoom) ReadField32(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 32: ", err)
	} else {
		temp := int8(v)
		p.ShowName = temp
	}
	return nil
}

func (p *ChannelRoom) ReadField33(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 33: ", err)
	} else {
		temp := int8(v)
		p.ShowFlash = temp
	}
	return nil
}

func (p *ChannelRoom) ReadField34(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 34: ", err)
	} else {
		temp := int8(v)
		p.ViewAngle = temp
	}
	return nil
}

func (p *ChannelRoom) ReadField35(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 35: ", err)
	} else {
		temp := int8(v)
		p.EnableVoice = temp
	}
	return nil
}

func (p *ChannelRoom) ReadField36(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 36: ", err)
	} else {
		temp := int8(v)
		p.LimitDeaths = temp
	}
	return nil
}

func (p *ChannelRoom) ReadField37(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 37: ", err)
	} else {
		temp := int8(v)
		p.GameTimePerRound = temp
	}
	return nil
}

func (p *ChannelRoom) ReadField38(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 38: ", err)
	} else {
		temp := int8(v)
		p.DisableEnhancement = temp
	}
	return nil
}

func (p *ChannelRoom) ReadField39(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 39: ", err)
	} else {
		temp := int8(v)
		p.BombCountdown = temp
	}
	return nil
}

func (p *ChannelRoom) ReadField40(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 40: ", err)
	} else {
		temp := int8(v)
		p.FriendHurt = temp
	}
	return nil
}

func (p *ChannelRoom) ReadField41(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 41: ", err)
	} else {
		temp := int8(v)
		p.BotBalance = temp
	}
	return nil
}

func (p *ChannelRoom) ReadField42(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 42: ", err)
	} else {
		temp := int8(v)
		p.HostagePunish = temp
	}
	return nil
}

func (p *ChannelRoom) ReadField43(ctx context.Context, iprot thrift.TProtocol) error {
	p.Unk = &RoomSettingUnk{}
	if err := p.Unk.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Unk), err)
	}
	return nil
}

func (p *ChannelRoom) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ChannelRoom"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField7(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField8(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField9(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField10(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField11(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField12(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField13(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField14(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField15(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField16(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField17(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField18(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField19(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField20(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField21(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField22(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField23(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField24(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField25(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField26(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField27(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField28(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField29(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField30(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField31(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField32(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField33(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField34(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField35(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField36(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField37(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField38(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField39(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField40(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField41(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField42(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField43(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ChannelRoom) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "RoomID", thrift.I16, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:RoomID: ", p), err)
	}
	if err := oprot.WriteI16(ctx, int16(p.RoomID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.RoomID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:RoomID: ", p), err)
	}
	return err
}

func (p *ChannelRoom) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "RoomNumber", thrift.BYTE, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:RoomNumber: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.RoomNumber)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.RoomNumber (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:RoomNumber: ", p), err)
	}
	return err
}

func (p *ChannelRoom) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "RoomName", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:RoomName: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.RoomName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.RoomName (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:RoomName: ", p), err)
	}
	return err
}

func (p *ChannelRoom) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "PassWd", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:PassWd: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.PassWd)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.PassWd (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:PassWd: ", p), err)
	}
	return err
}

func (p *ChannelRoom) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "GameModeID", thrift.BYTE, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:GameModeID: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.GameModeID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.GameModeID (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:GameModeID: ", p), err)
	}
	return err
}

func (p *ChannelRoom) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "MapID", thrift.BYTE, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:MapID: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.MapID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.MapID (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:MapID: ", p), err)
	}
	return err
}

func (p *ChannelRoom) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "MaxPlayers", thrift.BYTE, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:MaxPlayers: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.MaxPlayers)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.MaxPlayers (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:MaxPlayers: ", p), err)
	}
	return err
}

func (p *ChannelRoom) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "WinLimit", thrift.BYTE, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:WinLimit: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.WinLimit)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.WinLimit (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:WinLimit: ", p), err)
	}
	return err
}

func (p *ChannelRoom) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "KillLimit", thrift.I16, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:KillLimit: ", p), err)
	}
	if err := oprot.WriteI16(ctx, int16(p.KillLimit)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.KillLimit (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:KillLimit: ", p), err)
	}
	return err
}

func (p *ChannelRoom) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "WeaponRestrictions", thrift.BYTE, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:WeaponRestrictions: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.WeaponRestrictions)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.WeaponRestrictions (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:WeaponRestrictions: ", p), err)
	}
	return err
}

func (p *ChannelRoom) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Status", thrift.BYTE, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:Status: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Status (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:Status: ", p), err)
	}
	return err
}

func (p *ChannelRoom) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "TeamBalanceType", thrift.BYTE, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:TeamBalanceType: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.TeamBalanceType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.TeamBalanceType (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:TeamBalanceType: ", p), err)
	}
	return err
}

func (p *ChannelRoom) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "AreBotsEnabled", thrift.BYTE, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:AreBotsEnabled: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.AreBotsEnabled)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.AreBotsEnabled (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:AreBotsEnabled: ", p), err)
	}
	return err
}

func (p *ChannelRoom) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "BotDifficulty", thrift.BYTE, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:BotDifficulty: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.BotDifficulty)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.BotDifficulty (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:BotDifficulty: ", p), err)
	}
	return err
}

func (p *ChannelRoom) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "NumCtBots", thrift.BYTE, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:NumCtBots: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.NumCtBots)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.NumCtBots (15) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:NumCtBots: ", p), err)
	}
	return err
}

func (p *ChannelRoom) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "NumTrBots", thrift.BYTE, 16); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:NumTrBots: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.NumTrBots)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.NumTrBots (16) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 16:NumTrBots: ", p), err)
	}
	return err
}

func (p *ChannelRoom) writeField17(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "StartMoney", thrift.I16, 17); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:StartMoney: ", p), err)
	}
	if err := oprot.WriteI16(ctx, int16(p.StartMoney)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.StartMoney (17) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 17:StartMoney: ", p), err)
	}
	return err
}

func (p *ChannelRoom) writeField18(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ChangeTeams", thrift.BYTE, 18); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:ChangeTeams: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.ChangeTeams)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ChangeTeams (18) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 18:ChangeTeams: ", p), err)
	}
	return err
}

func (p *ChannelRoom) writeField19(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "RespawnTime", thrift.BYTE, 19); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:RespawnTime: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.RespawnTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.RespawnTime (19) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 19:RespawnTime: ", p), err)
	}
	return err
}

func (p *ChannelRoom) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "NextMapEnabled", thrift.BYTE, 20); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:NextMapEnabled: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.NextMapEnabled)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.NextMapEnabled (20) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 20:NextMapEnabled: ", p), err)
	}
	return err
}

func (p *ChannelRoom) writeField21(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Difficulty", thrift.BYTE, 21); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:Difficulty: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.Difficulty)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Difficulty (21) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 21:Difficulty: ", p), err)
	}
	return err
}

func (p *ChannelRoom) writeField22(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "IsIngame", thrift.BYTE, 22); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:IsIngame: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.IsIngame)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.IsIngame (22) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 22:IsIngame: ", p), err)
	}
	return err
}

func (p *ChannelRoom) writeField23(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "HostUserID", thrift.I32, 23); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:HostUserID: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.HostUserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.HostUserID (23) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 23:HostUserID: ", p), err)
	}
	return err
}

func (p *ChannelRoom) writeField24(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "HostUserName", thrift.STRING, 24); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:HostUserName: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.HostUserName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.HostUserName (24) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 24:HostUserName: ", p), err)
	}
	return err
}

func (p *ChannelRoom) writeField25(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "UserIDs", thrift.LIST, 25); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:UserIDs: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.UserIDs)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.UserIDs {
		if err := oprot.WriteI32(ctx, int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 25:UserIDs: ", p), err)
	}
	return err
}

func (p *ChannelRoom) writeField26(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ParentServer", thrift.BYTE, 26); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:ParentServer: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.ParentServer)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ParentServer (26) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 26:ParentServer: ", p), err)
	}
	return err
}

func (p *ChannelRoom) writeField27(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ParentChannel", thrift.BYTE, 27); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:ParentChannel: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.ParentChannel)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ParentChannel (27) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 27:ParentChannel: ", p), err)
	}
	return err
}

func (p *ChannelRoom) writeField28(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "LevelLimit", thrift.BYTE, 28); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:LevelLimit: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.LevelLimit)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.LevelLimit (28) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 28:LevelLimit: ", p), err)
	}
	return err
}

func (p *ChannelRoom) writeField29(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "GameTime", thrift.BYTE, 29); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 29:GameTime: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.GameTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.GameTime (29) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 29:GameTime: ", p), err)
	}
	return err
}

func (p *ChannelRoom) writeField30(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "StopTime", thrift.BYTE, 30); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:StopTime: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.StopTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.StopTime (30) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 30:StopTime: ", p), err)
	}
	return err
}

func (p *ChannelRoom) writeField31(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "BuyLimitTime", thrift.BYTE, 31); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:BuyLimitTime: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.BuyLimitTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.BuyLimitTime (31) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 31:BuyLimitTime: ", p), err)
	}
	return err
}

func (p *ChannelRoom) writeField32(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ShowName", thrift.BYTE, 32); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:ShowName: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.ShowName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ShowName (32) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 32:ShowName: ", p), err)
	}
	return err
}

func (p *ChannelRoom) writeField33(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ShowFlash", thrift.BYTE, 33); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 33:ShowFlash: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.ShowFlash)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ShowFlash (33) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 33:ShowFlash: ", p), err)
	}
	return err
}

func (p *ChannelRoom) writeField34(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ViewAngle", thrift.BYTE, 34); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 34:ViewAngle: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.ViewAngle)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ViewAngle (34) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 34:ViewAngle: ", p), err)
	}
	return err
}

func (p *ChannelRoom) writeField35(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "EnableVoice", thrift.BYTE, 35); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 35:EnableVoice: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.EnableVoice)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.EnableVoice (35) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 35:EnableVoice: ", p), err)
	}
	return err
}

func (p *ChannelRoom) writeField36(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "LimitDeaths", thrift.BYTE, 36); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 36:LimitDeaths: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.LimitDeaths)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.LimitDeaths (36) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 36:LimitDeaths: ", p), err)
	}
	return err
}

func (p *ChannelRoom) writeField37(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "GameTimePerRound", thrift.BYTE, 37); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 37:GameTimePerRound: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.GameTimePerRound)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.GameTimePerRound (37) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 37:GameTimePerRound: ", p), err)
	}
	return err
}

func (p *ChannelRoom) writeField38(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "DisableEnhancement", thrift.BYTE, 38); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 38:DisableEnhancement: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.DisableEnhancement)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.DisableEnhancement (38) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 38:DisableEnhancement: ", p), err)
	}
	return err
}

func (p *ChannelRoom) writeField39(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "BombCountdown", thrift.BYTE, 39); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 39:BombCountdown: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.BombCountdown)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.BombCountdown (39) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 39:BombCountdown: ", p), err)
	}
	return err
}

func (p *ChannelRoom) writeField40(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "FriendHurt", thrift.BYTE, 40); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:FriendHurt: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.FriendHurt)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.FriendHurt (40) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 40:FriendHurt: ", p), err)
	}
	return err
}

func (p *ChannelRoom) writeField41(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "BotBalance", thrift.BYTE, 41); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 41:BotBalance: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.BotBalance)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.BotBalance (41) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 41:BotBalance: ", p), err)
	}
	return err
}

func (p *ChannelRoom) writeField42(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "HostagePunish", thrift.BYTE, 42); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 42:HostagePunish: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.HostagePunish)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.HostagePunish (42) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 42:HostagePunish: ", p), err)
	}
	return err
}

func (p *ChannelRoom) writeField43(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Unk", thrift.STRUCT, 43); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 43:Unk: ", p), err)
	}
	if err := p.Unk.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Unk), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 43:Unk: ", p), err)
	}
	return err
}

func (p *ChannelRoom) Equals(other *ChannelRoom) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.RoomID != other.RoomID {
		return false
	}
	if p.RoomNumber != other.RoomNumber {
		return false
	}
	if p.RoomName != other.RoomName {
		return false
	}
	if p.PassWd != other.PassWd {
		return false
	}
	if p.GameModeID != other.GameModeID {
		return false
	}
	if p.MapID != other.MapID {
		return false
	}
	if p.MaxPlayers != other.MaxPlayers {
		return false
	}
	if p.WinLimit != other.WinLimit {
		return false
	}
	if p.KillLimit != other.KillLimit {
		return false
	}
	if p.WeaponRestrictions != other.WeaponRestrictions {
		return false
	}
	if p.Status != other.Status {
		return false
	}
	if p.TeamBalanceType != other.TeamBalanceType {
		return false
	}
	if p.AreBotsEnabled != other.AreBotsEnabled {
		return false
	}
	if p.BotDifficulty != other.BotDifficulty {
		return false
	}
	if p.NumCtBots != other.NumCtBots {
		return false
	}
	if p.NumTrBots != other.NumTrBots {
		return false
	}
	if p.StartMoney != other.StartMoney {
		return false
	}
	if p.ChangeTeams != other.ChangeTeams {
		return false
	}
	if p.RespawnTime != other.RespawnTime {
		return false
	}
	if p.NextMapEnabled != other.NextMapEnabled {
		return false
	}
	if p.Difficulty != other.Difficulty {
		return false
	}
	if p.IsIngame != other.IsIngame {
		return false
	}
	if p.HostUserID != other.HostUserID {
		return false
	}
	if p.HostUserName != other.HostUserName {
		return false
	}
	if len(p.UserIDs) != len(other.UserIDs) {
		return false
	}
	for i, _tgt := range p.UserIDs {
		_src5 := other.UserIDs[i]
		if _tgt != _src5 {
			return false
		}
	}
	if p.ParentServer != other.ParentServer {
		return false
	}
	if p.ParentChannel != other.ParentChannel {
		return false
	}
	if p.LevelLimit != other.LevelLimit {
		return false
	}
	if p.GameTime != other.GameTime {
		return false
	}
	if p.StopTime != other.StopTime {
		return false
	}
	if p.BuyLimitTime != other.BuyLimitTime {
		return false
	}
	if p.ShowName != other.ShowName {
		return false
	}
	if p.ShowFlash != other.ShowFlash {
		return false
	}
	if p.ViewAngle != other.ViewAngle {
		return false
	}
	if p.EnableVoice != other.EnableVoice {
		return false
	}
	if p.LimitDeaths != other.LimitDeaths {
		return false
	}
	if p.GameTimePerRound != other.GameTimePerRound {
		return false
	}
	if p.DisableEnhancement != other.DisableEnhancement {
		return false
	}
	if p.BombCountdown != other.BombCountdown {
		return false
	}
	if p.FriendHurt != other.FriendHurt {
		return false
	}
	if p.BotBalance != other.BotBalance {
		return false
	}
	if p.HostagePunish != other.HostagePunish {
		return false
	}
	if !p.Unk.Equals(other.Unk) {
		return false
	}
	return true
}

func (p *ChannelRoom) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChannelRoom(%+v)", *p)
}

// Attributes:
//  - ChannelIndex
//  - ChannelName
//  - ChannelStatus
//  - ChannelType
type Channel struct {
	ChannelIndex  int8   `thrift:"ChannelIndex,1,required" db:"ChannelIndex" json:"ChannelIndex"`
	ChannelName   string `thrift:"ChannelName,2,required" db:"ChannelName" json:"ChannelName"`
	ChannelStatus int8   `thrift:"ChannelStatus,3,required" db:"ChannelStatus" json:"ChannelStatus"`
	ChannelType   int8   `thrift:"ChannelType,4,required" db:"ChannelType" json:"ChannelType"`
}

func NewChannel() *Channel {
	return &Channel{}
}

func (p *Channel) GetChannelIndex() int8 {
	return p.ChannelIndex
}

func (p *Channel) GetChannelName() string {
	return p.ChannelName
}

func (p *Channel) GetChannelStatus() int8 {
	return p.ChannelStatus
}

func (p *Channel) GetChannelType() int8 {
	return p.ChannelType
}
func (p *Channel) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetChannelIndex bool = false
	var issetChannelName bool = false
	var issetChannelStatus bool = false
	var issetChannelType bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetChannelIndex = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetChannelName = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
				issetChannelStatus = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
				issetChannelType = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetChannelIndex {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ChannelIndex is not set"))
	}
	if !issetChannelName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ChannelName is not set"))
	}
	if !issetChannelStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ChannelStatus is not set"))
	}
	if !issetChannelType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ChannelType is not set"))
	}
	return nil
}

func (p *Channel) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := int8(v)
		p.ChannelIndex = temp
	}
	return nil
}

func (p *Channel) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ChannelName = v
	}
	return nil
}

func (p *Channel) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := int8(v)
		p.ChannelStatus = temp
	}
	return nil
}

func (p *Channel) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := int8(v)
		p.ChannelType = temp
	}
	return nil
}

func (p *Channel) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Channel"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Channel) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ChannelIndex", thrift.BYTE, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ChannelIndex: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.ChannelIndex)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ChannelIndex (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ChannelIndex: ", p), err)
	}
	return err
}

func (p *Channel) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ChannelName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ChannelName: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ChannelName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ChannelName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ChannelName: ", p), err)
	}
	return err
}

func (p *Channel) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ChannelStatus", thrift.BYTE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ChannelStatus: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.ChannelStatus)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ChannelStatus (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ChannelStatus: ", p), err)
	}
	return err
}

func (p *Channel) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ChannelType", thrift.BYTE, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ChannelType: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.ChannelType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ChannelType (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ChannelType: ", p), err)
	}
	return err
}

func (p *Channel) Equals(other *Channel) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.ChannelIndex != other.ChannelIndex {
		return false
	}
	if p.ChannelName != other.ChannelName {
		return false
	}
	if p.ChannelStatus != other.ChannelStatus {
		return false
	}
	if p.ChannelType != other.ChannelType {
		return false
	}
	return true
}

func (p *Channel) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Channel(%+v)", *p)
}

// Attributes:
//  - ServerIndex
//  - ServerName
//  - ServerStatus
//  - ServerType
//  - Channels
type Server struct {
	ServerIndex  int8       `thrift:"ServerIndex,1,required" db:"ServerIndex" json:"ServerIndex"`
	ServerName   string     `thrift:"ServerName,2,required" db:"ServerName" json:"ServerName"`
	ServerStatus int8       `thrift:"ServerStatus,3,required" db:"ServerStatus" json:"ServerStatus"`
	ServerType   int8       `thrift:"ServerType,4,required" db:"ServerType" json:"ServerType"`
	Channels     []*Channel `thrift:"Channels,5,required" db:"Channels" json:"Channels"`
}

func NewServer() *Server {
	return &Server{}
}

func (p *Server) GetServerIndex() int8 {
	return p.ServerIndex
}

func (p *Server) GetServerName() string {
	return p.ServerName
}

func (p *Server) GetServerStatus() int8 {
	return p.ServerStatus
}

func (p *Server) GetServerType() int8 {
	return p.ServerType
}

func (p *Server) GetChannels() []*Channel {
	return p.Channels
}
func (p *Server) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetServerIndex bool = false
	var issetServerName bool = false
	var issetServerStatus bool = false
	var issetServerType bool = false
	var issetChannels bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetServerIndex = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetServerName = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
				issetServerStatus = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
				issetServerType = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
				issetChannels = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetServerIndex {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ServerIndex is not set"))
	}
	if !issetServerName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ServerName is not set"))
	}
	if !issetServerStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ServerStatus is not set"))
	}
	if !issetServerType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ServerType is not set"))
	}
	if !issetChannels {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Channels is not set"))
	}
	return nil
}

func (p *Server) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := int8(v)
		p.ServerIndex = temp
	}
	return nil
}

func (p *Server) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ServerName = v
	}
	return nil
}

func (p *Server) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := int8(v)
		p.ServerStatus = temp
	}
	return nil
}

func (p *Server) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := int8(v)
		p.ServerType = temp
	}
	return nil
}

func (p *Server) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Channel, 0, size)
	p.Channels = tSlice
	for i := 0; i < size; i++ {
		_elem6 := &Channel{}
		if err := _elem6.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
		}
		p.Channels = append(p.Channels, _elem6)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Server) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Server"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Server) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ServerIndex", thrift.BYTE, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ServerIndex: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.ServerIndex)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ServerIndex (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ServerIndex: ", p), err)
	}
	return err
}

func (p *Server) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ServerName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ServerName: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ServerName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ServerName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ServerName: ", p), err)
	}
	return err
}

func (p *Server) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ServerStatus", thrift.BYTE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ServerStatus: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.ServerStatus)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ServerStatus (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ServerStatus: ", p), err)
	}
	return err
}

func (p *Server) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ServerType", thrift.BYTE, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ServerType: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.ServerType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ServerType (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ServerType: ", p), err)
	}
	return err
}

func (p *Server) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Channels", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Channels: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Channels)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Channels {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Channels: ", p), err)
	}
	return err
}

func (p *Server) Equals(other *Server) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.ServerIndex != other.ServerIndex {
		return false
	}
	if p.ServerName != other.ServerName {
		return false
	}
	if p.ServerStatus != other.ServerStatus {
		return false
	}
	if p.ServerType != other.ServerType {
		return false
	}
	if len(p.Channels) != len(other.Channels) {
		return false
	}
	for i, _tgt := range p.Channels {
		_src7 := other.Channels[i]
		if !_tgt.Equals(_src7) {
			return false
		}
	}
	return true
}

func (p *Server) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Server(%+v)", *p)
}

type ServerListRequest struct {
}

func NewServerListRequest() *ServerListRequest {
	return &ServerListRequest{}
}

func (p *ServerListRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ServerListRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ServerListRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ServerListRequest) Equals(other *ServerListRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	return true
}

func (p *ServerListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ServerListRequest(%+v)", *p)
}

// Attributes:
//  - Servers
type ServerListResponse struct {
	Servers []*Server `thrift:"Servers,1,required" db:"Servers" json:"Servers"`
}

func NewServerListResponse() *ServerListResponse {
	return &ServerListResponse{}
}

func (p *ServerListResponse) GetServers() []*Server {
	return p.Servers
}
func (p *ServerListResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetServers bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetServers = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetServers {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Servers is not set"))
	}
	return nil
}

func (p *ServerListResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Server, 0, size)
	p.Servers = tSlice
	for i := 0; i < size; i++ {
		_elem8 := &Server{}
		if err := _elem8.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem8), err)
		}
		p.Servers = append(p.Servers, _elem8)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ServerListResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ServerListResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ServerListResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Servers", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Servers: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Servers)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Servers {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Servers: ", p), err)
	}
	return err
}

func (p *ServerListResponse) Equals(other *ServerListResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.Servers) != len(other.Servers) {
		return false
	}
	for i, _tgt := range p.Servers {
		_src9 := other.Servers[i]
		if !_tgt.Equals(_src9) {
			return false
		}
	}
	return true
}

func (p *ServerListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ServerListResponse(%+v)", *p)
}

// Attributes:
//  - ServerIndex
//  - ChannelIndex
type RoomListRequest struct {
	ServerIndex  int8 `thrift:"ServerIndex,1,required" db:"ServerIndex" json:"ServerIndex"`
	ChannelIndex int8 `thrift:"ChannelIndex,2,required" db:"ChannelIndex" json:"ChannelIndex"`
}

func NewRoomListRequest() *RoomListRequest {
	return &RoomListRequest{}
}

func (p *RoomListRequest) GetServerIndex() int8 {
	return p.ServerIndex
}

func (p *RoomListRequest) GetChannelIndex() int8 {
	return p.ChannelIndex
}
func (p *RoomListRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetServerIndex bool = false
	var issetChannelIndex bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetServerIndex = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetChannelIndex = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetServerIndex {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ServerIndex is not set"))
	}
	if !issetChannelIndex {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ChannelIndex is not set"))
	}
	return nil
}

func (p *RoomListRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := int8(v)
		p.ServerIndex = temp
	}
	return nil
}

func (p *RoomListRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := int8(v)
		p.ChannelIndex = temp
	}
	return nil
}

func (p *RoomListRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "RoomListRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RoomListRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ServerIndex", thrift.BYTE, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ServerIndex: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.ServerIndex)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ServerIndex (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ServerIndex: ", p), err)
	}
	return err
}

func (p *RoomListRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ChannelIndex", thrift.BYTE, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ChannelIndex: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.ChannelIndex)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ChannelIndex (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ChannelIndex: ", p), err)
	}
	return err
}

func (p *RoomListRequest) Equals(other *RoomListRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.ServerIndex != other.ServerIndex {
		return false
	}
	if p.ChannelIndex != other.ChannelIndex {
		return false
	}
	return true
}

func (p *RoomListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoomListRequest(%+v)", *p)
}

// Attributes:
//  - Rooms
type RoomListResponse struct {
	Rooms []*ChannelRoom `thrift:"Rooms,1,required" db:"Rooms" json:"Rooms"`
}

func NewRoomListResponse() *RoomListResponse {
	return &RoomListResponse{}
}

func (p *RoomListResponse) GetRooms() []*ChannelRoom {
	return p.Rooms
}
func (p *RoomListResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetRooms bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetRooms = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetRooms {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Rooms is not set"))
	}
	return nil
}

func (p *RoomListResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ChannelRoom, 0, size)
	p.Rooms = tSlice
	for i := 0; i < size; i++ {
		_elem10 := &ChannelRoom{}
		if err := _elem10.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem10), err)
		}
		p.Rooms = append(p.Rooms, _elem10)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *RoomListResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "RoomListResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RoomListResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Rooms", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Rooms: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Rooms)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Rooms {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Rooms: ", p), err)
	}
	return err
}

func (p *RoomListResponse) Equals(other *RoomListResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.Rooms) != len(other.Rooms) {
		return false
	}
	for i, _tgt := range p.Rooms {
		_src11 := other.Rooms[i]
		if !_tgt.Equals(_src11) {
			return false
		}
	}
	return true
}

func (p *RoomListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoomListResponse(%+v)", *p)
}

// Attributes:
//  - RoomInfo
type NewRoomRequest_ struct {
	RoomInfo *ChannelRoom `thrift:"RoomInfo,1,required" db:"RoomInfo" json:"RoomInfo"`
}

func NewNewRoomRequest_() *NewRoomRequest_ {
	return &NewRoomRequest_{}
}

var NewRoomRequest__RoomInfo_DEFAULT *ChannelRoom

func (p *NewRoomRequest_) GetRoomInfo() *ChannelRoom {
	if !p.IsSetRoomInfo() {
		return NewRoomRequest__RoomInfo_DEFAULT
	}
	return p.RoomInfo
}
func (p *NewRoomRequest_) IsSetRoomInfo() bool {
	return p.RoomInfo != nil
}

func (p *NewRoomRequest_) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetRoomInfo bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetRoomInfo = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetRoomInfo {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoomInfo is not set"))
	}
	return nil
}

func (p *NewRoomRequest_) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.RoomInfo = &ChannelRoom{}
	if err := p.RoomInfo.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RoomInfo), err)
	}
	return nil
}

func (p *NewRoomRequest_) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "NewRoomRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NewRoomRequest_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "RoomInfo", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:RoomInfo: ", p), err)
	}
	if err := p.RoomInfo.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RoomInfo), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:RoomInfo: ", p), err)
	}
	return err
}

func (p *NewRoomRequest_) Equals(other *NewRoomRequest_) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if !p.RoomInfo.Equals(other.RoomInfo) {
		return false
	}
	return true
}

func (p *NewRoomRequest_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NewRoomRequest_(%+v)", *p)
}

// Attributes:
//  - RoomInfo
type NewRoomResponse_ struct {
	RoomInfo *ChannelRoom `thrift:"RoomInfo,1,required" db:"RoomInfo" json:"RoomInfo"`
}

func NewNewRoomResponse_() *NewRoomResponse_ {
	return &NewRoomResponse_{}
}

var NewRoomResponse__RoomInfo_DEFAULT *ChannelRoom

func (p *NewRoomResponse_) GetRoomInfo() *ChannelRoom {
	if !p.IsSetRoomInfo() {
		return NewRoomResponse__RoomInfo_DEFAULT
	}
	return p.RoomInfo
}
func (p *NewRoomResponse_) IsSetRoomInfo() bool {
	return p.RoomInfo != nil
}

func (p *NewRoomResponse_) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetRoomInfo bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetRoomInfo = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetRoomInfo {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoomInfo is not set"))
	}
	return nil
}

func (p *NewRoomResponse_) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.RoomInfo = &ChannelRoom{}
	if err := p.RoomInfo.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RoomInfo), err)
	}
	return nil
}

func (p *NewRoomResponse_) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "NewRoomResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NewRoomResponse_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "RoomInfo", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:RoomInfo: ", p), err)
	}
	if err := p.RoomInfo.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RoomInfo), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:RoomInfo: ", p), err)
	}
	return err
}

func (p *NewRoomResponse_) Equals(other *NewRoomResponse_) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if !p.RoomInfo.Equals(other.RoomInfo) {
		return false
	}
	return true
}

func (p *NewRoomResponse_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NewRoomResponse_(%+v)", *p)
}

// Attributes:
//  - RoomInfo
type UpdateRoomRequest struct {
	RoomInfo *ChannelRoom `thrift:"RoomInfo,1,required" db:"RoomInfo" json:"RoomInfo"`
}

func NewUpdateRoomRequest() *UpdateRoomRequest {
	return &UpdateRoomRequest{}
}

var UpdateRoomRequest_RoomInfo_DEFAULT *ChannelRoom

func (p *UpdateRoomRequest) GetRoomInfo() *ChannelRoom {
	if !p.IsSetRoomInfo() {
		return UpdateRoomRequest_RoomInfo_DEFAULT
	}
	return p.RoomInfo
}
func (p *UpdateRoomRequest) IsSetRoomInfo() bool {
	return p.RoomInfo != nil
}

func (p *UpdateRoomRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetRoomInfo bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetRoomInfo = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetRoomInfo {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoomInfo is not set"))
	}
	return nil
}

func (p *UpdateRoomRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.RoomInfo = &ChannelRoom{}
	if err := p.RoomInfo.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RoomInfo), err)
	}
	return nil
}

func (p *UpdateRoomRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UpdateRoomRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UpdateRoomRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "RoomInfo", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:RoomInfo: ", p), err)
	}
	if err := p.RoomInfo.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RoomInfo), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:RoomInfo: ", p), err)
	}
	return err
}

func (p *UpdateRoomRequest) Equals(other *UpdateRoomRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if !p.RoomInfo.Equals(other.RoomInfo) {
		return false
	}
	return true
}

func (p *UpdateRoomRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateRoomRequest(%+v)", *p)
}

// Attributes:
//  - Success
//  - RoomInfo
type UpdateRoomResponse struct {
	Success  bool         `thrift:"Success,1,required" db:"Success" json:"Success"`
	RoomInfo *ChannelRoom `thrift:"RoomInfo,2,required" db:"RoomInfo" json:"RoomInfo"`
}

func NewUpdateRoomResponse() *UpdateRoomResponse {
	return &UpdateRoomResponse{}
}

func (p *UpdateRoomResponse) GetSuccess() bool {
	return p.Success
}

var UpdateRoomResponse_RoomInfo_DEFAULT *ChannelRoom

func (p *UpdateRoomResponse) GetRoomInfo() *ChannelRoom {
	if !p.IsSetRoomInfo() {
		return UpdateRoomResponse_RoomInfo_DEFAULT
	}
	return p.RoomInfo
}
func (p *UpdateRoomResponse) IsSetRoomInfo() bool {
	return p.RoomInfo != nil
}

func (p *UpdateRoomResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSuccess bool = false
	var issetRoomInfo bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetSuccess = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetRoomInfo = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSuccess {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Success is not set"))
	}
	if !issetRoomInfo {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoomInfo is not set"))
	}
	return nil
}

func (p *UpdateRoomResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *UpdateRoomResponse) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.RoomInfo = &ChannelRoom{}
	if err := p.RoomInfo.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RoomInfo), err)
	}
	return nil
}

func (p *UpdateRoomResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UpdateRoomResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UpdateRoomResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Success", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Success: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.Success)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Success (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Success: ", p), err)
	}
	return err
}

func (p *UpdateRoomResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "RoomInfo", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:RoomInfo: ", p), err)
	}
	if err := p.RoomInfo.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RoomInfo), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:RoomInfo: ", p), err)
	}
	return err
}

func (p *UpdateRoomResponse) Equals(other *UpdateRoomResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Success != other.Success {
		return false
	}
	if !p.RoomInfo.Equals(other.RoomInfo) {
		return false
	}
	return true
}

func (p *UpdateRoomResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateRoomResponse(%+v)", *p)
}

// Attributes:
//  - Player
//  - RoomID
type JoinRoomRequest struct {
	Player int32 `thrift:"Player,1,required" db:"Player" json:"Player"`
	RoomID int16 `thrift:"RoomID,2,required" db:"RoomID" json:"RoomID"`
}

func NewJoinRoomRequest() *JoinRoomRequest {
	return &JoinRoomRequest{}
}

func (p *JoinRoomRequest) GetPlayer() int32 {
	return p.Player
}

func (p *JoinRoomRequest) GetRoomID() int16 {
	return p.RoomID
}
func (p *JoinRoomRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetPlayer bool = false
	var issetRoomID bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetPlayer = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetRoomID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetPlayer {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Player is not set"))
	}
	if !issetRoomID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoomID is not set"))
	}
	return nil
}

func (p *JoinRoomRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Player = v
	}
	return nil
}

func (p *JoinRoomRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RoomID = v
	}
	return nil
}

func (p *JoinRoomRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "JoinRoomRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *JoinRoomRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Player", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Player: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Player)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Player (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Player: ", p), err)
	}
	return err
}

func (p *JoinRoomRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "RoomID", thrift.I16, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:RoomID: ", p), err)
	}
	if err := oprot.WriteI16(ctx, int16(p.RoomID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.RoomID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:RoomID: ", p), err)
	}
	return err
}

func (p *JoinRoomRequest) Equals(other *JoinRoomRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Player != other.Player {
		return false
	}
	if p.RoomID != other.RoomID {
		return false
	}
	return true
}

func (p *JoinRoomRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JoinRoomRequest(%+v)", *p)
}

// Attributes:
//  - Success
//  - RoomInfo
type JoinRoomResponse struct {
	Success  bool         `thrift:"Success,1,required" db:"Success" json:"Success"`
	RoomInfo *ChannelRoom `thrift:"RoomInfo,2,required" db:"RoomInfo" json:"RoomInfo"`
}

func NewJoinRoomResponse() *JoinRoomResponse {
	return &JoinRoomResponse{}
}

func (p *JoinRoomResponse) GetSuccess() bool {
	return p.Success
}

var JoinRoomResponse_RoomInfo_DEFAULT *ChannelRoom

func (p *JoinRoomResponse) GetRoomInfo() *ChannelRoom {
	if !p.IsSetRoomInfo() {
		return JoinRoomResponse_RoomInfo_DEFAULT
	}
	return p.RoomInfo
}
func (p *JoinRoomResponse) IsSetRoomInfo() bool {
	return p.RoomInfo != nil
}

func (p *JoinRoomResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSuccess bool = false
	var issetRoomInfo bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetSuccess = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetRoomInfo = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSuccess {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Success is not set"))
	}
	if !issetRoomInfo {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoomInfo is not set"))
	}
	return nil
}

func (p *JoinRoomResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *JoinRoomResponse) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.RoomInfo = &ChannelRoom{}
	if err := p.RoomInfo.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RoomInfo), err)
	}
	return nil
}

func (p *JoinRoomResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "JoinRoomResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *JoinRoomResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Success", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Success: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.Success)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Success (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Success: ", p), err)
	}
	return err
}

func (p *JoinRoomResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "RoomInfo", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:RoomInfo: ", p), err)
	}
	if err := p.RoomInfo.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RoomInfo), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:RoomInfo: ", p), err)
	}
	return err
}

func (p *JoinRoomResponse) Equals(other *JoinRoomResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Success != other.Success {
		return false
	}
	if !p.RoomInfo.Equals(other.RoomInfo) {
		return false
	}
	return true
}

func (p *JoinRoomResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JoinRoomResponse(%+v)", *p)
}

// Attributes:
//  - Player
//  - RoomID
type LeaveRoomRequest struct {
	Player int32 `thrift:"Player,1,required" db:"Player" json:"Player"`
	RoomID int16 `thrift:"RoomID,2,required" db:"RoomID" json:"RoomID"`
}

func NewLeaveRoomRequest() *LeaveRoomRequest {
	return &LeaveRoomRequest{}
}

func (p *LeaveRoomRequest) GetPlayer() int32 {
	return p.Player
}

func (p *LeaveRoomRequest) GetRoomID() int16 {
	return p.RoomID
}
func (p *LeaveRoomRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetPlayer bool = false
	var issetRoomID bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetPlayer = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetRoomID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetPlayer {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Player is not set"))
	}
	if !issetRoomID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoomID is not set"))
	}
	return nil
}

func (p *LeaveRoomRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Player = v
	}
	return nil
}

func (p *LeaveRoomRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RoomID = v
	}
	return nil
}

func (p *LeaveRoomRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "LeaveRoomRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LeaveRoomRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Player", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Player: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Player)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Player (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Player: ", p), err)
	}
	return err
}

func (p *LeaveRoomRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "RoomID", thrift.I16, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:RoomID: ", p), err)
	}
	if err := oprot.WriteI16(ctx, int16(p.RoomID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.RoomID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:RoomID: ", p), err)
	}
	return err
}

func (p *LeaveRoomRequest) Equals(other *LeaveRoomRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Player != other.Player {
		return false
	}
	if p.RoomID != other.RoomID {
		return false
	}
	return true
}

func (p *LeaveRoomRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LeaveRoomRequest(%+v)", *p)
}

// Attributes:
//  - Success
//  - RoomInfo
type LeaveRoomResponse struct {
	Success  bool         `thrift:"Success,1,required" db:"Success" json:"Success"`
	RoomInfo *ChannelRoom `thrift:"RoomInfo,2,required" db:"RoomInfo" json:"RoomInfo"`
}

func NewLeaveRoomResponse() *LeaveRoomResponse {
	return &LeaveRoomResponse{}
}

func (p *LeaveRoomResponse) GetSuccess() bool {
	return p.Success
}

var LeaveRoomResponse_RoomInfo_DEFAULT *ChannelRoom

func (p *LeaveRoomResponse) GetRoomInfo() *ChannelRoom {
	if !p.IsSetRoomInfo() {
		return LeaveRoomResponse_RoomInfo_DEFAULT
	}
	return p.RoomInfo
}
func (p *LeaveRoomResponse) IsSetRoomInfo() bool {
	return p.RoomInfo != nil
}

func (p *LeaveRoomResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSuccess bool = false
	var issetRoomInfo bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetSuccess = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetRoomInfo = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSuccess {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Success is not set"))
	}
	if !issetRoomInfo {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoomInfo is not set"))
	}
	return nil
}

func (p *LeaveRoomResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *LeaveRoomResponse) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.RoomInfo = &ChannelRoom{}
	if err := p.RoomInfo.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RoomInfo), err)
	}
	return nil
}

func (p *LeaveRoomResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "LeaveRoomResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LeaveRoomResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Success", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Success: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.Success)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Success (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Success: ", p), err)
	}
	return err
}

func (p *LeaveRoomResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "RoomInfo", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:RoomInfo: ", p), err)
	}
	if err := p.RoomInfo.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RoomInfo), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:RoomInfo: ", p), err)
	}
	return err
}

func (p *LeaveRoomResponse) Equals(other *LeaveRoomResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Success != other.Success {
		return false
	}
	if !p.RoomInfo.Equals(other.RoomInfo) {
		return false
	}
	return true
}

func (p *LeaveRoomResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LeaveRoomResponse(%+v)", *p)
}

// Attributes:
//  - Player
//  - RoomID
type ToggleReadyRequest struct {
	Player int32 `thrift:"Player,1,required" db:"Player" json:"Player"`
	RoomID int16 `thrift:"RoomID,2,required" db:"RoomID" json:"RoomID"`
}

func NewToggleReadyRequest() *ToggleReadyRequest {
	return &ToggleReadyRequest{}
}

func (p *ToggleReadyRequest) GetPlayer() int32 {
	return p.Player
}

func (p *ToggleReadyRequest) GetRoomID() int16 {
	return p.RoomID
}
func (p *ToggleReadyRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetPlayer bool = false
	var issetRoomID bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetPlayer = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetRoomID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetPlayer {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Player is not set"))
	}
	if !issetRoomID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoomID is not set"))
	}
	return nil
}

func (p *ToggleReadyRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Player = v
	}
	return nil
}

func (p *ToggleReadyRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RoomID = v
	}
	return nil
}

func (p *ToggleReadyRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ToggleReadyRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ToggleReadyRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Player", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Player: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Player)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Player (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Player: ", p), err)
	}
	return err
}

func (p *ToggleReadyRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "RoomID", thrift.I16, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:RoomID: ", p), err)
	}
	if err := oprot.WriteI16(ctx, int16(p.RoomID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.RoomID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:RoomID: ", p), err)
	}
	return err
}

func (p *ToggleReadyRequest) Equals(other *ToggleReadyRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Player != other.Player {
		return false
	}
	if p.RoomID != other.RoomID {
		return false
	}
	return true
}

func (p *ToggleReadyRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ToggleReadyRequest(%+v)", *p)
}

// Attributes:
//  - Success
//  - RoomInfo
type ToggleReadyResponse struct {
	Success  bool         `thrift:"Success,1,required" db:"Success" json:"Success"`
	RoomInfo *ChannelRoom `thrift:"RoomInfo,2,required" db:"RoomInfo" json:"RoomInfo"`
}

func NewToggleReadyResponse() *ToggleReadyResponse {
	return &ToggleReadyResponse{}
}

func (p *ToggleReadyResponse) GetSuccess() bool {
	return p.Success
}

var ToggleReadyResponse_RoomInfo_DEFAULT *ChannelRoom

func (p *ToggleReadyResponse) GetRoomInfo() *ChannelRoom {
	if !p.IsSetRoomInfo() {
		return ToggleReadyResponse_RoomInfo_DEFAULT
	}
	return p.RoomInfo
}
func (p *ToggleReadyResponse) IsSetRoomInfo() bool {
	return p.RoomInfo != nil
}

func (p *ToggleReadyResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSuccess bool = false
	var issetRoomInfo bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetSuccess = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetRoomInfo = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSuccess {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Success is not set"))
	}
	if !issetRoomInfo {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoomInfo is not set"))
	}
	return nil
}

func (p *ToggleReadyResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *ToggleReadyResponse) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.RoomInfo = &ChannelRoom{}
	if err := p.RoomInfo.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RoomInfo), err)
	}
	return nil
}

func (p *ToggleReadyResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ToggleReadyResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ToggleReadyResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Success", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Success: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.Success)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Success (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Success: ", p), err)
	}
	return err
}

func (p *ToggleReadyResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "RoomInfo", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:RoomInfo: ", p), err)
	}
	if err := p.RoomInfo.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RoomInfo), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:RoomInfo: ", p), err)
	}
	return err
}

func (p *ToggleReadyResponse) Equals(other *ToggleReadyResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Success != other.Success {
		return false
	}
	if !p.RoomInfo.Equals(other.RoomInfo) {
		return false
	}
	return true
}

func (p *ToggleReadyResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ToggleReadyResponse(%+v)", *p)
}

// Attributes:
//  - HostID
//  - RoomID
type StartGameRequest struct {
	HostID int32 `thrift:"HostID,1,required" db:"HostID" json:"HostID"`
	RoomID int16 `thrift:"RoomID,2,required" db:"RoomID" json:"RoomID"`
}

func NewStartGameRequest() *StartGameRequest {
	return &StartGameRequest{}
}

func (p *StartGameRequest) GetHostID() int32 {
	return p.HostID
}

func (p *StartGameRequest) GetRoomID() int16 {
	return p.RoomID
}
func (p *StartGameRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetHostID bool = false
	var issetRoomID bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetHostID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetRoomID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetHostID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field HostID is not set"))
	}
	if !issetRoomID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoomID is not set"))
	}
	return nil
}

func (p *StartGameRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.HostID = v
	}
	return nil
}

func (p *StartGameRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RoomID = v
	}
	return nil
}

func (p *StartGameRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "StartGameRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StartGameRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "HostID", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:HostID: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.HostID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.HostID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:HostID: ", p), err)
	}
	return err
}

func (p *StartGameRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "RoomID", thrift.I16, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:RoomID: ", p), err)
	}
	if err := oprot.WriteI16(ctx, int16(p.RoomID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.RoomID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:RoomID: ", p), err)
	}
	return err
}

func (p *StartGameRequest) Equals(other *StartGameRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.HostID != other.HostID {
		return false
	}
	if p.RoomID != other.RoomID {
		return false
	}
	return true
}

func (p *StartGameRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StartGameRequest(%+v)", *p)
}

// Attributes:
//  - Success
//  - RoomInfo
type StartGameResponse struct {
	Success  bool         `thrift:"Success,1,required" db:"Success" json:"Success"`
	RoomInfo *ChannelRoom `thrift:"RoomInfo,2,required" db:"RoomInfo" json:"RoomInfo"`
}

func NewStartGameResponse() *StartGameResponse {
	return &StartGameResponse{}
}

func (p *StartGameResponse) GetSuccess() bool {
	return p.Success
}

var StartGameResponse_RoomInfo_DEFAULT *ChannelRoom

func (p *StartGameResponse) GetRoomInfo() *ChannelRoom {
	if !p.IsSetRoomInfo() {
		return StartGameResponse_RoomInfo_DEFAULT
	}
	return p.RoomInfo
}
func (p *StartGameResponse) IsSetRoomInfo() bool {
	return p.RoomInfo != nil
}

func (p *StartGameResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSuccess bool = false
	var issetRoomInfo bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetSuccess = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetRoomInfo = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSuccess {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Success is not set"))
	}
	if !issetRoomInfo {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoomInfo is not set"))
	}
	return nil
}

func (p *StartGameResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *StartGameResponse) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.RoomInfo = &ChannelRoom{}
	if err := p.RoomInfo.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RoomInfo), err)
	}
	return nil
}

func (p *StartGameResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "StartGameResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StartGameResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Success", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Success: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.Success)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Success (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Success: ", p), err)
	}
	return err
}

func (p *StartGameResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "RoomInfo", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:RoomInfo: ", p), err)
	}
	if err := p.RoomInfo.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RoomInfo), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:RoomInfo: ", p), err)
	}
	return err
}

func (p *StartGameResponse) Equals(other *StartGameResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Success != other.Success {
		return false
	}
	if !p.RoomInfo.Equals(other.RoomInfo) {
		return false
	}
	return true
}

func (p *StartGameResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StartGameResponse(%+v)", *p)
}

// Attributes:
//  - HostID
//  - RoomID
type StartCountdownRequest struct {
	HostID int32 `thrift:"HostID,1,required" db:"HostID" json:"HostID"`
	RoomID int16 `thrift:"RoomID,2,required" db:"RoomID" json:"RoomID"`
}

func NewStartCountdownRequest() *StartCountdownRequest {
	return &StartCountdownRequest{}
}

func (p *StartCountdownRequest) GetHostID() int32 {
	return p.HostID
}

func (p *StartCountdownRequest) GetRoomID() int16 {
	return p.RoomID
}
func (p *StartCountdownRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetHostID bool = false
	var issetRoomID bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetHostID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetRoomID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetHostID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field HostID is not set"))
	}
	if !issetRoomID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoomID is not set"))
	}
	return nil
}

func (p *StartCountdownRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.HostID = v
	}
	return nil
}

func (p *StartCountdownRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RoomID = v
	}
	return nil
}

func (p *StartCountdownRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "StartCountdownRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StartCountdownRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "HostID", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:HostID: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.HostID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.HostID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:HostID: ", p), err)
	}
	return err
}

func (p *StartCountdownRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "RoomID", thrift.I16, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:RoomID: ", p), err)
	}
	if err := oprot.WriteI16(ctx, int16(p.RoomID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.RoomID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:RoomID: ", p), err)
	}
	return err
}

func (p *StartCountdownRequest) Equals(other *StartCountdownRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.HostID != other.HostID {
		return false
	}
	if p.RoomID != other.RoomID {
		return false
	}
	return true
}

func (p *StartCountdownRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StartCountdownRequest(%+v)", *p)
}

// Attributes:
//  - Success
//  - RoomInfo
//  - CurrentCount
type StartCountdownResponse struct {
	Success      bool         `thrift:"Success,1,required" db:"Success" json:"Success"`
	RoomInfo     *ChannelRoom `thrift:"RoomInfo,2,required" db:"RoomInfo" json:"RoomInfo"`
	CurrentCount int32        `thrift:"CurrentCount,3,required" db:"CurrentCount" json:"CurrentCount"`
}

func NewStartCountdownResponse() *StartCountdownResponse {
	return &StartCountdownResponse{}
}

func (p *StartCountdownResponse) GetSuccess() bool {
	return p.Success
}

var StartCountdownResponse_RoomInfo_DEFAULT *ChannelRoom

func (p *StartCountdownResponse) GetRoomInfo() *ChannelRoom {
	if !p.IsSetRoomInfo() {
		return StartCountdownResponse_RoomInfo_DEFAULT
	}
	return p.RoomInfo
}

func (p *StartCountdownResponse) GetCurrentCount() int32 {
	return p.CurrentCount
}
func (p *StartCountdownResponse) IsSetRoomInfo() bool {
	return p.RoomInfo != nil
}

func (p *StartCountdownResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSuccess bool = false
	var issetRoomInfo bool = false
	var issetCurrentCount bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetSuccess = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetRoomInfo = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
				issetCurrentCount = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSuccess {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Success is not set"))
	}
	if !issetRoomInfo {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoomInfo is not set"))
	}
	if !issetCurrentCount {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CurrentCount is not set"))
	}
	return nil
}

func (p *StartCountdownResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *StartCountdownResponse) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.RoomInfo = &ChannelRoom{}
	if err := p.RoomInfo.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RoomInfo), err)
	}
	return nil
}

func (p *StartCountdownResponse) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.CurrentCount = v
	}
	return nil
}

func (p *StartCountdownResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "StartCountdownResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StartCountdownResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Success", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Success: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.Success)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Success (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Success: ", p), err)
	}
	return err
}

func (p *StartCountdownResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "RoomInfo", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:RoomInfo: ", p), err)
	}
	if err := p.RoomInfo.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RoomInfo), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:RoomInfo: ", p), err)
	}
	return err
}

func (p *StartCountdownResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "CurrentCount", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:CurrentCount: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.CurrentCount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.CurrentCount (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:CurrentCount: ", p), err)
	}
	return err
}

func (p *StartCountdownResponse) Equals(other *StartCountdownResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Success != other.Success {
		return false
	}
	if !p.RoomInfo.Equals(other.RoomInfo) {
		return false
	}
	if p.CurrentCount != other.CurrentCount {
		return false
	}
	return true
}

func (p *StartCountdownResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StartCountdownResponse(%+v)", *p)
}

// Attributes:
//  - RoomID
type GetRoomInfoRequest struct {
	RoomID int16 `thrift:"RoomID,1,required" db:"RoomID" json:"RoomID"`
}

func NewGetRoomInfoRequest() *GetRoomInfoRequest {
	return &GetRoomInfoRequest{}
}

func (p *GetRoomInfoRequest) GetRoomID() int16 {
	return p.RoomID
}
func (p *GetRoomInfoRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetRoomID bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetRoomID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetRoomID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoomID is not set"))
	}
	return nil
}

func (p *GetRoomInfoRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.RoomID = v
	}
	return nil
}

func (p *GetRoomInfoRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "GetRoomInfoRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetRoomInfoRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "RoomID", thrift.I16, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:RoomID: ", p), err)
	}
	if err := oprot.WriteI16(ctx, int16(p.RoomID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.RoomID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:RoomID: ", p), err)
	}
	return err
}

func (p *GetRoomInfoRequest) Equals(other *GetRoomInfoRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.RoomID != other.RoomID {
		return false
	}
	return true
}

func (p *GetRoomInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRoomInfoRequest(%+v)", *p)
}

// Attributes:
//  - Success
//  - RoomInfo
type GetRoomInfoResponse struct {
	Success  bool         `thrift:"Success,1,required" db:"Success" json:"Success"`
	RoomInfo *ChannelRoom `thrift:"RoomInfo,2,required" db:"RoomInfo" json:"RoomInfo"`
}

func NewGetRoomInfoResponse() *GetRoomInfoResponse {
	return &GetRoomInfoResponse{}
}

func (p *GetRoomInfoResponse) GetSuccess() bool {
	return p.Success
}

var GetRoomInfoResponse_RoomInfo_DEFAULT *ChannelRoom

func (p *GetRoomInfoResponse) GetRoomInfo() *ChannelRoom {
	if !p.IsSetRoomInfo() {
		return GetRoomInfoResponse_RoomInfo_DEFAULT
	}
	return p.RoomInfo
}
func (p *GetRoomInfoResponse) IsSetRoomInfo() bool {
	return p.RoomInfo != nil
}

func (p *GetRoomInfoResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSuccess bool = false
	var issetRoomInfo bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetSuccess = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetRoomInfo = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSuccess {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Success is not set"))
	}
	if !issetRoomInfo {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoomInfo is not set"))
	}
	return nil
}

func (p *GetRoomInfoResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *GetRoomInfoResponse) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.RoomInfo = &ChannelRoom{}
	if err := p.RoomInfo.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RoomInfo), err)
	}
	return nil
}

func (p *GetRoomInfoResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "GetRoomInfoResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetRoomInfoResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Success", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Success: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.Success)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Success (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Success: ", p), err)
	}
	return err
}

func (p *GetRoomInfoResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "RoomInfo", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:RoomInfo: ", p), err)
	}
	if err := p.RoomInfo.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RoomInfo), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:RoomInfo: ", p), err)
	}
	return err
}

func (p *GetRoomInfoResponse) Equals(other *GetRoomInfoResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Success != other.Success {
		return false
	}
	if !p.RoomInfo.Equals(other.RoomInfo) {
		return false
	}
	return true
}

func (p *GetRoomInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRoomInfoResponse(%+v)", *p)
}

// Attributes:
//  - RoomInfo
type UpdateRoomSafeRequest struct {
	RoomInfo *ChannelRoom `thrift:"RoomInfo,1,required" db:"RoomInfo" json:"RoomInfo"`
}

func NewUpdateRoomSafeRequest() *UpdateRoomSafeRequest {
	return &UpdateRoomSafeRequest{}
}

var UpdateRoomSafeRequest_RoomInfo_DEFAULT *ChannelRoom

func (p *UpdateRoomSafeRequest) GetRoomInfo() *ChannelRoom {
	if !p.IsSetRoomInfo() {
		return UpdateRoomSafeRequest_RoomInfo_DEFAULT
	}
	return p.RoomInfo
}
func (p *UpdateRoomSafeRequest) IsSetRoomInfo() bool {
	return p.RoomInfo != nil
}

func (p *UpdateRoomSafeRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetRoomInfo bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetRoomInfo = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetRoomInfo {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoomInfo is not set"))
	}
	return nil
}

func (p *UpdateRoomSafeRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.RoomInfo = &ChannelRoom{}
	if err := p.RoomInfo.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RoomInfo), err)
	}
	return nil
}

func (p *UpdateRoomSafeRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UpdateRoomSafeRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UpdateRoomSafeRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "RoomInfo", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:RoomInfo: ", p), err)
	}
	if err := p.RoomInfo.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RoomInfo), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:RoomInfo: ", p), err)
	}
	return err
}

func (p *UpdateRoomSafeRequest) Equals(other *UpdateRoomSafeRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if !p.RoomInfo.Equals(other.RoomInfo) {
		return false
	}
	return true
}

func (p *UpdateRoomSafeRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateRoomSafeRequest(%+v)", *p)
}

// Attributes:
//  - Success
//  - RoomInfo
type UpdateRoomSafeResponse struct {
	Success  bool         `thrift:"Success,1,required" db:"Success" json:"Success"`
	RoomInfo *ChannelRoom `thrift:"RoomInfo,2,required" db:"RoomInfo" json:"RoomInfo"`
}

func NewUpdateRoomSafeResponse() *UpdateRoomSafeResponse {
	return &UpdateRoomSafeResponse{}
}

func (p *UpdateRoomSafeResponse) GetSuccess() bool {
	return p.Success
}

var UpdateRoomSafeResponse_RoomInfo_DEFAULT *ChannelRoom

func (p *UpdateRoomSafeResponse) GetRoomInfo() *ChannelRoom {
	if !p.IsSetRoomInfo() {
		return UpdateRoomSafeResponse_RoomInfo_DEFAULT
	}
	return p.RoomInfo
}
func (p *UpdateRoomSafeResponse) IsSetRoomInfo() bool {
	return p.RoomInfo != nil
}

func (p *UpdateRoomSafeResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSuccess bool = false
	var issetRoomInfo bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetSuccess = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetRoomInfo = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSuccess {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Success is not set"))
	}
	if !issetRoomInfo {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoomInfo is not set"))
	}
	return nil
}

func (p *UpdateRoomSafeResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *UpdateRoomSafeResponse) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.RoomInfo = &ChannelRoom{}
	if err := p.RoomInfo.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RoomInfo), err)
	}
	return nil
}

func (p *UpdateRoomSafeResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UpdateRoomSafeResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UpdateRoomSafeResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Success", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Success: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.Success)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Success (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Success: ", p), err)
	}
	return err
}

func (p *UpdateRoomSafeResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "RoomInfo", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:RoomInfo: ", p), err)
	}
	if err := p.RoomInfo.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RoomInfo), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:RoomInfo: ", p), err)
	}
	return err
}

func (p *UpdateRoomSafeResponse) Equals(other *UpdateRoomSafeResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Success != other.Success {
		return false
	}
	if !p.RoomInfo.Equals(other.RoomInfo) {
		return false
	}
	return true
}

func (p *UpdateRoomSafeResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateRoomSafeResponse(%+v)", *p)
}

// Attributes:
//  - RoomID
type DelRoomRequest struct {
	RoomID int16 `thrift:"RoomID,1,required" db:"RoomID" json:"RoomID"`
}

func NewDelRoomRequest() *DelRoomRequest {
	return &DelRoomRequest{}
}

func (p *DelRoomRequest) GetRoomID() int16 {
	return p.RoomID
}
func (p *DelRoomRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetRoomID bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetRoomID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetRoomID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoomID is not set"))
	}
	return nil
}

func (p *DelRoomRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.RoomID = v
	}
	return nil
}

func (p *DelRoomRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "DelRoomRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DelRoomRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "RoomID", thrift.I16, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:RoomID: ", p), err)
	}
	if err := oprot.WriteI16(ctx, int16(p.RoomID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.RoomID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:RoomID: ", p), err)
	}
	return err
}

func (p *DelRoomRequest) Equals(other *DelRoomRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.RoomID != other.RoomID {
		return false
	}
	return true
}

func (p *DelRoomRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DelRoomRequest(%+v)", *p)
}

// Attributes:
//  - Success
type DelRoomResponse struct {
	Success bool `thrift:"Success,1,required" db:"Success" json:"Success"`
}

func NewDelRoomResponse() *DelRoomResponse {
	return &DelRoomResponse{}
}

func (p *DelRoomResponse) GetSuccess() bool {
	return p.Success
}
func (p *DelRoomResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSuccess bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetSuccess = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSuccess {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Success is not set"))
	}
	return nil
}

func (p *DelRoomResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *DelRoomResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "DelRoomResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DelRoomResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Success", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Success: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.Success)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Success (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Success: ", p), err)
	}
	return err
}

func (p *DelRoomResponse) Equals(other *DelRoomResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Success != other.Success {
		return false
	}
	return true
}

func (p *DelRoomResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DelRoomResponse(%+v)", *p)
}

// Attributes:
//  - RoomID
//  - UserID
//  - Name
type SetRoomHostRequest struct {
	RoomID int16  `thrift:"RoomID,1,required" db:"RoomID" json:"RoomID"`
	UserID int32  `thrift:"UserID,2,required" db:"UserID" json:"UserID"`
	Name   string `thrift:"Name,3,required" db:"Name" json:"Name"`
}

func NewSetRoomHostRequest() *SetRoomHostRequest {
	return &SetRoomHostRequest{}
}

func (p *SetRoomHostRequest) GetRoomID() int16 {
	return p.RoomID
}

func (p *SetRoomHostRequest) GetUserID() int32 {
	return p.UserID
}

func (p *SetRoomHostRequest) GetName() string {
	return p.Name
}
func (p *SetRoomHostRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetRoomID bool = false
	var issetUserID bool = false
	var issetName bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetRoomID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetUserID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
				issetName = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetRoomID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoomID is not set"))
	}
	if !issetUserID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserID is not set"))
	}
	if !issetName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"))
	}
	return nil
}

func (p *SetRoomHostRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.RoomID = v
	}
	return nil
}

func (p *SetRoomHostRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *SetRoomHostRequest) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *SetRoomHostRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SetRoomHostRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SetRoomHostRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "RoomID", thrift.I16, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:RoomID: ", p), err)
	}
	if err := oprot.WriteI16(ctx, int16(p.RoomID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.RoomID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:RoomID: ", p), err)
	}
	return err
}

func (p *SetRoomHostRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "UserID", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:UserID: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.UserID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:UserID: ", p), err)
	}
	return err
}

func (p *SetRoomHostRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Name", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Name: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Name (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Name: ", p), err)
	}
	return err
}

func (p *SetRoomHostRequest) Equals(other *SetRoomHostRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.RoomID != other.RoomID {
		return false
	}
	if p.UserID != other.UserID {
		return false
	}
	if p.Name != other.Name {
		return false
	}
	return true
}

func (p *SetRoomHostRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetRoomHostRequest(%+v)", *p)
}

// Attributes:
//  - Success
//  - RoomInfo
type SetRoomHostResponse struct {
	Success  bool         `thrift:"Success,1,required" db:"Success" json:"Success"`
	RoomInfo *ChannelRoom `thrift:"RoomInfo,2,required" db:"RoomInfo" json:"RoomInfo"`
}

func NewSetRoomHostResponse() *SetRoomHostResponse {
	return &SetRoomHostResponse{}
}

func (p *SetRoomHostResponse) GetSuccess() bool {
	return p.Success
}

var SetRoomHostResponse_RoomInfo_DEFAULT *ChannelRoom

func (p *SetRoomHostResponse) GetRoomInfo() *ChannelRoom {
	if !p.IsSetRoomInfo() {
		return SetRoomHostResponse_RoomInfo_DEFAULT
	}
	return p.RoomInfo
}
func (p *SetRoomHostResponse) IsSetRoomInfo() bool {
	return p.RoomInfo != nil
}

func (p *SetRoomHostResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSuccess bool = false
	var issetRoomInfo bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetSuccess = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetRoomInfo = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSuccess {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Success is not set"))
	}
	if !issetRoomInfo {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoomInfo is not set"))
	}
	return nil
}

func (p *SetRoomHostResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *SetRoomHostResponse) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.RoomInfo = &ChannelRoom{}
	if err := p.RoomInfo.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RoomInfo), err)
	}
	return nil
}

func (p *SetRoomHostResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SetRoomHostResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SetRoomHostResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Success", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Success: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.Success)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Success (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Success: ", p), err)
	}
	return err
}

func (p *SetRoomHostResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "RoomInfo", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:RoomInfo: ", p), err)
	}
	if err := p.RoomInfo.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RoomInfo), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:RoomInfo: ", p), err)
	}
	return err
}

func (p *SetRoomHostResponse) Equals(other *SetRoomHostResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Success != other.Success {
		return false
	}
	if !p.RoomInfo.Equals(other.RoomInfo) {
		return false
	}
	return true
}

func (p *SetRoomHostResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetRoomHostResponse(%+v)", *p)
}

// Attributes:
//  - HostID
//  - RoomID
type EndGameRequest struct {
	HostID int32 `thrift:"HostID,1,required" db:"HostID" json:"HostID"`
	RoomID int16 `thrift:"RoomID,2,required" db:"RoomID" json:"RoomID"`
}

func NewEndGameRequest() *EndGameRequest {
	return &EndGameRequest{}
}

func (p *EndGameRequest) GetHostID() int32 {
	return p.HostID
}

func (p *EndGameRequest) GetRoomID() int16 {
	return p.RoomID
}
func (p *EndGameRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetHostID bool = false
	var issetRoomID bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetHostID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetRoomID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetHostID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field HostID is not set"))
	}
	if !issetRoomID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoomID is not set"))
	}
	return nil
}

func (p *EndGameRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.HostID = v
	}
	return nil
}

func (p *EndGameRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RoomID = v
	}
	return nil
}

func (p *EndGameRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "EndGameRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *EndGameRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "HostID", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:HostID: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.HostID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.HostID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:HostID: ", p), err)
	}
	return err
}

func (p *EndGameRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "RoomID", thrift.I16, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:RoomID: ", p), err)
	}
	if err := oprot.WriteI16(ctx, int16(p.RoomID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.RoomID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:RoomID: ", p), err)
	}
	return err
}

func (p *EndGameRequest) Equals(other *EndGameRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.HostID != other.HostID {
		return false
	}
	if p.RoomID != other.RoomID {
		return false
	}
	return true
}

func (p *EndGameRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EndGameRequest(%+v)", *p)
}

// Attributes:
//  - Success
//  - RoomInfo
type EndGameResponse struct {
	Success  bool         `thrift:"Success,1,required" db:"Success" json:"Success"`
	RoomInfo *ChannelRoom `thrift:"RoomInfo,2,required" db:"RoomInfo" json:"RoomInfo"`
}

func NewEndGameResponse() *EndGameResponse {
	return &EndGameResponse{}
}

func (p *EndGameResponse) GetSuccess() bool {
	return p.Success
}

var EndGameResponse_RoomInfo_DEFAULT *ChannelRoom

func (p *EndGameResponse) GetRoomInfo() *ChannelRoom {
	if !p.IsSetRoomInfo() {
		return EndGameResponse_RoomInfo_DEFAULT
	}
	return p.RoomInfo
}
func (p *EndGameResponse) IsSetRoomInfo() bool {
	return p.RoomInfo != nil
}

func (p *EndGameResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSuccess bool = false
	var issetRoomInfo bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetSuccess = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetRoomInfo = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSuccess {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Success is not set"))
	}
	if !issetRoomInfo {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoomInfo is not set"))
	}
	return nil
}

func (p *EndGameResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *EndGameResponse) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.RoomInfo = &ChannelRoom{}
	if err := p.RoomInfo.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RoomInfo), err)
	}
	return nil
}

func (p *EndGameResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "EndGameResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *EndGameResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Success", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Success: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.Success)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Success (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Success: ", p), err)
	}
	return err
}

func (p *EndGameResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "RoomInfo", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:RoomInfo: ", p), err)
	}
	if err := p.RoomInfo.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RoomInfo), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:RoomInfo: ", p), err)
	}
	return err
}

func (p *EndGameResponse) Equals(other *EndGameResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Success != other.Success {
		return false
	}
	if !p.RoomInfo.Equals(other.RoomInfo) {
		return false
	}
	return true
}

func (p *EndGameResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EndGameResponse(%+v)", *p)
}

type RoomService interface {
	// Parameters:
	//  - Req
	ServerList(ctx context.Context, req *ServerListRequest) (_r *ServerListResponse, _err error)
	// Parameters:
	//  - Req
	RoomList(ctx context.Context, req *RoomListRequest) (_r *RoomListResponse, _err error)
	// Parameters:
	//  - Req
	NewRoom_(ctx context.Context, req *NewRoomRequest_) (_r *NewRoomResponse_, _err error)
	// Parameters:
	//  - Req
	UpdateRoom(ctx context.Context, req *UpdateRoomRequest) (_r *UpdateRoomResponse, _err error)
	// Parameters:
	//  - Req
	JoinRoom(ctx context.Context, req *JoinRoomRequest) (_r *JoinRoomResponse, _err error)
	// Parameters:
	//  - Req
	LeaveRoom(ctx context.Context, req *LeaveRoomRequest) (_r *LeaveRoomResponse, _err error)
	// Parameters:
	//  - Req
	StartGame(ctx context.Context, req *StartGameRequest) (_r *StartGameResponse, _err error)
	// Parameters:
	//  - Req
	StartCountdown(ctx context.Context, req *StartCountdownRequest) (_r *StartCountdownResponse, _err error)
	// Parameters:
	//  - Req
	ToggleReady(ctx context.Context, req *ToggleReadyRequest) (_r *ToggleReadyResponse, _err error)
	// Parameters:
	//  - Req
	GetRoomInfo(ctx context.Context, req *GetRoomInfoRequest) (_r *GetRoomInfoResponse, _err error)
	// Parameters:
	//  - Req
	UpdateRoomSafe(ctx context.Context, req *UpdateRoomSafeRequest) (_r *UpdateRoomSafeResponse, _err error)
	// Parameters:
	//  - Req
	DelRoom(ctx context.Context, req *DelRoomRequest) (_r *DelRoomResponse, _err error)
	// Parameters:
	//  - Req
	SetRoomHost(ctx context.Context, req *SetRoomHostRequest) (_r *SetRoomHostResponse, _err error)
	// Parameters:
	//  - Req
	EndGame(ctx context.Context, req *EndGameRequest) (_r *EndGameResponse, _err error)
}

type RoomServiceClient struct {
	c    thrift.TClient
	meta thrift.ResponseMeta
}

func NewRoomServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *RoomServiceClient {
	return &RoomServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewRoomServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *RoomServiceClient {
	return &RoomServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewRoomServiceClient(c thrift.TClient) *RoomServiceClient {
	return &RoomServiceClient{
		c: c,
	}
}

func (p *RoomServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *RoomServiceClient) LastResponseMeta_() thrift.ResponseMeta {
	return p.meta
}

func (p *RoomServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
	p.meta = meta
}

// Parameters:
//  - Req
func (p *RoomServiceClient) ServerList(ctx context.Context, req *ServerListRequest) (_r *ServerListResponse, _err error) {
	var _args12 RoomServiceServerListArgs
	_args12.Req = req
	var _result14 RoomServiceServerListResult
	var _meta13 thrift.ResponseMeta
	_meta13, _err = p.Client_().Call(ctx, "ServerList", &_args12, &_result14)
	p.SetLastResponseMeta_(_meta13)
	if _err != nil {
		return
	}
	return _result14.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *RoomServiceClient) RoomList(ctx context.Context, req *RoomListRequest) (_r *RoomListResponse, _err error) {
	var _args15 RoomServiceRoomListArgs
	_args15.Req = req
	var _result17 RoomServiceRoomListResult
	var _meta16 thrift.ResponseMeta
	_meta16, _err = p.Client_().Call(ctx, "RoomList", &_args15, &_result17)
	p.SetLastResponseMeta_(_meta16)
	if _err != nil {
		return
	}
	return _result17.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *RoomServiceClient) NewRoom_(ctx context.Context, req *NewRoomRequest_) (_r *NewRoomResponse_, _err error) {
	var _args18 RoomServiceNewRoomArgs_
	_args18.Req = req
	var _result20 RoomServiceNewRoomResult_
	var _meta19 thrift.ResponseMeta
	_meta19, _err = p.Client_().Call(ctx, "NewRoom", &_args18, &_result20)
	p.SetLastResponseMeta_(_meta19)
	if _err != nil {
		return
	}
	return _result20.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *RoomServiceClient) UpdateRoom(ctx context.Context, req *UpdateRoomRequest) (_r *UpdateRoomResponse, _err error) {
	var _args21 RoomServiceUpdateRoomArgs
	_args21.Req = req
	var _result23 RoomServiceUpdateRoomResult
	var _meta22 thrift.ResponseMeta
	_meta22, _err = p.Client_().Call(ctx, "UpdateRoom", &_args21, &_result23)
	p.SetLastResponseMeta_(_meta22)
	if _err != nil {
		return
	}
	return _result23.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *RoomServiceClient) JoinRoom(ctx context.Context, req *JoinRoomRequest) (_r *JoinRoomResponse, _err error) {
	var _args24 RoomServiceJoinRoomArgs
	_args24.Req = req
	var _result26 RoomServiceJoinRoomResult
	var _meta25 thrift.ResponseMeta
	_meta25, _err = p.Client_().Call(ctx, "JoinRoom", &_args24, &_result26)
	p.SetLastResponseMeta_(_meta25)
	if _err != nil {
		return
	}
	return _result26.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *RoomServiceClient) LeaveRoom(ctx context.Context, req *LeaveRoomRequest) (_r *LeaveRoomResponse, _err error) {
	var _args27 RoomServiceLeaveRoomArgs
	_args27.Req = req
	var _result29 RoomServiceLeaveRoomResult
	var _meta28 thrift.ResponseMeta
	_meta28, _err = p.Client_().Call(ctx, "LeaveRoom", &_args27, &_result29)
	p.SetLastResponseMeta_(_meta28)
	if _err != nil {
		return
	}
	return _result29.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *RoomServiceClient) StartGame(ctx context.Context, req *StartGameRequest) (_r *StartGameResponse, _err error) {
	var _args30 RoomServiceStartGameArgs
	_args30.Req = req
	var _result32 RoomServiceStartGameResult
	var _meta31 thrift.ResponseMeta
	_meta31, _err = p.Client_().Call(ctx, "StartGame", &_args30, &_result32)
	p.SetLastResponseMeta_(_meta31)
	if _err != nil {
		return
	}
	return _result32.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *RoomServiceClient) StartCountdown(ctx context.Context, req *StartCountdownRequest) (_r *StartCountdownResponse, _err error) {
	var _args33 RoomServiceStartCountdownArgs
	_args33.Req = req
	var _result35 RoomServiceStartCountdownResult
	var _meta34 thrift.ResponseMeta
	_meta34, _err = p.Client_().Call(ctx, "StartCountdown", &_args33, &_result35)
	p.SetLastResponseMeta_(_meta34)
	if _err != nil {
		return
	}
	return _result35.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *RoomServiceClient) ToggleReady(ctx context.Context, req *ToggleReadyRequest) (_r *ToggleReadyResponse, _err error) {
	var _args36 RoomServiceToggleReadyArgs
	_args36.Req = req
	var _result38 RoomServiceToggleReadyResult
	var _meta37 thrift.ResponseMeta
	_meta37, _err = p.Client_().Call(ctx, "ToggleReady", &_args36, &_result38)
	p.SetLastResponseMeta_(_meta37)
	if _err != nil {
		return
	}
	return _result38.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *RoomServiceClient) GetRoomInfo(ctx context.Context, req *GetRoomInfoRequest) (_r *GetRoomInfoResponse, _err error) {
	var _args39 RoomServiceGetRoomInfoArgs
	_args39.Req = req
	var _result41 RoomServiceGetRoomInfoResult
	var _meta40 thrift.ResponseMeta
	_meta40, _err = p.Client_().Call(ctx, "GetRoomInfo", &_args39, &_result41)
	p.SetLastResponseMeta_(_meta40)
	if _err != nil {
		return
	}
	return _result41.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *RoomServiceClient) UpdateRoomSafe(ctx context.Context, req *UpdateRoomSafeRequest) (_r *UpdateRoomSafeResponse, _err error) {
	var _args42 RoomServiceUpdateRoomSafeArgs
	_args42.Req = req
	var _result44 RoomServiceUpdateRoomSafeResult
	var _meta43 thrift.ResponseMeta
	_meta43, _err = p.Client_().Call(ctx, "UpdateRoomSafe", &_args42, &_result44)
	p.SetLastResponseMeta_(_meta43)
	if _err != nil {
		return
	}
	return _result44.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *RoomServiceClient) DelRoom(ctx context.Context, req *DelRoomRequest) (_r *DelRoomResponse, _err error) {
	var _args45 RoomServiceDelRoomArgs
	_args45.Req = req
	var _result47 RoomServiceDelRoomResult
	var _meta46 thrift.ResponseMeta
	_meta46, _err = p.Client_().Call(ctx, "DelRoom", &_args45, &_result47)
	p.SetLastResponseMeta_(_meta46)
	if _err != nil {
		return
	}
	return _result47.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *RoomServiceClient) SetRoomHost(ctx context.Context, req *SetRoomHostRequest) (_r *SetRoomHostResponse, _err error) {
	var _args48 RoomServiceSetRoomHostArgs
	_args48.Req = req
	var _result50 RoomServiceSetRoomHostResult
	var _meta49 thrift.ResponseMeta
	_meta49, _err = p.Client_().Call(ctx, "SetRoomHost", &_args48, &_result50)
	p.SetLastResponseMeta_(_meta49)
	if _err != nil {
		return
	}
	return _result50.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *RoomServiceClient) EndGame(ctx context.Context, req *EndGameRequest) (_r *EndGameResponse, _err error) {
	var _args51 RoomServiceEndGameArgs
	_args51.Req = req
	var _result53 RoomServiceEndGameResult
	var _meta52 thrift.ResponseMeta
	_meta52, _err = p.Client_().Call(ctx, "EndGame", &_args51, &_result53)
	p.SetLastResponseMeta_(_meta52)
	if _err != nil {
		return
	}
	return _result53.GetSuccess(), nil
}

type RoomServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      RoomService
}

func (p *RoomServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *RoomServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *RoomServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewRoomServiceProcessor(handler RoomService) *RoomServiceProcessor {

	self54 := &RoomServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self54.processorMap["ServerList"] = &roomServiceProcessorServerList{handler: handler}
	self54.processorMap["RoomList"] = &roomServiceProcessorRoomList{handler: handler}
	self54.processorMap["NewRoom"] = &roomServiceProcessorNewRoom_{handler: handler}
	self54.processorMap["UpdateRoom"] = &roomServiceProcessorUpdateRoom{handler: handler}
	self54.processorMap["JoinRoom"] = &roomServiceProcessorJoinRoom{handler: handler}
	self54.processorMap["LeaveRoom"] = &roomServiceProcessorLeaveRoom{handler: handler}
	self54.processorMap["StartGame"] = &roomServiceProcessorStartGame{handler: handler}
	self54.processorMap["StartCountdown"] = &roomServiceProcessorStartCountdown{handler: handler}
	self54.processorMap["ToggleReady"] = &roomServiceProcessorToggleReady{handler: handler}
	self54.processorMap["GetRoomInfo"] = &roomServiceProcessorGetRoomInfo{handler: handler}
	self54.processorMap["UpdateRoomSafe"] = &roomServiceProcessorUpdateRoomSafe{handler: handler}
	self54.processorMap["DelRoom"] = &roomServiceProcessorDelRoom{handler: handler}
	self54.processorMap["SetRoomHost"] = &roomServiceProcessorSetRoomHost{handler: handler}
	self54.processorMap["EndGame"] = &roomServiceProcessorEndGame{handler: handler}
	return self54
}

func (p *RoomServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
	if err2 != nil {
		return false, thrift.WrapTException(err2)
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(ctx, thrift.STRUCT)
	iprot.ReadMessageEnd(ctx)
	x55 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
	x55.Write(ctx, oprot)
	oprot.WriteMessageEnd(ctx)
	oprot.Flush(ctx)
	return false, x55

}

type roomServiceProcessorServerList struct {
	handler RoomService
}

func (p *roomServiceProcessorServerList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RoomServiceServerListArgs{}
	var err2 error
	if err2 = args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "ServerList", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := RoomServiceServerListResult{}
	var retval *ServerListResponse
	if retval, err2 = p.handler.ServerList(ctx, args.Req); err2 != nil {
		tickerCancel()
		if err2 == thrift.ErrAbandonRequest {
			return false, thrift.WrapTException(err2)
		}
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ServerList: "+err2.Error())
		oprot.WriteMessageBegin(ctx, "ServerList", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return true, thrift.WrapTException(err2)
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 = oprot.WriteMessageBegin(ctx, "ServerList", thrift.REPLY, seqId); err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err != nil {
		return
	}
	return true, err
}

type roomServiceProcessorRoomList struct {
	handler RoomService
}

func (p *roomServiceProcessorRoomList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RoomServiceRoomListArgs{}
	var err2 error
	if err2 = args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "RoomList", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := RoomServiceRoomListResult{}
	var retval *RoomListResponse
	if retval, err2 = p.handler.RoomList(ctx, args.Req); err2 != nil {
		tickerCancel()
		if err2 == thrift.ErrAbandonRequest {
			return false, thrift.WrapTException(err2)
		}
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RoomList: "+err2.Error())
		oprot.WriteMessageBegin(ctx, "RoomList", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return true, thrift.WrapTException(err2)
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 = oprot.WriteMessageBegin(ctx, "RoomList", thrift.REPLY, seqId); err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err != nil {
		return
	}
	return true, err
}

type roomServiceProcessorNewRoom_ struct {
	handler RoomService
}

func (p *roomServiceProcessorNewRoom_) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RoomServiceNewRoomArgs_{}
	var err2 error
	if err2 = args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "NewRoom", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := RoomServiceNewRoomResult_{}
	var retval *NewRoomResponse_
	if retval, err2 = p.handler.NewRoom_(ctx, args.Req); err2 != nil {
		tickerCancel()
		if err2 == thrift.ErrAbandonRequest {
			return false, thrift.WrapTException(err2)
		}
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing NewRoom: "+err2.Error())
		oprot.WriteMessageBegin(ctx, "NewRoom", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return true, thrift.WrapTException(err2)
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 = oprot.WriteMessageBegin(ctx, "NewRoom", thrift.REPLY, seqId); err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err != nil {
		return
	}
	return true, err
}

type roomServiceProcessorUpdateRoom struct {
	handler RoomService
}

func (p *roomServiceProcessorUpdateRoom) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RoomServiceUpdateRoomArgs{}
	var err2 error
	if err2 = args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "UpdateRoom", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := RoomServiceUpdateRoomResult{}
	var retval *UpdateRoomResponse
	if retval, err2 = p.handler.UpdateRoom(ctx, args.Req); err2 != nil {
		tickerCancel()
		if err2 == thrift.ErrAbandonRequest {
			return false, thrift.WrapTException(err2)
		}
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateRoom: "+err2.Error())
		oprot.WriteMessageBegin(ctx, "UpdateRoom", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return true, thrift.WrapTException(err2)
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 = oprot.WriteMessageBegin(ctx, "UpdateRoom", thrift.REPLY, seqId); err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err != nil {
		return
	}
	return true, err
}

type roomServiceProcessorJoinRoom struct {
	handler RoomService
}

func (p *roomServiceProcessorJoinRoom) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RoomServiceJoinRoomArgs{}
	var err2 error
	if err2 = args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "JoinRoom", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := RoomServiceJoinRoomResult{}
	var retval *JoinRoomResponse
	if retval, err2 = p.handler.JoinRoom(ctx, args.Req); err2 != nil {
		tickerCancel()
		if err2 == thrift.ErrAbandonRequest {
			return false, thrift.WrapTException(err2)
		}
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing JoinRoom: "+err2.Error())
		oprot.WriteMessageBegin(ctx, "JoinRoom", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return true, thrift.WrapTException(err2)
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 = oprot.WriteMessageBegin(ctx, "JoinRoom", thrift.REPLY, seqId); err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err != nil {
		return
	}
	return true, err
}

type roomServiceProcessorLeaveRoom struct {
	handler RoomService
}

func (p *roomServiceProcessorLeaveRoom) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RoomServiceLeaveRoomArgs{}
	var err2 error
	if err2 = args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "LeaveRoom", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := RoomServiceLeaveRoomResult{}
	var retval *LeaveRoomResponse
	if retval, err2 = p.handler.LeaveRoom(ctx, args.Req); err2 != nil {
		tickerCancel()
		if err2 == thrift.ErrAbandonRequest {
			return false, thrift.WrapTException(err2)
		}
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing LeaveRoom: "+err2.Error())
		oprot.WriteMessageBegin(ctx, "LeaveRoom", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return true, thrift.WrapTException(err2)
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 = oprot.WriteMessageBegin(ctx, "LeaveRoom", thrift.REPLY, seqId); err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err != nil {
		return
	}
	return true, err
}

type roomServiceProcessorStartGame struct {
	handler RoomService
}

func (p *roomServiceProcessorStartGame) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RoomServiceStartGameArgs{}
	var err2 error
	if err2 = args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "StartGame", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := RoomServiceStartGameResult{}
	var retval *StartGameResponse
	if retval, err2 = p.handler.StartGame(ctx, args.Req); err2 != nil {
		tickerCancel()
		if err2 == thrift.ErrAbandonRequest {
			return false, thrift.WrapTException(err2)
		}
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing StartGame: "+err2.Error())
		oprot.WriteMessageBegin(ctx, "StartGame", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return true, thrift.WrapTException(err2)
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 = oprot.WriteMessageBegin(ctx, "StartGame", thrift.REPLY, seqId); err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err != nil {
		return
	}
	return true, err
}

type roomServiceProcessorStartCountdown struct {
	handler RoomService
}

func (p *roomServiceProcessorStartCountdown) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RoomServiceStartCountdownArgs{}
	var err2 error
	if err2 = args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "StartCountdown", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := RoomServiceStartCountdownResult{}
	var retval *StartCountdownResponse
	if retval, err2 = p.handler.StartCountdown(ctx, args.Req); err2 != nil {
		tickerCancel()
		if err2 == thrift.ErrAbandonRequest {
			return false, thrift.WrapTException(err2)
		}
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing StartCountdown: "+err2.Error())
		oprot.WriteMessageBegin(ctx, "StartCountdown", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return true, thrift.WrapTException(err2)
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 = oprot.WriteMessageBegin(ctx, "StartCountdown", thrift.REPLY, seqId); err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err != nil {
		return
	}
	return true, err
}

type roomServiceProcessorToggleReady struct {
	handler RoomService
}

func (p *roomServiceProcessorToggleReady) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RoomServiceToggleReadyArgs{}
	var err2 error
	if err2 = args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "ToggleReady", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := RoomServiceToggleReadyResult{}
	var retval *ToggleReadyResponse
	if retval, err2 = p.handler.ToggleReady(ctx, args.Req); err2 != nil {
		tickerCancel()
		if err2 == thrift.ErrAbandonRequest {
			return false, thrift.WrapTException(err2)
		}
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ToggleReady: "+err2.Error())
		oprot.WriteMessageBegin(ctx, "ToggleReady", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return true, thrift.WrapTException(err2)
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 = oprot.WriteMessageBegin(ctx, "ToggleReady", thrift.REPLY, seqId); err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err != nil {
		return
	}
	return true, err
}

type roomServiceProcessorGetRoomInfo struct {
	handler RoomService
}

func (p *roomServiceProcessorGetRoomInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RoomServiceGetRoomInfoArgs{}
	var err2 error
	if err2 = args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "GetRoomInfo", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := RoomServiceGetRoomInfoResult{}
	var retval *GetRoomInfoResponse
	if retval, err2 = p.handler.GetRoomInfo(ctx, args.Req); err2 != nil {
		tickerCancel()
		if err2 == thrift.ErrAbandonRequest {
			return false, thrift.WrapTException(err2)
		}
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetRoomInfo: "+err2.Error())
		oprot.WriteMessageBegin(ctx, "GetRoomInfo", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return true, thrift.WrapTException(err2)
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 = oprot.WriteMessageBegin(ctx, "GetRoomInfo", thrift.REPLY, seqId); err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err != nil {
		return
	}
	return true, err
}

type roomServiceProcessorUpdateRoomSafe struct {
	handler RoomService
}

func (p *roomServiceProcessorUpdateRoomSafe) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RoomServiceUpdateRoomSafeArgs{}
	var err2 error
	if err2 = args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "UpdateRoomSafe", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := RoomServiceUpdateRoomSafeResult{}
	var retval *UpdateRoomSafeResponse
	if retval, err2 = p.handler.UpdateRoomSafe(ctx, args.Req); err2 != nil {
		tickerCancel()
		if err2 == thrift.ErrAbandonRequest {
			return false, thrift.WrapTException(err2)
		}
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateRoomSafe: "+err2.Error())
		oprot.WriteMessageBegin(ctx, "UpdateRoomSafe", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return true, thrift.WrapTException(err2)
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 = oprot.WriteMessageBegin(ctx, "UpdateRoomSafe", thrift.REPLY, seqId); err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err != nil {
		return
	}
	return true, err
}

type roomServiceProcessorDelRoom struct {
	handler RoomService
}

func (p *roomServiceProcessorDelRoom) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RoomServiceDelRoomArgs{}
	var err2 error
	if err2 = args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "DelRoom", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := RoomServiceDelRoomResult{}
	var retval *DelRoomResponse
	if retval, err2 = p.handler.DelRoom(ctx, args.Req); err2 != nil {
		tickerCancel()
		if err2 == thrift.ErrAbandonRequest {
			return false, thrift.WrapTException(err2)
		}
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DelRoom: "+err2.Error())
		oprot.WriteMessageBegin(ctx, "DelRoom", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return true, thrift.WrapTException(err2)
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 = oprot.WriteMessageBegin(ctx, "DelRoom", thrift.REPLY, seqId); err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err != nil {
		return
	}
	return true, err
}

type roomServiceProcessorSetRoomHost struct {
	handler RoomService
}

func (p *roomServiceProcessorSetRoomHost) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RoomServiceSetRoomHostArgs{}
	var err2 error
	if err2 = args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "SetRoomHost", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := RoomServiceSetRoomHostResult{}
	var retval *SetRoomHostResponse
	if retval, err2 = p.handler.SetRoomHost(ctx, args.Req); err2 != nil {
		tickerCancel()
		if err2 == thrift.ErrAbandonRequest {
			return false, thrift.WrapTException(err2)
		}
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetRoomHost: "+err2.Error())
		oprot.WriteMessageBegin(ctx, "SetRoomHost", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return true, thrift.WrapTException(err2)
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 = oprot.WriteMessageBegin(ctx, "SetRoomHost", thrift.REPLY, seqId); err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err != nil {
		return
	}
	return true, err
}

type roomServiceProcessorEndGame struct {
	handler RoomService
}

func (p *roomServiceProcessorEndGame) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RoomServiceEndGameArgs{}
	var err2 error
	if err2 = args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "EndGame", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := RoomServiceEndGameResult{}
	var retval *EndGameResponse
	if retval, err2 = p.handler.EndGame(ctx, args.Req); err2 != nil {
		tickerCancel()
		if err2 == thrift.ErrAbandonRequest {
			return false, thrift.WrapTException(err2)
		}
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing EndGame: "+err2.Error())
		oprot.WriteMessageBegin(ctx, "EndGame", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return true, thrift.WrapTException(err2)
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 = oprot.WriteMessageBegin(ctx, "EndGame", thrift.REPLY, seqId); err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Req
type RoomServiceServerListArgs struct {
	Req *ServerListRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewRoomServiceServerListArgs() *RoomServiceServerListArgs {
	return &RoomServiceServerListArgs{}
}

var RoomServiceServerListArgs_Req_DEFAULT *ServerListRequest

func (p *RoomServiceServerListArgs) GetReq() *ServerListRequest {
	if !p.IsSetReq() {
		return RoomServiceServerListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *RoomServiceServerListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RoomServiceServerListArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RoomServiceServerListArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Req = &ServerListRequest{}
	if err := p.Req.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *RoomServiceServerListArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ServerList_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RoomServiceServerListArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *RoomServiceServerListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoomServiceServerListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RoomServiceServerListResult struct {
	Success *ServerListResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRoomServiceServerListResult() *RoomServiceServerListResult {
	return &RoomServiceServerListResult{}
}

var RoomServiceServerListResult_Success_DEFAULT *ServerListResponse

func (p *RoomServiceServerListResult) GetSuccess() *ServerListResponse {
	if !p.IsSetSuccess() {
		return RoomServiceServerListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *RoomServiceServerListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RoomServiceServerListResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RoomServiceServerListResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &ServerListResponse{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *RoomServiceServerListResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ServerList_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RoomServiceServerListResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *RoomServiceServerListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoomServiceServerListResult(%+v)", *p)
}

// Attributes:
//  - Req
type RoomServiceRoomListArgs struct {
	Req *RoomListRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewRoomServiceRoomListArgs() *RoomServiceRoomListArgs {
	return &RoomServiceRoomListArgs{}
}

var RoomServiceRoomListArgs_Req_DEFAULT *RoomListRequest

func (p *RoomServiceRoomListArgs) GetReq() *RoomListRequest {
	if !p.IsSetReq() {
		return RoomServiceRoomListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *RoomServiceRoomListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RoomServiceRoomListArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RoomServiceRoomListArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Req = &RoomListRequest{}
	if err := p.Req.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *RoomServiceRoomListArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "RoomList_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RoomServiceRoomListArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *RoomServiceRoomListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoomServiceRoomListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RoomServiceRoomListResult struct {
	Success *RoomListResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRoomServiceRoomListResult() *RoomServiceRoomListResult {
	return &RoomServiceRoomListResult{}
}

var RoomServiceRoomListResult_Success_DEFAULT *RoomListResponse

func (p *RoomServiceRoomListResult) GetSuccess() *RoomListResponse {
	if !p.IsSetSuccess() {
		return RoomServiceRoomListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *RoomServiceRoomListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RoomServiceRoomListResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RoomServiceRoomListResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &RoomListResponse{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *RoomServiceRoomListResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "RoomList_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RoomServiceRoomListResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *RoomServiceRoomListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoomServiceRoomListResult(%+v)", *p)
}

// Attributes:
//  - Req
type RoomServiceNewRoomArgs_ struct {
	Req *NewRoomRequest_ `thrift:"req,1" db:"req" json:"req"`
}

func NewRoomServiceNewRoomArgs_() *RoomServiceNewRoomArgs_ {
	return &RoomServiceNewRoomArgs_{}
}

var RoomServiceNewRoomArgs__Req_DEFAULT *NewRoomRequest_

func (p *RoomServiceNewRoomArgs_) GetReq() *NewRoomRequest_ {
	if !p.IsSetReq() {
		return RoomServiceNewRoomArgs__Req_DEFAULT
	}
	return p.Req
}
func (p *RoomServiceNewRoomArgs_) IsSetReq() bool {
	return p.Req != nil
}

func (p *RoomServiceNewRoomArgs_) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RoomServiceNewRoomArgs_) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Req = &NewRoomRequest_{}
	if err := p.Req.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *RoomServiceNewRoomArgs_) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "NewRoom_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RoomServiceNewRoomArgs_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *RoomServiceNewRoomArgs_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoomServiceNewRoomArgs_(%+v)", *p)
}

// Attributes:
//  - Success
type RoomServiceNewRoomResult_ struct {
	Success *NewRoomResponse_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRoomServiceNewRoomResult_() *RoomServiceNewRoomResult_ {
	return &RoomServiceNewRoomResult_{}
}

var RoomServiceNewRoomResult__Success_DEFAULT *NewRoomResponse_

func (p *RoomServiceNewRoomResult_) GetSuccess() *NewRoomResponse_ {
	if !p.IsSetSuccess() {
		return RoomServiceNewRoomResult__Success_DEFAULT
	}
	return p.Success
}
func (p *RoomServiceNewRoomResult_) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RoomServiceNewRoomResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RoomServiceNewRoomResult_) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &NewRoomResponse_{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *RoomServiceNewRoomResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "NewRoom_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RoomServiceNewRoomResult_) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *RoomServiceNewRoomResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoomServiceNewRoomResult_(%+v)", *p)
}

// Attributes:
//  - Req
type RoomServiceUpdateRoomArgs struct {
	Req *UpdateRoomRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewRoomServiceUpdateRoomArgs() *RoomServiceUpdateRoomArgs {
	return &RoomServiceUpdateRoomArgs{}
}

var RoomServiceUpdateRoomArgs_Req_DEFAULT *UpdateRoomRequest

func (p *RoomServiceUpdateRoomArgs) GetReq() *UpdateRoomRequest {
	if !p.IsSetReq() {
		return RoomServiceUpdateRoomArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *RoomServiceUpdateRoomArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RoomServiceUpdateRoomArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RoomServiceUpdateRoomArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Req = &UpdateRoomRequest{}
	if err := p.Req.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *RoomServiceUpdateRoomArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UpdateRoom_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RoomServiceUpdateRoomArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *RoomServiceUpdateRoomArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoomServiceUpdateRoomArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RoomServiceUpdateRoomResult struct {
	Success *UpdateRoomResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRoomServiceUpdateRoomResult() *RoomServiceUpdateRoomResult {
	return &RoomServiceUpdateRoomResult{}
}

var RoomServiceUpdateRoomResult_Success_DEFAULT *UpdateRoomResponse

func (p *RoomServiceUpdateRoomResult) GetSuccess() *UpdateRoomResponse {
	if !p.IsSetSuccess() {
		return RoomServiceUpdateRoomResult_Success_DEFAULT
	}
	return p.Success
}
func (p *RoomServiceUpdateRoomResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RoomServiceUpdateRoomResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RoomServiceUpdateRoomResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &UpdateRoomResponse{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *RoomServiceUpdateRoomResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UpdateRoom_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RoomServiceUpdateRoomResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *RoomServiceUpdateRoomResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoomServiceUpdateRoomResult(%+v)", *p)
}

// Attributes:
//  - Req
type RoomServiceJoinRoomArgs struct {
	Req *JoinRoomRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewRoomServiceJoinRoomArgs() *RoomServiceJoinRoomArgs {
	return &RoomServiceJoinRoomArgs{}
}

var RoomServiceJoinRoomArgs_Req_DEFAULT *JoinRoomRequest

func (p *RoomServiceJoinRoomArgs) GetReq() *JoinRoomRequest {
	if !p.IsSetReq() {
		return RoomServiceJoinRoomArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *RoomServiceJoinRoomArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RoomServiceJoinRoomArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RoomServiceJoinRoomArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Req = &JoinRoomRequest{}
	if err := p.Req.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *RoomServiceJoinRoomArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "JoinRoom_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RoomServiceJoinRoomArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *RoomServiceJoinRoomArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoomServiceJoinRoomArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RoomServiceJoinRoomResult struct {
	Success *JoinRoomResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRoomServiceJoinRoomResult() *RoomServiceJoinRoomResult {
	return &RoomServiceJoinRoomResult{}
}

var RoomServiceJoinRoomResult_Success_DEFAULT *JoinRoomResponse

func (p *RoomServiceJoinRoomResult) GetSuccess() *JoinRoomResponse {
	if !p.IsSetSuccess() {
		return RoomServiceJoinRoomResult_Success_DEFAULT
	}
	return p.Success
}
func (p *RoomServiceJoinRoomResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RoomServiceJoinRoomResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RoomServiceJoinRoomResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &JoinRoomResponse{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *RoomServiceJoinRoomResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "JoinRoom_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RoomServiceJoinRoomResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *RoomServiceJoinRoomResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoomServiceJoinRoomResult(%+v)", *p)
}

// Attributes:
//  - Req
type RoomServiceLeaveRoomArgs struct {
	Req *LeaveRoomRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewRoomServiceLeaveRoomArgs() *RoomServiceLeaveRoomArgs {
	return &RoomServiceLeaveRoomArgs{}
}

var RoomServiceLeaveRoomArgs_Req_DEFAULT *LeaveRoomRequest

func (p *RoomServiceLeaveRoomArgs) GetReq() *LeaveRoomRequest {
	if !p.IsSetReq() {
		return RoomServiceLeaveRoomArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *RoomServiceLeaveRoomArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RoomServiceLeaveRoomArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RoomServiceLeaveRoomArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Req = &LeaveRoomRequest{}
	if err := p.Req.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *RoomServiceLeaveRoomArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "LeaveRoom_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RoomServiceLeaveRoomArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *RoomServiceLeaveRoomArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoomServiceLeaveRoomArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RoomServiceLeaveRoomResult struct {
	Success *LeaveRoomResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRoomServiceLeaveRoomResult() *RoomServiceLeaveRoomResult {
	return &RoomServiceLeaveRoomResult{}
}

var RoomServiceLeaveRoomResult_Success_DEFAULT *LeaveRoomResponse

func (p *RoomServiceLeaveRoomResult) GetSuccess() *LeaveRoomResponse {
	if !p.IsSetSuccess() {
		return RoomServiceLeaveRoomResult_Success_DEFAULT
	}
	return p.Success
}
func (p *RoomServiceLeaveRoomResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RoomServiceLeaveRoomResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RoomServiceLeaveRoomResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &LeaveRoomResponse{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *RoomServiceLeaveRoomResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "LeaveRoom_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RoomServiceLeaveRoomResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *RoomServiceLeaveRoomResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoomServiceLeaveRoomResult(%+v)", *p)
}

// Attributes:
//  - Req
type RoomServiceStartGameArgs struct {
	Req *StartGameRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewRoomServiceStartGameArgs() *RoomServiceStartGameArgs {
	return &RoomServiceStartGameArgs{}
}

var RoomServiceStartGameArgs_Req_DEFAULT *StartGameRequest

func (p *RoomServiceStartGameArgs) GetReq() *StartGameRequest {
	if !p.IsSetReq() {
		return RoomServiceStartGameArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *RoomServiceStartGameArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RoomServiceStartGameArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RoomServiceStartGameArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Req = &StartGameRequest{}
	if err := p.Req.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *RoomServiceStartGameArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "StartGame_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RoomServiceStartGameArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *RoomServiceStartGameArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoomServiceStartGameArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RoomServiceStartGameResult struct {
	Success *StartGameResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRoomServiceStartGameResult() *RoomServiceStartGameResult {
	return &RoomServiceStartGameResult{}
}

var RoomServiceStartGameResult_Success_DEFAULT *StartGameResponse

func (p *RoomServiceStartGameResult) GetSuccess() *StartGameResponse {
	if !p.IsSetSuccess() {
		return RoomServiceStartGameResult_Success_DEFAULT
	}
	return p.Success
}
func (p *RoomServiceStartGameResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RoomServiceStartGameResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RoomServiceStartGameResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &StartGameResponse{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *RoomServiceStartGameResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "StartGame_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RoomServiceStartGameResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *RoomServiceStartGameResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoomServiceStartGameResult(%+v)", *p)
}

// Attributes:
//  - Req
type RoomServiceStartCountdownArgs struct {
	Req *StartCountdownRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewRoomServiceStartCountdownArgs() *RoomServiceStartCountdownArgs {
	return &RoomServiceStartCountdownArgs{}
}

var RoomServiceStartCountdownArgs_Req_DEFAULT *StartCountdownRequest

func (p *RoomServiceStartCountdownArgs) GetReq() *StartCountdownRequest {
	if !p.IsSetReq() {
		return RoomServiceStartCountdownArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *RoomServiceStartCountdownArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RoomServiceStartCountdownArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RoomServiceStartCountdownArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Req = &StartCountdownRequest{}
	if err := p.Req.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *RoomServiceStartCountdownArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "StartCountdown_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RoomServiceStartCountdownArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *RoomServiceStartCountdownArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoomServiceStartCountdownArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RoomServiceStartCountdownResult struct {
	Success *StartCountdownResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRoomServiceStartCountdownResult() *RoomServiceStartCountdownResult {
	return &RoomServiceStartCountdownResult{}
}

var RoomServiceStartCountdownResult_Success_DEFAULT *StartCountdownResponse

func (p *RoomServiceStartCountdownResult) GetSuccess() *StartCountdownResponse {
	if !p.IsSetSuccess() {
		return RoomServiceStartCountdownResult_Success_DEFAULT
	}
	return p.Success
}
func (p *RoomServiceStartCountdownResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RoomServiceStartCountdownResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RoomServiceStartCountdownResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &StartCountdownResponse{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *RoomServiceStartCountdownResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "StartCountdown_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RoomServiceStartCountdownResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *RoomServiceStartCountdownResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoomServiceStartCountdownResult(%+v)", *p)
}

// Attributes:
//  - Req
type RoomServiceToggleReadyArgs struct {
	Req *ToggleReadyRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewRoomServiceToggleReadyArgs() *RoomServiceToggleReadyArgs {
	return &RoomServiceToggleReadyArgs{}
}

var RoomServiceToggleReadyArgs_Req_DEFAULT *ToggleReadyRequest

func (p *RoomServiceToggleReadyArgs) GetReq() *ToggleReadyRequest {
	if !p.IsSetReq() {
		return RoomServiceToggleReadyArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *RoomServiceToggleReadyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RoomServiceToggleReadyArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RoomServiceToggleReadyArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Req = &ToggleReadyRequest{}
	if err := p.Req.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *RoomServiceToggleReadyArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ToggleReady_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RoomServiceToggleReadyArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *RoomServiceToggleReadyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoomServiceToggleReadyArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RoomServiceToggleReadyResult struct {
	Success *ToggleReadyResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRoomServiceToggleReadyResult() *RoomServiceToggleReadyResult {
	return &RoomServiceToggleReadyResult{}
}

var RoomServiceToggleReadyResult_Success_DEFAULT *ToggleReadyResponse

func (p *RoomServiceToggleReadyResult) GetSuccess() *ToggleReadyResponse {
	if !p.IsSetSuccess() {
		return RoomServiceToggleReadyResult_Success_DEFAULT
	}
	return p.Success
}
func (p *RoomServiceToggleReadyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RoomServiceToggleReadyResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RoomServiceToggleReadyResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &ToggleReadyResponse{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *RoomServiceToggleReadyResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ToggleReady_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RoomServiceToggleReadyResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *RoomServiceToggleReadyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoomServiceToggleReadyResult(%+v)", *p)
}

// Attributes:
//  - Req
type RoomServiceGetRoomInfoArgs struct {
	Req *GetRoomInfoRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewRoomServiceGetRoomInfoArgs() *RoomServiceGetRoomInfoArgs {
	return &RoomServiceGetRoomInfoArgs{}
}

var RoomServiceGetRoomInfoArgs_Req_DEFAULT *GetRoomInfoRequest

func (p *RoomServiceGetRoomInfoArgs) GetReq() *GetRoomInfoRequest {
	if !p.IsSetReq() {
		return RoomServiceGetRoomInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *RoomServiceGetRoomInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RoomServiceGetRoomInfoArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RoomServiceGetRoomInfoArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Req = &GetRoomInfoRequest{}
	if err := p.Req.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *RoomServiceGetRoomInfoArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "GetRoomInfo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RoomServiceGetRoomInfoArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *RoomServiceGetRoomInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoomServiceGetRoomInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RoomServiceGetRoomInfoResult struct {
	Success *GetRoomInfoResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRoomServiceGetRoomInfoResult() *RoomServiceGetRoomInfoResult {
	return &RoomServiceGetRoomInfoResult{}
}

var RoomServiceGetRoomInfoResult_Success_DEFAULT *GetRoomInfoResponse

func (p *RoomServiceGetRoomInfoResult) GetSuccess() *GetRoomInfoResponse {
	if !p.IsSetSuccess() {
		return RoomServiceGetRoomInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *RoomServiceGetRoomInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RoomServiceGetRoomInfoResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RoomServiceGetRoomInfoResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &GetRoomInfoResponse{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *RoomServiceGetRoomInfoResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "GetRoomInfo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RoomServiceGetRoomInfoResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *RoomServiceGetRoomInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoomServiceGetRoomInfoResult(%+v)", *p)
}

// Attributes:
//  - Req
type RoomServiceUpdateRoomSafeArgs struct {
	Req *UpdateRoomSafeRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewRoomServiceUpdateRoomSafeArgs() *RoomServiceUpdateRoomSafeArgs {
	return &RoomServiceUpdateRoomSafeArgs{}
}

var RoomServiceUpdateRoomSafeArgs_Req_DEFAULT *UpdateRoomSafeRequest

func (p *RoomServiceUpdateRoomSafeArgs) GetReq() *UpdateRoomSafeRequest {
	if !p.IsSetReq() {
		return RoomServiceUpdateRoomSafeArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *RoomServiceUpdateRoomSafeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RoomServiceUpdateRoomSafeArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RoomServiceUpdateRoomSafeArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Req = &UpdateRoomSafeRequest{}
	if err := p.Req.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *RoomServiceUpdateRoomSafeArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UpdateRoomSafe_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RoomServiceUpdateRoomSafeArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *RoomServiceUpdateRoomSafeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoomServiceUpdateRoomSafeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RoomServiceUpdateRoomSafeResult struct {
	Success *UpdateRoomSafeResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRoomServiceUpdateRoomSafeResult() *RoomServiceUpdateRoomSafeResult {
	return &RoomServiceUpdateRoomSafeResult{}
}

var RoomServiceUpdateRoomSafeResult_Success_DEFAULT *UpdateRoomSafeResponse

func (p *RoomServiceUpdateRoomSafeResult) GetSuccess() *UpdateRoomSafeResponse {
	if !p.IsSetSuccess() {
		return RoomServiceUpdateRoomSafeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *RoomServiceUpdateRoomSafeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RoomServiceUpdateRoomSafeResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RoomServiceUpdateRoomSafeResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &UpdateRoomSafeResponse{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *RoomServiceUpdateRoomSafeResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UpdateRoomSafe_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RoomServiceUpdateRoomSafeResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *RoomServiceUpdateRoomSafeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoomServiceUpdateRoomSafeResult(%+v)", *p)
}

// Attributes:
//  - Req
type RoomServiceDelRoomArgs struct {
	Req *DelRoomRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewRoomServiceDelRoomArgs() *RoomServiceDelRoomArgs {
	return &RoomServiceDelRoomArgs{}
}

var RoomServiceDelRoomArgs_Req_DEFAULT *DelRoomRequest

func (p *RoomServiceDelRoomArgs) GetReq() *DelRoomRequest {
	if !p.IsSetReq() {
		return RoomServiceDelRoomArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *RoomServiceDelRoomArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RoomServiceDelRoomArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RoomServiceDelRoomArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Req = &DelRoomRequest{}
	if err := p.Req.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *RoomServiceDelRoomArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "DelRoom_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RoomServiceDelRoomArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *RoomServiceDelRoomArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoomServiceDelRoomArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RoomServiceDelRoomResult struct {
	Success *DelRoomResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRoomServiceDelRoomResult() *RoomServiceDelRoomResult {
	return &RoomServiceDelRoomResult{}
}

var RoomServiceDelRoomResult_Success_DEFAULT *DelRoomResponse

func (p *RoomServiceDelRoomResult) GetSuccess() *DelRoomResponse {
	if !p.IsSetSuccess() {
		return RoomServiceDelRoomResult_Success_DEFAULT
	}
	return p.Success
}
func (p *RoomServiceDelRoomResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RoomServiceDelRoomResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RoomServiceDelRoomResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &DelRoomResponse{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *RoomServiceDelRoomResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "DelRoom_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RoomServiceDelRoomResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *RoomServiceDelRoomResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoomServiceDelRoomResult(%+v)", *p)
}

// Attributes:
//  - Req
type RoomServiceSetRoomHostArgs struct {
	Req *SetRoomHostRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewRoomServiceSetRoomHostArgs() *RoomServiceSetRoomHostArgs {
	return &RoomServiceSetRoomHostArgs{}
}

var RoomServiceSetRoomHostArgs_Req_DEFAULT *SetRoomHostRequest

func (p *RoomServiceSetRoomHostArgs) GetReq() *SetRoomHostRequest {
	if !p.IsSetReq() {
		return RoomServiceSetRoomHostArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *RoomServiceSetRoomHostArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RoomServiceSetRoomHostArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RoomServiceSetRoomHostArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Req = &SetRoomHostRequest{}
	if err := p.Req.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *RoomServiceSetRoomHostArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SetRoomHost_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RoomServiceSetRoomHostArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *RoomServiceSetRoomHostArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoomServiceSetRoomHostArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RoomServiceSetRoomHostResult struct {
	Success *SetRoomHostResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRoomServiceSetRoomHostResult() *RoomServiceSetRoomHostResult {
	return &RoomServiceSetRoomHostResult{}
}

var RoomServiceSetRoomHostResult_Success_DEFAULT *SetRoomHostResponse

func (p *RoomServiceSetRoomHostResult) GetSuccess() *SetRoomHostResponse {
	if !p.IsSetSuccess() {
		return RoomServiceSetRoomHostResult_Success_DEFAULT
	}
	return p.Success
}
func (p *RoomServiceSetRoomHostResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RoomServiceSetRoomHostResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RoomServiceSetRoomHostResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &SetRoomHostResponse{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *RoomServiceSetRoomHostResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SetRoomHost_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RoomServiceSetRoomHostResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *RoomServiceSetRoomHostResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoomServiceSetRoomHostResult(%+v)", *p)
}

// Attributes:
//  - Req
type RoomServiceEndGameArgs struct {
	Req *EndGameRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewRoomServiceEndGameArgs() *RoomServiceEndGameArgs {
	return &RoomServiceEndGameArgs{}
}

var RoomServiceEndGameArgs_Req_DEFAULT *EndGameRequest

func (p *RoomServiceEndGameArgs) GetReq() *EndGameRequest {
	if !p.IsSetReq() {
		return RoomServiceEndGameArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *RoomServiceEndGameArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RoomServiceEndGameArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RoomServiceEndGameArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Req = &EndGameRequest{}
	if err := p.Req.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *RoomServiceEndGameArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "EndGame_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RoomServiceEndGameArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *RoomServiceEndGameArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoomServiceEndGameArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RoomServiceEndGameResult struct {
	Success *EndGameResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRoomServiceEndGameResult() *RoomServiceEndGameResult {
	return &RoomServiceEndGameResult{}
}

var RoomServiceEndGameResult_Success_DEFAULT *EndGameResponse

func (p *RoomServiceEndGameResult) GetSuccess() *EndGameResponse {
	if !p.IsSetSuccess() {
		return RoomServiceEndGameResult_Success_DEFAULT
	}
	return p.Success
}
func (p *RoomServiceEndGameResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RoomServiceEndGameResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RoomServiceEndGameResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &EndGameResponse{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *RoomServiceEndGameResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "EndGame_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RoomServiceEndGameResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *RoomServiceEndGameResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoomServiceEndGameResult(%+v)", *p)
}
